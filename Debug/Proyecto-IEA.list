
Proyecto-IEA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006200  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08006398  08006398  00007398  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006638  08006638  0000807c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006638  08006638  00007638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006640  08006640  0000807c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006644  08006644  00007644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08006648  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  2000007c  080066c4  0000807c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080066c4  000082b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000807c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009f0c  00000000  00000000  000080ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001989  00000000  00000000  00011fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae0  00000000  00000000  00013948  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000866  00000000  00000000  00014428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000169db  00000000  00000000  00014c8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ba21  00000000  00000000  0002b669  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091e26  00000000  00000000  0003708a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8eb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036a0  00000000  00000000  000c8ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  000cc594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000007c 	.word	0x2000007c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006380 	.word	0x08006380

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000080 	.word	0x20000080
 80001d4:	08006380 	.word	0x08006380

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bb4:	f000 b988 	b.w	8000ec8 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9d08      	ldr	r5, [sp, #32]
 8000bd6:	468e      	mov	lr, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	4688      	mov	r8, r1
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d14a      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d962      	bls.n	8000cac <__udivmoddi4+0xdc>
 8000be6:	fab2 f682 	clz	r6, r2
 8000bea:	b14e      	cbz	r6, 8000c00 <__udivmoddi4+0x30>
 8000bec:	f1c6 0320 	rsb	r3, r6, #32
 8000bf0:	fa01 f806 	lsl.w	r8, r1, r6
 8000bf4:	fa20 f303 	lsr.w	r3, r0, r3
 8000bf8:	40b7      	lsls	r7, r6
 8000bfa:	ea43 0808 	orr.w	r8, r3, r8
 8000bfe:	40b4      	lsls	r4, r6
 8000c00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c04:	fa1f fc87 	uxth.w	ip, r7
 8000c08:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c0c:	0c23      	lsrs	r3, r4, #16
 8000c0e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c12:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c16:	fb01 f20c 	mul.w	r2, r1, ip
 8000c1a:	429a      	cmp	r2, r3
 8000c1c:	d909      	bls.n	8000c32 <__udivmoddi4+0x62>
 8000c1e:	18fb      	adds	r3, r7, r3
 8000c20:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c24:	f080 80ea 	bcs.w	8000dfc <__udivmoddi4+0x22c>
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	f240 80e7 	bls.w	8000dfc <__udivmoddi4+0x22c>
 8000c2e:	3902      	subs	r1, #2
 8000c30:	443b      	add	r3, r7
 8000c32:	1a9a      	subs	r2, r3, r2
 8000c34:	b2a3      	uxth	r3, r4
 8000c36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c42:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c46:	459c      	cmp	ip, r3
 8000c48:	d909      	bls.n	8000c5e <__udivmoddi4+0x8e>
 8000c4a:	18fb      	adds	r3, r7, r3
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c50:	f080 80d6 	bcs.w	8000e00 <__udivmoddi4+0x230>
 8000c54:	459c      	cmp	ip, r3
 8000c56:	f240 80d3 	bls.w	8000e00 <__udivmoddi4+0x230>
 8000c5a:	443b      	add	r3, r7
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c62:	eba3 030c 	sub.w	r3, r3, ip
 8000c66:	2100      	movs	r1, #0
 8000c68:	b11d      	cbz	r5, 8000c72 <__udivmoddi4+0xa2>
 8000c6a:	40f3      	lsrs	r3, r6
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d905      	bls.n	8000c86 <__udivmoddi4+0xb6>
 8000c7a:	b10d      	cbz	r5, 8000c80 <__udivmoddi4+0xb0>
 8000c7c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c80:	2100      	movs	r1, #0
 8000c82:	4608      	mov	r0, r1
 8000c84:	e7f5      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000c86:	fab3 f183 	clz	r1, r3
 8000c8a:	2900      	cmp	r1, #0
 8000c8c:	d146      	bne.n	8000d1c <__udivmoddi4+0x14c>
 8000c8e:	4573      	cmp	r3, lr
 8000c90:	d302      	bcc.n	8000c98 <__udivmoddi4+0xc8>
 8000c92:	4282      	cmp	r2, r0
 8000c94:	f200 8105 	bhi.w	8000ea2 <__udivmoddi4+0x2d2>
 8000c98:	1a84      	subs	r4, r0, r2
 8000c9a:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4690      	mov	r8, r2
 8000ca2:	2d00      	cmp	r5, #0
 8000ca4:	d0e5      	beq.n	8000c72 <__udivmoddi4+0xa2>
 8000ca6:	e9c5 4800 	strd	r4, r8, [r5]
 8000caa:	e7e2      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	f000 8090 	beq.w	8000dd2 <__udivmoddi4+0x202>
 8000cb2:	fab2 f682 	clz	r6, r2
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f040 80a4 	bne.w	8000e04 <__udivmoddi4+0x234>
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	0c03      	lsrs	r3, r0, #16
 8000cc0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cc4:	b280      	uxth	r0, r0
 8000cc6:	b2bc      	uxth	r4, r7
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cce:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cd6:	fb04 f20c 	mul.w	r2, r4, ip
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d907      	bls.n	8000cee <__udivmoddi4+0x11e>
 8000cde:	18fb      	adds	r3, r7, r3
 8000ce0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ce4:	d202      	bcs.n	8000cec <__udivmoddi4+0x11c>
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	f200 80e0 	bhi.w	8000eac <__udivmoddi4+0x2dc>
 8000cec:	46c4      	mov	ip, r8
 8000cee:	1a9b      	subs	r3, r3, r2
 8000cf0:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cf4:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cf8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cfc:	fb02 f404 	mul.w	r4, r2, r4
 8000d00:	429c      	cmp	r4, r3
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x144>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x142>
 8000d0c:	429c      	cmp	r4, r3
 8000d0e:	f200 80ca 	bhi.w	8000ea6 <__udivmoddi4+0x2d6>
 8000d12:	4602      	mov	r2, r0
 8000d14:	1b1b      	subs	r3, r3, r4
 8000d16:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d1a:	e7a5      	b.n	8000c68 <__udivmoddi4+0x98>
 8000d1c:	f1c1 0620 	rsb	r6, r1, #32
 8000d20:	408b      	lsls	r3, r1
 8000d22:	fa22 f706 	lsr.w	r7, r2, r6
 8000d26:	431f      	orrs	r7, r3
 8000d28:	fa0e f401 	lsl.w	r4, lr, r1
 8000d2c:	fa20 f306 	lsr.w	r3, r0, r6
 8000d30:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d34:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d38:	4323      	orrs	r3, r4
 8000d3a:	fa00 f801 	lsl.w	r8, r0, r1
 8000d3e:	fa1f fc87 	uxth.w	ip, r7
 8000d42:	fbbe f0f9 	udiv	r0, lr, r9
 8000d46:	0c1c      	lsrs	r4, r3, #16
 8000d48:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d4c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d50:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d54:	45a6      	cmp	lr, r4
 8000d56:	fa02 f201 	lsl.w	r2, r2, r1
 8000d5a:	d909      	bls.n	8000d70 <__udivmoddi4+0x1a0>
 8000d5c:	193c      	adds	r4, r7, r4
 8000d5e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d62:	f080 809c 	bcs.w	8000e9e <__udivmoddi4+0x2ce>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f240 8099 	bls.w	8000e9e <__udivmoddi4+0x2ce>
 8000d6c:	3802      	subs	r0, #2
 8000d6e:	443c      	add	r4, r7
 8000d70:	eba4 040e 	sub.w	r4, r4, lr
 8000d74:	fa1f fe83 	uxth.w	lr, r3
 8000d78:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d7c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d80:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d84:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d88:	45a4      	cmp	ip, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x1ce>
 8000d8c:	193c      	adds	r4, r7, r4
 8000d8e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d92:	f080 8082 	bcs.w	8000e9a <__udivmoddi4+0x2ca>
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d97f      	bls.n	8000e9a <__udivmoddi4+0x2ca>
 8000d9a:	3b02      	subs	r3, #2
 8000d9c:	443c      	add	r4, r7
 8000d9e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000da2:	eba4 040c 	sub.w	r4, r4, ip
 8000da6:	fba0 ec02 	umull	lr, ip, r0, r2
 8000daa:	4564      	cmp	r4, ip
 8000dac:	4673      	mov	r3, lr
 8000dae:	46e1      	mov	r9, ip
 8000db0:	d362      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000db2:	d05f      	beq.n	8000e74 <__udivmoddi4+0x2a4>
 8000db4:	b15d      	cbz	r5, 8000dce <__udivmoddi4+0x1fe>
 8000db6:	ebb8 0203 	subs.w	r2, r8, r3
 8000dba:	eb64 0409 	sbc.w	r4, r4, r9
 8000dbe:	fa04 f606 	lsl.w	r6, r4, r6
 8000dc2:	fa22 f301 	lsr.w	r3, r2, r1
 8000dc6:	431e      	orrs	r6, r3
 8000dc8:	40cc      	lsrs	r4, r1
 8000dca:	e9c5 6400 	strd	r6, r4, [r5]
 8000dce:	2100      	movs	r1, #0
 8000dd0:	e74f      	b.n	8000c72 <__udivmoddi4+0xa2>
 8000dd2:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dd6:	0c01      	lsrs	r1, r0, #16
 8000dd8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ddc:	b280      	uxth	r0, r0
 8000dde:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000de2:	463b      	mov	r3, r7
 8000de4:	4638      	mov	r0, r7
 8000de6:	463c      	mov	r4, r7
 8000de8:	46b8      	mov	r8, r7
 8000dea:	46be      	mov	lr, r7
 8000dec:	2620      	movs	r6, #32
 8000dee:	fbb1 f1f7 	udiv	r1, r1, r7
 8000df2:	eba2 0208 	sub.w	r2, r2, r8
 8000df6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dfa:	e766      	b.n	8000cca <__udivmoddi4+0xfa>
 8000dfc:	4601      	mov	r1, r0
 8000dfe:	e718      	b.n	8000c32 <__udivmoddi4+0x62>
 8000e00:	4610      	mov	r0, r2
 8000e02:	e72c      	b.n	8000c5e <__udivmoddi4+0x8e>
 8000e04:	f1c6 0220 	rsb	r2, r6, #32
 8000e08:	fa2e f302 	lsr.w	r3, lr, r2
 8000e0c:	40b7      	lsls	r7, r6
 8000e0e:	40b1      	lsls	r1, r6
 8000e10:	fa20 f202 	lsr.w	r2, r0, r2
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e1e:	b2bc      	uxth	r4, r7
 8000e20:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e24:	0c11      	lsrs	r1, r2, #16
 8000e26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2a:	fb08 f904 	mul.w	r9, r8, r4
 8000e2e:	40b0      	lsls	r0, r6
 8000e30:	4589      	cmp	r9, r1
 8000e32:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e36:	b280      	uxth	r0, r0
 8000e38:	d93e      	bls.n	8000eb8 <__udivmoddi4+0x2e8>
 8000e3a:	1879      	adds	r1, r7, r1
 8000e3c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e40:	d201      	bcs.n	8000e46 <__udivmoddi4+0x276>
 8000e42:	4589      	cmp	r9, r1
 8000e44:	d81f      	bhi.n	8000e86 <__udivmoddi4+0x2b6>
 8000e46:	eba1 0109 	sub.w	r1, r1, r9
 8000e4a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4e:	fb09 f804 	mul.w	r8, r9, r4
 8000e52:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e56:	b292      	uxth	r2, r2
 8000e58:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e5c:	4542      	cmp	r2, r8
 8000e5e:	d229      	bcs.n	8000eb4 <__udivmoddi4+0x2e4>
 8000e60:	18ba      	adds	r2, r7, r2
 8000e62:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e66:	d2c4      	bcs.n	8000df2 <__udivmoddi4+0x222>
 8000e68:	4542      	cmp	r2, r8
 8000e6a:	d2c2      	bcs.n	8000df2 <__udivmoddi4+0x222>
 8000e6c:	f1a9 0102 	sub.w	r1, r9, #2
 8000e70:	443a      	add	r2, r7
 8000e72:	e7be      	b.n	8000df2 <__udivmoddi4+0x222>
 8000e74:	45f0      	cmp	r8, lr
 8000e76:	d29d      	bcs.n	8000db4 <__udivmoddi4+0x1e4>
 8000e78:	ebbe 0302 	subs.w	r3, lr, r2
 8000e7c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e80:	3801      	subs	r0, #1
 8000e82:	46e1      	mov	r9, ip
 8000e84:	e796      	b.n	8000db4 <__udivmoddi4+0x1e4>
 8000e86:	eba7 0909 	sub.w	r9, r7, r9
 8000e8a:	4449      	add	r1, r9
 8000e8c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e90:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e94:	fb09 f804 	mul.w	r8, r9, r4
 8000e98:	e7db      	b.n	8000e52 <__udivmoddi4+0x282>
 8000e9a:	4673      	mov	r3, lr
 8000e9c:	e77f      	b.n	8000d9e <__udivmoddi4+0x1ce>
 8000e9e:	4650      	mov	r0, sl
 8000ea0:	e766      	b.n	8000d70 <__udivmoddi4+0x1a0>
 8000ea2:	4608      	mov	r0, r1
 8000ea4:	e6fd      	b.n	8000ca2 <__udivmoddi4+0xd2>
 8000ea6:	443b      	add	r3, r7
 8000ea8:	3a02      	subs	r2, #2
 8000eaa:	e733      	b.n	8000d14 <__udivmoddi4+0x144>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	443b      	add	r3, r7
 8000eb2:	e71c      	b.n	8000cee <__udivmoddi4+0x11e>
 8000eb4:	4649      	mov	r1, r9
 8000eb6:	e79c      	b.n	8000df2 <__udivmoddi4+0x222>
 8000eb8:	eba1 0109 	sub.w	r1, r1, r9
 8000ebc:	46c4      	mov	ip, r8
 8000ebe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec2:	fb09 f804 	mul.w	r8, r9, r4
 8000ec6:	e7c4      	b.n	8000e52 <__udivmoddi4+0x282>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <Control_Servo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static float os=0,x=157,y=-15,z=140,q=-0.87266463,q1,q2,q3,q4,gripper,Valor_de_PWM1,Valor_de_PWM2,Valor_de_PWM3,Valor_de_PWM4,Valor_de_PWM5,Valor_de_PWM6;
static int eje=1,angulos,conversion[2];

void Control_Servo(float Angulo,int Posicion){
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ed6:	6038      	str	r0, [r7, #0]

		float Maximo,Minimo;


	  	 switch (Posicion)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	3b01      	subs	r3, #1
 8000edc:	2b05      	cmp	r3, #5
 8000ede:	f200 80eb 	bhi.w	80010b8 <Control_Servo+0x1ec>
 8000ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8000ee8 <Control_Servo+0x1c>)
 8000ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ee8:	08000f01 	.word	0x08000f01
 8000eec:	08000f49 	.word	0x08000f49
 8000ef0:	08000f91 	.word	0x08000f91
 8000ef4:	08000fe1 	.word	0x08000fe1
 8000ef8:	08001031 	.word	0x08001031
 8000efc:	08001071 	.word	0x08001071
	  	 {
	  	 case 1: //EJE
	  		  Minimo=24;
 8000f00:	4b70      	ldr	r3, [pc, #448]	@ (80010c4 <Control_Servo+0x1f8>)
 8000f02:	60fb      	str	r3, [r7, #12]
	  		  Maximo=123;
 8000f04:	4b70      	ldr	r3, [pc, #448]	@ (80010c8 <Control_Servo+0x1fc>)
 8000f06:	60bb      	str	r3, [r7, #8]
	  		  Valor_de_PWM1=Minimo + (((Maximo-Minimo)/(180-0))*Angulo-0);
 8000f08:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f14:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 80010cc <Control_Servo+0x200>
 8000f18:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f1c:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f24:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f2c:	4b68      	ldr	r3, [pc, #416]	@ (80010d0 <Control_Servo+0x204>)
 8000f2e:	edc3 7a00 	vstr	s15, [r3]
		      htim1.Instance->CCR1=Valor_de_PWM1;
 8000f32:	4b67      	ldr	r3, [pc, #412]	@ (80010d0 <Control_Servo+0x204>)
 8000f34:	edd3 7a00 	vldr	s15, [r3]
 8000f38:	4b66      	ldr	r3, [pc, #408]	@ (80010d4 <Control_Servo+0x208>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f40:	ee17 2a90 	vmov	r2, s15
 8000f44:	635a      	str	r2, [r3, #52]	@ 0x34
	  	 break;
 8000f46:	e0b7      	b.n	80010b8 <Control_Servo+0x1ec>
	  	 case 2: //EJE2
	  		  Minimo=125;
 8000f48:	4b63      	ldr	r3, [pc, #396]	@ (80010d8 <Control_Servo+0x20c>)
 8000f4a:	60fb      	str	r3, [r7, #12]
	  		  Maximo= 30;
 8000f4c:	4b63      	ldr	r3, [pc, #396]	@ (80010dc <Control_Servo+0x210>)
 8000f4e:	60bb      	str	r3, [r7, #8]
	  		  Valor_de_PWM2=Minimo + (((Maximo-Minimo)/(180-0))*Angulo-0);
 8000f50:	ed97 7a02 	vldr	s14, [r7, #8]
 8000f54:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f5c:	eddf 6a5b 	vldr	s13, [pc, #364]	@ 80010cc <Control_Servo+0x200>
 8000f60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f64:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f74:	4b5a      	ldr	r3, [pc, #360]	@ (80010e0 <Control_Servo+0x214>)
 8000f76:	edc3 7a00 	vstr	s15, [r3]
		      htim1.Instance->CCR2=Valor_de_PWM2;
 8000f7a:	4b59      	ldr	r3, [pc, #356]	@ (80010e0 <Control_Servo+0x214>)
 8000f7c:	edd3 7a00 	vldr	s15, [r3]
 8000f80:	4b54      	ldr	r3, [pc, #336]	@ (80010d4 <Control_Servo+0x208>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f88:	ee17 2a90 	vmov	r2, s15
 8000f8c:	639a      	str	r2, [r3, #56]	@ 0x38
	  	 break;
 8000f8e:	e093      	b.n	80010b8 <Control_Servo+0x1ec>
	  	 case 3: //EJE3
	  		  Minimo=23;
 8000f90:	4b54      	ldr	r3, [pc, #336]	@ (80010e4 <Control_Servo+0x218>)
 8000f92:	60fb      	str	r3, [r7, #12]
	  		  Maximo=122;
 8000f94:	4b54      	ldr	r3, [pc, #336]	@ (80010e8 <Control_Servo+0x21c>)
 8000f96:	60bb      	str	r3, [r7, #8]
	  		  Valor_de_PWM3=(Minimo + ((Angulo+90)*(Maximo-Minimo)/(180)));
 8000f98:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f9c:	ed9f 7a53 	vldr	s14, [pc, #332]	@ 80010ec <Control_Servo+0x220>
 8000fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000fa4:	edd7 6a02 	vldr	s13, [r7, #8]
 8000fa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fac:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8000fb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fb4:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80010cc <Control_Servo+0x200>
 8000fb8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000fbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000fc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80010f0 <Control_Servo+0x224>)
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
		      htim1.Instance->CCR3=Valor_de_PWM3;
 8000fca:	4b49      	ldr	r3, [pc, #292]	@ (80010f0 <Control_Servo+0x224>)
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	4b40      	ldr	r3, [pc, #256]	@ (80010d4 <Control_Servo+0x208>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd8:	ee17 2a90 	vmov	r2, s15
 8000fdc:	63da      	str	r2, [r3, #60]	@ 0x3c
	  	 break;
 8000fde:	e06b      	b.n	80010b8 <Control_Servo+0x1ec>
	  	 case 4: //EJE4
	  		  Minimo=126;
 8000fe0:	4b44      	ldr	r3, [pc, #272]	@ (80010f4 <Control_Servo+0x228>)
 8000fe2:	60fb      	str	r3, [r7, #12]
	  		  Maximo=28;
 8000fe4:	4b44      	ldr	r3, [pc, #272]	@ (80010f8 <Control_Servo+0x22c>)
 8000fe6:	60bb      	str	r3, [r7, #8]
	  		  Valor_de_PWM4=(Minimo + ((Angulo+90)*(Maximo-Minimo)/(180)));
 8000fe8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fec:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80010ec <Control_Servo+0x220>
 8000ff0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000ff4:	edd7 6a02 	vldr	s13, [r7, #8]
 8000ff8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000ffc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001000:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001004:	eddf 6a31 	vldr	s13, [pc, #196]	@ 80010cc <Control_Servo+0x200>
 8001008:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800100c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001014:	4b39      	ldr	r3, [pc, #228]	@ (80010fc <Control_Servo+0x230>)
 8001016:	edc3 7a00 	vstr	s15, [r3]
		      htim1.Instance->CCR4=Valor_de_PWM4;
 800101a:	4b38      	ldr	r3, [pc, #224]	@ (80010fc <Control_Servo+0x230>)
 800101c:	edd3 7a00 	vldr	s15, [r3]
 8001020:	4b2c      	ldr	r3, [pc, #176]	@ (80010d4 <Control_Servo+0x208>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001028:	ee17 2a90 	vmov	r2, s15
 800102c:	641a      	str	r2, [r3, #64]	@ 0x40
	  	 break;
 800102e:	e043      	b.n	80010b8 <Control_Servo+0x1ec>
	  	 case 5: // EJE 5 DESHABILITADO
	  		  Valor_de_PWM5=Minimo + (((Maximo-Minimo)/(180-0))*Angulo-0);
 8001030:	ed97 7a02 	vldr	s14, [r7, #8]
 8001034:	edd7 7a03 	vldr	s15, [r7, #12]
 8001038:	ee77 7a67 	vsub.f32	s15, s14, s15
 800103c:	eddf 6a23 	vldr	s13, [pc, #140]	@ 80010cc <Control_Servo+0x200>
 8001040:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001044:	edd7 7a01 	vldr	s15, [r7, #4]
 8001048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001050:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001054:	4b2a      	ldr	r3, [pc, #168]	@ (8001100 <Control_Servo+0x234>)
 8001056:	edc3 7a00 	vstr	s15, [r3]
		      htim2.Instance->CCR1=Valor_de_PWM5;
 800105a:	4b29      	ldr	r3, [pc, #164]	@ (8001100 <Control_Servo+0x234>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <Control_Servo+0x238>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001068:	ee17 2a90 	vmov	r2, s15
 800106c:	635a      	str	r2, [r3, #52]	@ 0x34
	  	 break;
 800106e:	e023      	b.n	80010b8 <Control_Servo+0x1ec>
	  	 case 6: //GRIPPER 0=ABIERTO 180=CERRADO
	  		  Minimo=23;
 8001070:	4b1c      	ldr	r3, [pc, #112]	@ (80010e4 <Control_Servo+0x218>)
 8001072:	60fb      	str	r3, [r7, #12]
	  		  Maximo=123;
 8001074:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <Control_Servo+0x1fc>)
 8001076:	60bb      	str	r3, [r7, #8]
	  		  Valor_de_PWM6=Minimo + (((Maximo-Minimo)/(180-0))*Angulo-0);
 8001078:	ed97 7a02 	vldr	s14, [r7, #8]
 800107c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001084:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80010cc <Control_Servo+0x200>
 8001088:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800108c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001090:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001094:	edd7 7a03 	vldr	s15, [r7, #12]
 8001098:	ee77 7a27 	vadd.f32	s15, s14, s15
 800109c:	4b1a      	ldr	r3, [pc, #104]	@ (8001108 <Control_Servo+0x23c>)
 800109e:	edc3 7a00 	vstr	s15, [r3]
		      htim2.Instance->CCR2=Valor_de_PWM6;
 80010a2:	4b19      	ldr	r3, [pc, #100]	@ (8001108 <Control_Servo+0x23c>)
 80010a4:	edd3 7a00 	vldr	s15, [r3]
 80010a8:	4b16      	ldr	r3, [pc, #88]	@ (8001104 <Control_Servo+0x238>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010b0:	ee17 2a90 	vmov	r2, s15
 80010b4:	639a      	str	r2, [r3, #56]	@ 0x38
	  	 break;
 80010b6:	bf00      	nop

	  	 }
}
 80010b8:	bf00      	nop
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr
 80010c4:	41c00000 	.word	0x41c00000
 80010c8:	42f60000 	.word	0x42f60000
 80010cc:	43340000 	.word	0x43340000
 80010d0:	20000158 	.word	0x20000158
 80010d4:	200000b8 	.word	0x200000b8
 80010d8:	42fa0000 	.word	0x42fa0000
 80010dc:	41f00000 	.word	0x41f00000
 80010e0:	2000015c 	.word	0x2000015c
 80010e4:	41b80000 	.word	0x41b80000
 80010e8:	42f40000 	.word	0x42f40000
 80010ec:	42b40000 	.word	0x42b40000
 80010f0:	20000160 	.word	0x20000160
 80010f4:	42fc0000 	.word	0x42fc0000
 80010f8:	41e00000 	.word	0x41e00000
 80010fc:	20000164 	.word	0x20000164
 8001100:	20000168 	.word	0x20000168
 8001104:	20000100 	.word	0x20000100
 8001108:	2000016c 	.word	0x2000016c
 800110c:	00000000 	.word	0x00000000

08001110 <Cinematica_Inversa>:


void Cinematica_Inversa(void){
 8001110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001114:	ed2d 8b02 	vpush	{d8}
 8001118:	af00      	add	r7, sp, #0
	static float ex,ez,c,l1=97.23,l2=95,l3=92,l4=58;

	q1=atan2(y,x);
 800111a:	4bd3      	ldr	r3, [pc, #844]	@ (8001468 <Cinematica_Inversa+0x358>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9be 	bl	80004a0 <__aeabi_f2d>
 8001124:	4604      	mov	r4, r0
 8001126:	460d      	mov	r5, r1
 8001128:	4bd0      	ldr	r3, [pc, #832]	@ (800146c <Cinematica_Inversa+0x35c>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f9b7 	bl	80004a0 <__aeabi_f2d>
 8001132:	4602      	mov	r2, r0
 8001134:	460b      	mov	r3, r1
 8001136:	ec43 2b11 	vmov	d1, r2, r3
 800113a:	ec45 4b10 	vmov	d0, r4, r5
 800113e:	f002 fd05 	bl	8003b4c <atan2>
 8001142:	ec53 2b10 	vmov	r2, r3, d0
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fcd9 	bl	8000b00 <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	4ac7      	ldr	r2, [pc, #796]	@ (8001470 <Cinematica_Inversa+0x360>)
 8001152:	6013      	str	r3, [r2, #0]
	ex=(x/cos(q1))-l4*cos(q);
 8001154:	4bc5      	ldr	r3, [pc, #788]	@ (800146c <Cinematica_Inversa+0x35c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9a1 	bl	80004a0 <__aeabi_f2d>
 800115e:	4604      	mov	r4, r0
 8001160:	460d      	mov	r5, r1
 8001162:	4bc3      	ldr	r3, [pc, #780]	@ (8001470 <Cinematica_Inversa+0x360>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff f99a 	bl	80004a0 <__aeabi_f2d>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	ec43 2b10 	vmov	d0, r2, r3
 8001174:	f002 fd5c 	bl	8003c30 <cos>
 8001178:	ec53 2b10 	vmov	r2, r3, d0
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff fb10 	bl	80007a4 <__aeabi_ddiv>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4690      	mov	r8, r2
 800118a:	4699      	mov	r9, r3
 800118c:	4bb9      	ldr	r3, [pc, #740]	@ (8001474 <Cinematica_Inversa+0x364>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff f985 	bl	80004a0 <__aeabi_f2d>
 8001196:	4604      	mov	r4, r0
 8001198:	460d      	mov	r5, r1
 800119a:	4bb7      	ldr	r3, [pc, #732]	@ (8001478 <Cinematica_Inversa+0x368>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f97e 	bl	80004a0 <__aeabi_f2d>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	ec43 2b10 	vmov	d0, r2, r3
 80011ac:	f002 fd40 	bl	8003c30 <cos>
 80011b0:	ec53 2b10 	vmov	r2, r3, d0
 80011b4:	4620      	mov	r0, r4
 80011b6:	4629      	mov	r1, r5
 80011b8:	f7ff f9ca 	bl	8000550 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4640      	mov	r0, r8
 80011c2:	4649      	mov	r1, r9
 80011c4:	f7ff f80c 	bl	80001e0 <__aeabi_dsub>
 80011c8:	4602      	mov	r2, r0
 80011ca:	460b      	mov	r3, r1
 80011cc:	4610      	mov	r0, r2
 80011ce:	4619      	mov	r1, r3
 80011d0:	f7ff fc96 	bl	8000b00 <__aeabi_d2f>
 80011d4:	4603      	mov	r3, r0
 80011d6:	4aa9      	ldr	r2, [pc, #676]	@ (800147c <Cinematica_Inversa+0x36c>)
 80011d8:	6013      	str	r3, [r2, #0]
	ez=z-l1-(l4*sin(q));
 80011da:	4ba9      	ldr	r3, [pc, #676]	@ (8001480 <Cinematica_Inversa+0x370>)
 80011dc:	ed93 7a00 	vldr	s14, [r3]
 80011e0:	4ba8      	ldr	r3, [pc, #672]	@ (8001484 <Cinematica_Inversa+0x374>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ea:	ee17 0a90 	vmov	r0, s15
 80011ee:	f7ff f957 	bl	80004a0 <__aeabi_f2d>
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	4b9f      	ldr	r3, [pc, #636]	@ (8001474 <Cinematica_Inversa+0x364>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f950 	bl	80004a0 <__aeabi_f2d>
 8001200:	4680      	mov	r8, r0
 8001202:	4689      	mov	r9, r1
 8001204:	4b9c      	ldr	r3, [pc, #624]	@ (8001478 <Cinematica_Inversa+0x368>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff f949 	bl	80004a0 <__aeabi_f2d>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	ec43 2b10 	vmov	d0, r2, r3
 8001216:	f002 fd67 	bl	8003ce8 <sin>
 800121a:	ec53 2b10 	vmov	r2, r3, d0
 800121e:	4640      	mov	r0, r8
 8001220:	4649      	mov	r1, r9
 8001222:	f7ff f995 	bl	8000550 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4620      	mov	r0, r4
 800122c:	4629      	mov	r1, r5
 800122e:	f7fe ffd7 	bl	80001e0 <__aeabi_dsub>
 8001232:	4602      	mov	r2, r0
 8001234:	460b      	mov	r3, r1
 8001236:	4610      	mov	r0, r2
 8001238:	4619      	mov	r1, r3
 800123a:	f7ff fc61 	bl	8000b00 <__aeabi_d2f>
 800123e:	4603      	mov	r3, r0
 8001240:	4a91      	ldr	r2, [pc, #580]	@ (8001488 <Cinematica_Inversa+0x378>)
 8001242:	6013      	str	r3, [r2, #0]
	c=(pow(ex,2)+pow(ez,2)-pow(l2,2)-pow(l3,2))/(2*l2*l3);
 8001244:	4b8d      	ldr	r3, [pc, #564]	@ (800147c <Cinematica_Inversa+0x36c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff f929 	bl	80004a0 <__aeabi_f2d>
 800124e:	4602      	mov	r2, r0
 8001250:	460b      	mov	r3, r1
 8001252:	ed9f 1b83 	vldr	d1, [pc, #524]	@ 8001460 <Cinematica_Inversa+0x350>
 8001256:	ec43 2b10 	vmov	d0, r2, r3
 800125a:	f002 fc79 	bl	8003b50 <pow>
 800125e:	ec55 4b10 	vmov	r4, r5, d0
 8001262:	4b89      	ldr	r3, [pc, #548]	@ (8001488 <Cinematica_Inversa+0x378>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f91a 	bl	80004a0 <__aeabi_f2d>
 800126c:	4602      	mov	r2, r0
 800126e:	460b      	mov	r3, r1
 8001270:	ed9f 1b7b 	vldr	d1, [pc, #492]	@ 8001460 <Cinematica_Inversa+0x350>
 8001274:	ec43 2b10 	vmov	d0, r2, r3
 8001278:	f002 fc6a 	bl	8003b50 <pow>
 800127c:	ec53 2b10 	vmov	r2, r3, d0
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7fe ffae 	bl	80001e4 <__adddf3>
 8001288:	4602      	mov	r2, r0
 800128a:	460b      	mov	r3, r1
 800128c:	4614      	mov	r4, r2
 800128e:	461d      	mov	r5, r3
 8001290:	4b7e      	ldr	r3, [pc, #504]	@ (800148c <Cinematica_Inversa+0x37c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff f903 	bl	80004a0 <__aeabi_f2d>
 800129a:	4602      	mov	r2, r0
 800129c:	460b      	mov	r3, r1
 800129e:	ed9f 1b70 	vldr	d1, [pc, #448]	@ 8001460 <Cinematica_Inversa+0x350>
 80012a2:	ec43 2b10 	vmov	d0, r2, r3
 80012a6:	f002 fc53 	bl	8003b50 <pow>
 80012aa:	ec53 2b10 	vmov	r2, r3, d0
 80012ae:	4620      	mov	r0, r4
 80012b0:	4629      	mov	r1, r5
 80012b2:	f7fe ff95 	bl	80001e0 <__aeabi_dsub>
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4614      	mov	r4, r2
 80012bc:	461d      	mov	r5, r3
 80012be:	4b74      	ldr	r3, [pc, #464]	@ (8001490 <Cinematica_Inversa+0x380>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff f8ec 	bl	80004a0 <__aeabi_f2d>
 80012c8:	4602      	mov	r2, r0
 80012ca:	460b      	mov	r3, r1
 80012cc:	ed9f 1b64 	vldr	d1, [pc, #400]	@ 8001460 <Cinematica_Inversa+0x350>
 80012d0:	ec43 2b10 	vmov	d0, r2, r3
 80012d4:	f002 fc3c 	bl	8003b50 <pow>
 80012d8:	ec53 2b10 	vmov	r2, r3, d0
 80012dc:	4620      	mov	r0, r4
 80012de:	4629      	mov	r1, r5
 80012e0:	f7fe ff7e 	bl	80001e0 <__aeabi_dsub>
 80012e4:	4602      	mov	r2, r0
 80012e6:	460b      	mov	r3, r1
 80012e8:	4614      	mov	r4, r2
 80012ea:	461d      	mov	r5, r3
 80012ec:	4b67      	ldr	r3, [pc, #412]	@ (800148c <Cinematica_Inversa+0x37c>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80012f6:	4b66      	ldr	r3, [pc, #408]	@ (8001490 <Cinematica_Inversa+0x380>)
 80012f8:	edd3 7a00 	vldr	s15, [r3]
 80012fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001300:	ee17 0a90 	vmov	r0, s15
 8001304:	f7ff f8cc 	bl	80004a0 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4620      	mov	r0, r4
 800130e:	4629      	mov	r1, r5
 8001310:	f7ff fa48 	bl	80007a4 <__aeabi_ddiv>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	4610      	mov	r0, r2
 800131a:	4619      	mov	r1, r3
 800131c:	f7ff fbf0 	bl	8000b00 <__aeabi_d2f>
 8001320:	4603      	mov	r3, r0
 8001322:	4a5c      	ldr	r2, [pc, #368]	@ (8001494 <Cinematica_Inversa+0x384>)
 8001324:	6013      	str	r3, [r2, #0]
	q3=-acos(c);
 8001326:	4b5b      	ldr	r3, [pc, #364]	@ (8001494 <Cinematica_Inversa+0x384>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4618      	mov	r0, r3
 800132c:	f7ff f8b8 	bl	80004a0 <__aeabi_f2d>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	ec43 2b10 	vmov	d0, r2, r3
 8001338:	f002 fbd4 	bl	8003ae4 <acos>
 800133c:	ec53 2b10 	vmov	r2, r3, d0
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fbdc 	bl	8000b00 <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	ee07 3a90 	vmov	s15, r3
 800134e:	eef1 7a67 	vneg.f32	s15, s15
 8001352:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <Cinematica_Inversa+0x388>)
 8001354:	edc3 7a00 	vstr	s15, [r3]
	q2=atan2(ez,ex)-atan2((l3*sin(q3)),(l2+l3*cos(q3)));
 8001358:	4b4b      	ldr	r3, [pc, #300]	@ (8001488 <Cinematica_Inversa+0x378>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff f89f 	bl	80004a0 <__aeabi_f2d>
 8001362:	4604      	mov	r4, r0
 8001364:	460d      	mov	r5, r1
 8001366:	4b45      	ldr	r3, [pc, #276]	@ (800147c <Cinematica_Inversa+0x36c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f898 	bl	80004a0 <__aeabi_f2d>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	ec43 2b11 	vmov	d1, r2, r3
 8001378:	ec45 4b10 	vmov	d0, r4, r5
 800137c:	f002 fbe6 	bl	8003b4c <atan2>
 8001380:	ec5b ab10 	vmov	sl, fp, d0
 8001384:	4b42      	ldr	r3, [pc, #264]	@ (8001490 <Cinematica_Inversa+0x380>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f889 	bl	80004a0 <__aeabi_f2d>
 800138e:	4604      	mov	r4, r0
 8001390:	460d      	mov	r5, r1
 8001392:	4b41      	ldr	r3, [pc, #260]	@ (8001498 <Cinematica_Inversa+0x388>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f882 	bl	80004a0 <__aeabi_f2d>
 800139c:	4602      	mov	r2, r0
 800139e:	460b      	mov	r3, r1
 80013a0:	ec43 2b10 	vmov	d0, r2, r3
 80013a4:	f002 fca0 	bl	8003ce8 <sin>
 80013a8:	ec53 2b10 	vmov	r2, r3, d0
 80013ac:	4620      	mov	r0, r4
 80013ae:	4629      	mov	r1, r5
 80013b0:	f7ff f8ce 	bl	8000550 <__aeabi_dmul>
 80013b4:	4602      	mov	r2, r0
 80013b6:	460b      	mov	r3, r1
 80013b8:	ec43 2b18 	vmov	d8, r2, r3
 80013bc:	4b33      	ldr	r3, [pc, #204]	@ (800148c <Cinematica_Inversa+0x37c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff f86d 	bl	80004a0 <__aeabi_f2d>
 80013c6:	4604      	mov	r4, r0
 80013c8:	460d      	mov	r5, r1
 80013ca:	4b31      	ldr	r3, [pc, #196]	@ (8001490 <Cinematica_Inversa+0x380>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff f866 	bl	80004a0 <__aeabi_f2d>
 80013d4:	4680      	mov	r8, r0
 80013d6:	4689      	mov	r9, r1
 80013d8:	4b2f      	ldr	r3, [pc, #188]	@ (8001498 <Cinematica_Inversa+0x388>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff f85f 	bl	80004a0 <__aeabi_f2d>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	ec43 2b10 	vmov	d0, r2, r3
 80013ea:	f002 fc21 	bl	8003c30 <cos>
 80013ee:	ec53 2b10 	vmov	r2, r3, d0
 80013f2:	4640      	mov	r0, r8
 80013f4:	4649      	mov	r1, r9
 80013f6:	f7ff f8ab 	bl	8000550 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4620      	mov	r0, r4
 8001400:	4629      	mov	r1, r5
 8001402:	f7fe feef 	bl	80001e4 <__adddf3>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	ec43 2b17 	vmov	d7, r2, r3
 800140e:	eeb0 1a47 	vmov.f32	s2, s14
 8001412:	eef0 1a67 	vmov.f32	s3, s15
 8001416:	eeb0 0a48 	vmov.f32	s0, s16
 800141a:	eef0 0a68 	vmov.f32	s1, s17
 800141e:	f002 fb95 	bl	8003b4c <atan2>
 8001422:	ec53 2b10 	vmov	r2, r3, d0
 8001426:	4650      	mov	r0, sl
 8001428:	4659      	mov	r1, fp
 800142a:	f7fe fed9 	bl	80001e0 <__aeabi_dsub>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fb63 	bl	8000b00 <__aeabi_d2f>
 800143a:	4603      	mov	r3, r0
 800143c:	4a17      	ldr	r2, [pc, #92]	@ (800149c <Cinematica_Inversa+0x38c>)
 800143e:	6013      	str	r3, [r2, #0]



    q4=q-q2-q3;
 8001440:	4b0d      	ldr	r3, [pc, #52]	@ (8001478 <Cinematica_Inversa+0x368>)
 8001442:	ed93 7a00 	vldr	s14, [r3]
 8001446:	4b15      	ldr	r3, [pc, #84]	@ (800149c <Cinematica_Inversa+0x38c>)
 8001448:	edd3 7a00 	vldr	s15, [r3]
 800144c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001450:	4b11      	ldr	r3, [pc, #68]	@ (8001498 <Cinematica_Inversa+0x388>)
 8001452:	edd3 7a00 	vldr	s15, [r3]
 8001456:	ee77 7a67 	vsub.f32	s15, s14, s15
 800145a:	e021      	b.n	80014a0 <Cinematica_Inversa+0x390>
 800145c:	f3af 8000 	nop.w
 8001460:	00000000 	.word	0x00000000
 8001464:	40000000 	.word	0x40000000
 8001468:	20000004 	.word	0x20000004
 800146c:	20000000 	.word	0x20000000
 8001470:	20000148 	.word	0x20000148
 8001474:	20000010 	.word	0x20000010
 8001478:	2000000c 	.word	0x2000000c
 800147c:	20000170 	.word	0x20000170
 8001480:	20000008 	.word	0x20000008
 8001484:	20000014 	.word	0x20000014
 8001488:	20000174 	.word	0x20000174
 800148c:	20000018 	.word	0x20000018
 8001490:	2000001c 	.word	0x2000001c
 8001494:	20000178 	.word	0x20000178
 8001498:	20000150 	.word	0x20000150
 800149c:	2000014c 	.word	0x2000014c
 80014a0:	4b49      	ldr	r3, [pc, #292]	@ (80015c8 <Cinematica_Inversa+0x4b8>)
 80014a2:	edc3 7a00 	vstr	s15, [r3]

    q1=(q1*180)/3.141592653589;
 80014a6:	4b49      	ldr	r3, [pc, #292]	@ (80015cc <Cinematica_Inversa+0x4bc>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 80015d0 <Cinematica_Inversa+0x4c0>
 80014b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014b4:	ee17 0a90 	vmov	r0, s15
 80014b8:	f7fe fff2 	bl	80004a0 <__aeabi_f2d>
 80014bc:	a340      	add	r3, pc, #256	@ (adr r3, 80015c0 <Cinematica_Inversa+0x4b0>)
 80014be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c2:	f7ff f96f 	bl	80007a4 <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4610      	mov	r0, r2
 80014cc:	4619      	mov	r1, r3
 80014ce:	f7ff fb17 	bl	8000b00 <__aeabi_d2f>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a3d      	ldr	r2, [pc, #244]	@ (80015cc <Cinematica_Inversa+0x4bc>)
 80014d6:	6013      	str	r3, [r2, #0]
    q2=(q2*180)/3.141592653589;
 80014d8:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <Cinematica_Inversa+0x4c4>)
 80014da:	edd3 7a00 	vldr	s15, [r3]
 80014de:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 80015d0 <Cinematica_Inversa+0x4c0>
 80014e2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014e6:	ee17 0a90 	vmov	r0, s15
 80014ea:	f7fe ffd9 	bl	80004a0 <__aeabi_f2d>
 80014ee:	a334      	add	r3, pc, #208	@ (adr r3, 80015c0 <Cinematica_Inversa+0x4b0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7ff f956 	bl	80007a4 <__aeabi_ddiv>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fafe 	bl	8000b00 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	4a33      	ldr	r2, [pc, #204]	@ (80015d4 <Cinematica_Inversa+0x4c4>)
 8001508:	6013      	str	r3, [r2, #0]
    q3=(q3*180)/3.141592653589;
 800150a:	4b33      	ldr	r3, [pc, #204]	@ (80015d8 <Cinematica_Inversa+0x4c8>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 80015d0 <Cinematica_Inversa+0x4c0>
 8001514:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001518:	ee17 0a90 	vmov	r0, s15
 800151c:	f7fe ffc0 	bl	80004a0 <__aeabi_f2d>
 8001520:	a327      	add	r3, pc, #156	@ (adr r3, 80015c0 <Cinematica_Inversa+0x4b0>)
 8001522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001526:	f7ff f93d 	bl	80007a4 <__aeabi_ddiv>
 800152a:	4602      	mov	r2, r0
 800152c:	460b      	mov	r3, r1
 800152e:	4610      	mov	r0, r2
 8001530:	4619      	mov	r1, r3
 8001532:	f7ff fae5 	bl	8000b00 <__aeabi_d2f>
 8001536:	4603      	mov	r3, r0
 8001538:	4a27      	ldr	r2, [pc, #156]	@ (80015d8 <Cinematica_Inversa+0x4c8>)
 800153a:	6013      	str	r3, [r2, #0]
    q4=(q4*180)/3.141592653589;
 800153c:	4b22      	ldr	r3, [pc, #136]	@ (80015c8 <Cinematica_Inversa+0x4b8>)
 800153e:	edd3 7a00 	vldr	s15, [r3]
 8001542:	ed9f 7a23 	vldr	s14, [pc, #140]	@ 80015d0 <Cinematica_Inversa+0x4c0>
 8001546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154a:	ee17 0a90 	vmov	r0, s15
 800154e:	f7fe ffa7 	bl	80004a0 <__aeabi_f2d>
 8001552:	a31b      	add	r3, pc, #108	@ (adr r3, 80015c0 <Cinematica_Inversa+0x4b0>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f924 	bl	80007a4 <__aeabi_ddiv>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4610      	mov	r0, r2
 8001562:	4619      	mov	r1, r3
 8001564:	f7ff facc 	bl	8000b00 <__aeabi_d2f>
 8001568:	4603      	mov	r3, r0
 800156a:	4a17      	ldr	r2, [pc, #92]	@ (80015c8 <Cinematica_Inversa+0x4b8>)
 800156c:	6013      	str	r3, [r2, #0]

	 Control_Servo(q1,1);
 800156e:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <Cinematica_Inversa+0x4bc>)
 8001570:	edd3 7a00 	vldr	s15, [r3]
 8001574:	2001      	movs	r0, #1
 8001576:	eeb0 0a67 	vmov.f32	s0, s15
 800157a:	f7ff fca7 	bl	8000ecc <Control_Servo>
	 Control_Servo(q2,2);
 800157e:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <Cinematica_Inversa+0x4c4>)
 8001580:	edd3 7a00 	vldr	s15, [r3]
 8001584:	2002      	movs	r0, #2
 8001586:	eeb0 0a67 	vmov.f32	s0, s15
 800158a:	f7ff fc9f 	bl	8000ecc <Control_Servo>
	 Control_Servo(q3,3);
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <Cinematica_Inversa+0x4c8>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	2003      	movs	r0, #3
 8001596:	eeb0 0a67 	vmov.f32	s0, s15
 800159a:	f7ff fc97 	bl	8000ecc <Control_Servo>
	 Control_Servo(q4,4);
 800159e:	4b0a      	ldr	r3, [pc, #40]	@ (80015c8 <Cinematica_Inversa+0x4b8>)
 80015a0:	edd3 7a00 	vldr	s15, [r3]
 80015a4:	2004      	movs	r0, #4
 80015a6:	eeb0 0a67 	vmov.f32	s0, s15
 80015aa:	f7ff fc8f 	bl	8000ecc <Control_Servo>
}
 80015ae:	bf00      	nop
 80015b0:	46bd      	mov	sp, r7
 80015b2:	ecbd 8b02 	vpop	{d8}
 80015b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015ba:	bf00      	nop
 80015bc:	f3af 8000 	nop.w
 80015c0:	5444261e 	.word	0x5444261e
 80015c4:	400921fb 	.word	0x400921fb
 80015c8:	20000154 	.word	0x20000154
 80015cc:	20000148 	.word	0x20000148
 80015d0:	43340000 	.word	0x43340000
 80015d4:	2000014c 	.word	0x2000014c
 80015d8:	20000150 	.word	0x20000150

080015dc <abrirgripper>:
void abrirgripper(void){
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	  HAL_Delay(1000);
 80015e0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015e4:	f000 fcec 	bl	8001fc0 <HAL_Delay>
	  Control_Servo(25,6);
 80015e8:	2006      	movs	r0, #6
 80015ea:	eeb3 0a09 	vmov.f32	s0, #57	@ 0x41c80000  25.0
 80015ee:	f7ff fc6d 	bl	8000ecc <Control_Servo>
	  HAL_Delay(1000);
 80015f2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80015f6:	f000 fce3 	bl	8001fc0 <HAL_Delay>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <cerrargripper>:
void cerrargripper(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	  HAL_Delay(1000);
 8001604:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001608:	f000 fcda 	bl	8001fc0 <HAL_Delay>
	  Control_Servo(180,6);
 800160c:	2006      	movs	r0, #6
 800160e:	ed9f 0a05 	vldr	s0, [pc, #20]	@ 8001624 <cerrargripper+0x24>
 8001612:	f7ff fc5b 	bl	8000ecc <Control_Servo>
	  HAL_Delay(1000);
 8001616:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800161a:	f000 fcd1 	bl	8001fc0 <HAL_Delay>
}
 800161e:	bf00      	nop
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	43340000 	.word	0x43340000

08001628 <secuencia>:
void secuencia(void){
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

	  abrirgripper();
 800162c:	f7ff ffd6 	bl	80015dc <abrirgripper>
	  x=175;
 8001630:	4b65      	ldr	r3, [pc, #404]	@ (80017c8 <secuencia+0x1a0>)
 8001632:	4a66      	ldr	r2, [pc, #408]	@ (80017cc <secuencia+0x1a4>)
 8001634:	601a      	str	r2, [r3, #0]
	  y=5;
 8001636:	4b66      	ldr	r3, [pc, #408]	@ (80017d0 <secuencia+0x1a8>)
 8001638:	4a66      	ldr	r2, [pc, #408]	@ (80017d4 <secuencia+0x1ac>)
 800163a:	601a      	str	r2, [r3, #0]
	  z=65;
 800163c:	4b66      	ldr	r3, [pc, #408]	@ (80017d8 <secuencia+0x1b0>)
 800163e:	4a67      	ldr	r2, [pc, #412]	@ (80017dc <secuencia+0x1b4>)
 8001640:	601a      	str	r2, [r3, #0]
	  q=-0.837758064;
 8001642:	4b67      	ldr	r3, [pc, #412]	@ (80017e0 <secuencia+0x1b8>)
 8001644:	4a67      	ldr	r2, [pc, #412]	@ (80017e4 <secuencia+0x1bc>)
 8001646:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 8001648:	f7ff fd62 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 800164c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001650:	f000 fcb6 	bl	8001fc0 <HAL_Delay>

	  x=174;
 8001654:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <secuencia+0x1a0>)
 8001656:	4a64      	ldr	r2, [pc, #400]	@ (80017e8 <secuencia+0x1c0>)
 8001658:	601a      	str	r2, [r3, #0]
	  y=27;
 800165a:	4b5d      	ldr	r3, [pc, #372]	@ (80017d0 <secuencia+0x1a8>)
 800165c:	4a63      	ldr	r2, [pc, #396]	@ (80017ec <secuencia+0x1c4>)
 800165e:	601a      	str	r2, [r3, #0]
	  z=39;
 8001660:	4b5d      	ldr	r3, [pc, #372]	@ (80017d8 <secuencia+0x1b0>)
 8001662:	4a63      	ldr	r2, [pc, #396]	@ (80017f0 <secuencia+0x1c8>)
 8001664:	601a      	str	r2, [r3, #0]
	  q=-0.837758064;
 8001666:	4b5e      	ldr	r3, [pc, #376]	@ (80017e0 <secuencia+0x1b8>)
 8001668:	4a5e      	ldr	r2, [pc, #376]	@ (80017e4 <secuencia+0x1bc>)
 800166a:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 800166c:	f7ff fd50 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 8001670:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001674:	f000 fca4 	bl	8001fc0 <HAL_Delay>

	  x=203;
 8001678:	4b53      	ldr	r3, [pc, #332]	@ (80017c8 <secuencia+0x1a0>)
 800167a:	4a5e      	ldr	r2, [pc, #376]	@ (80017f4 <secuencia+0x1cc>)
 800167c:	601a      	str	r2, [r3, #0]
	  y=-15;
 800167e:	4b54      	ldr	r3, [pc, #336]	@ (80017d0 <secuencia+0x1a8>)
 8001680:	4a5d      	ldr	r2, [pc, #372]	@ (80017f8 <secuencia+0x1d0>)
 8001682:	601a      	str	r2, [r3, #0]
	  z=48;
 8001684:	4b54      	ldr	r3, [pc, #336]	@ (80017d8 <secuencia+0x1b0>)
 8001686:	4a5d      	ldr	r2, [pc, #372]	@ (80017fc <secuencia+0x1d4>)
 8001688:	601a      	str	r2, [r3, #0]
	  q=-0.453785598;
 800168a:	4b55      	ldr	r3, [pc, #340]	@ (80017e0 <secuencia+0x1b8>)
 800168c:	4a5c      	ldr	r2, [pc, #368]	@ (8001800 <secuencia+0x1d8>)
 800168e:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 8001690:	f7ff fd3e 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 8001694:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001698:	f000 fc92 	bl	8001fc0 <HAL_Delay>

	  x=201;
 800169c:	4b4a      	ldr	r3, [pc, #296]	@ (80017c8 <secuencia+0x1a0>)
 800169e:	4a59      	ldr	r2, [pc, #356]	@ (8001804 <secuencia+0x1dc>)
 80016a0:	601a      	str	r2, [r3, #0]
	  y=-15;
 80016a2:	4b4b      	ldr	r3, [pc, #300]	@ (80017d0 <secuencia+0x1a8>)
 80016a4:	4a54      	ldr	r2, [pc, #336]	@ (80017f8 <secuencia+0x1d0>)
 80016a6:	601a      	str	r2, [r3, #0]
	  z=30;
 80016a8:	4b4b      	ldr	r3, [pc, #300]	@ (80017d8 <secuencia+0x1b0>)
 80016aa:	4a57      	ldr	r2, [pc, #348]	@ (8001808 <secuencia+0x1e0>)
 80016ac:	601a      	str	r2, [r3, #0]
	  q=-0.453785598;
 80016ae:	4b4c      	ldr	r3, [pc, #304]	@ (80017e0 <secuencia+0x1b8>)
 80016b0:	4a53      	ldr	r2, [pc, #332]	@ (8001800 <secuencia+0x1d8>)
 80016b2:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 80016b4:	f7ff fd2c 	bl	8001110 <Cinematica_Inversa>
	  cerrargripper();
 80016b8:	f7ff ffa2 	bl	8001600 <cerrargripper>

	  x=150;
 80016bc:	4b42      	ldr	r3, [pc, #264]	@ (80017c8 <secuencia+0x1a0>)
 80016be:	4a53      	ldr	r2, [pc, #332]	@ (800180c <secuencia+0x1e4>)
 80016c0:	601a      	str	r2, [r3, #0]
	  y=91;
 80016c2:	4b43      	ldr	r3, [pc, #268]	@ (80017d0 <secuencia+0x1a8>)
 80016c4:	4a52      	ldr	r2, [pc, #328]	@ (8001810 <secuencia+0x1e8>)
 80016c6:	601a      	str	r2, [r3, #0]
	  z=77;
 80016c8:	4b43      	ldr	r3, [pc, #268]	@ (80017d8 <secuencia+0x1b0>)
 80016ca:	4a52      	ldr	r2, [pc, #328]	@ (8001814 <secuencia+0x1ec>)
 80016cc:	601a      	str	r2, [r3, #0]
	  q=0.244346097;
 80016ce:	4b44      	ldr	r3, [pc, #272]	@ (80017e0 <secuencia+0x1b8>)
 80016d0:	4a51      	ldr	r2, [pc, #324]	@ (8001818 <secuencia+0x1f0>)
 80016d2:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 80016d4:	f7ff fd1c 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 80016d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016dc:	f000 fc70 	bl	8001fc0 <HAL_Delay>

	  x=111;
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <secuencia+0x1a0>)
 80016e2:	4a4e      	ldr	r2, [pc, #312]	@ (800181c <secuencia+0x1f4>)
 80016e4:	601a      	str	r2, [r3, #0]
	  y=90;
 80016e6:	4b3a      	ldr	r3, [pc, #232]	@ (80017d0 <secuencia+0x1a8>)
 80016e8:	4a4d      	ldr	r2, [pc, #308]	@ (8001820 <secuencia+0x1f8>)
 80016ea:	601a      	str	r2, [r3, #0]
	  z=232;
 80016ec:	4b3a      	ldr	r3, [pc, #232]	@ (80017d8 <secuencia+0x1b0>)
 80016ee:	4a4d      	ldr	r2, [pc, #308]	@ (8001824 <secuencia+0x1fc>)
 80016f0:	601a      	str	r2, [r3, #0]
	  q=0.0174532924;
 80016f2:	4b3b      	ldr	r3, [pc, #236]	@ (80017e0 <secuencia+0x1b8>)
 80016f4:	4a4c      	ldr	r2, [pc, #304]	@ (8001828 <secuencia+0x200>)
 80016f6:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 80016f8:	f7ff fd0a 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 80016fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001700:	f000 fc5e 	bl	8001fc0 <HAL_Delay>

	  x=141;
 8001704:	4b30      	ldr	r3, [pc, #192]	@ (80017c8 <secuencia+0x1a0>)
 8001706:	4a49      	ldr	r2, [pc, #292]	@ (800182c <secuencia+0x204>)
 8001708:	601a      	str	r2, [r3, #0]
	  y=20;
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <secuencia+0x1a8>)
 800170c:	4a48      	ldr	r2, [pc, #288]	@ (8001830 <secuencia+0x208>)
 800170e:	601a      	str	r2, [r3, #0]
	  z=248;
 8001710:	4b31      	ldr	r3, [pc, #196]	@ (80017d8 <secuencia+0x1b0>)
 8001712:	4a48      	ldr	r2, [pc, #288]	@ (8001834 <secuencia+0x20c>)
 8001714:	601a      	str	r2, [r3, #0]
	  q=0;
 8001716:	4b32      	ldr	r3, [pc, #200]	@ (80017e0 <secuencia+0x1b8>)
 8001718:	f04f 0200 	mov.w	r2, #0
 800171c:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 800171e:	f7ff fcf7 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 8001722:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001726:	f000 fc4b 	bl	8001fc0 <HAL_Delay>

	  x=145;
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <secuencia+0x1a0>)
 800172c:	4a42      	ldr	r2, [pc, #264]	@ (8001838 <secuencia+0x210>)
 800172e:	601a      	str	r2, [r3, #0]
	  y=-15;
 8001730:	4b27      	ldr	r3, [pc, #156]	@ (80017d0 <secuencia+0x1a8>)
 8001732:	4a31      	ldr	r2, [pc, #196]	@ (80017f8 <secuencia+0x1d0>)
 8001734:	601a      	str	r2, [r3, #0]
	  z=260;
 8001736:	4b28      	ldr	r3, [pc, #160]	@ (80017d8 <secuencia+0x1b0>)
 8001738:	4a40      	ldr	r2, [pc, #256]	@ (800183c <secuencia+0x214>)
 800173a:	601a      	str	r2, [r3, #0]
	  q=0;
 800173c:	4b28      	ldr	r3, [pc, #160]	@ (80017e0 <secuencia+0x1b8>)
 800173e:	f04f 0200 	mov.w	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 8001744:	f7ff fce4 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 8001748:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800174c:	f000 fc38 	bl	8001fc0 <HAL_Delay>

	  x=192;
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <secuencia+0x1a0>)
 8001752:	4a3b      	ldr	r2, [pc, #236]	@ (8001840 <secuencia+0x218>)
 8001754:	601a      	str	r2, [r3, #0]
	  y=-15;
 8001756:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <secuencia+0x1a8>)
 8001758:	4a27      	ldr	r2, [pc, #156]	@ (80017f8 <secuencia+0x1d0>)
 800175a:	601a      	str	r2, [r3, #0]
	  z=218;
 800175c:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <secuencia+0x1b0>)
 800175e:	4a39      	ldr	r2, [pc, #228]	@ (8001844 <secuencia+0x21c>)
 8001760:	601a      	str	r2, [r3, #0]
	  q=0;
 8001762:	4b1f      	ldr	r3, [pc, #124]	@ (80017e0 <secuencia+0x1b8>)
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 800176a:	f7ff fcd1 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 800176e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001772:	f000 fc25 	bl	8001fc0 <HAL_Delay>
	  abrirgripper();
 8001776:	f7ff ff31 	bl	80015dc <abrirgripper>

	  x=90;
 800177a:	4b13      	ldr	r3, [pc, #76]	@ (80017c8 <secuencia+0x1a0>)
 800177c:	4a28      	ldr	r2, [pc, #160]	@ (8001820 <secuencia+0x1f8>)
 800177e:	601a      	str	r2, [r3, #0]
	  y=-15;
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <secuencia+0x1a8>)
 8001782:	4a1d      	ldr	r2, [pc, #116]	@ (80017f8 <secuencia+0x1d0>)
 8001784:	601a      	str	r2, [r3, #0]
	  z=218;
 8001786:	4b14      	ldr	r3, [pc, #80]	@ (80017d8 <secuencia+0x1b0>)
 8001788:	4a2e      	ldr	r2, [pc, #184]	@ (8001844 <secuencia+0x21c>)
 800178a:	601a      	str	r2, [r3, #0]
	  q=0;
 800178c:	4b14      	ldr	r3, [pc, #80]	@ (80017e0 <secuencia+0x1b8>)
 800178e:	f04f 0200 	mov.w	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 8001794:	f7ff fcbc 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 8001798:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800179c:	f000 fc10 	bl	8001fc0 <HAL_Delay>

	  x=84;
 80017a0:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <secuencia+0x1a0>)
 80017a2:	4a29      	ldr	r2, [pc, #164]	@ (8001848 <secuencia+0x220>)
 80017a4:	601a      	str	r2, [r3, #0]
	  y=92;
 80017a6:	4b0a      	ldr	r3, [pc, #40]	@ (80017d0 <secuencia+0x1a8>)
 80017a8:	4a28      	ldr	r2, [pc, #160]	@ (800184c <secuencia+0x224>)
 80017aa:	601a      	str	r2, [r3, #0]
	  z=45;
 80017ac:	4b0a      	ldr	r3, [pc, #40]	@ (80017d8 <secuencia+0x1b0>)
 80017ae:	4a28      	ldr	r2, [pc, #160]	@ (8001850 <secuencia+0x228>)
 80017b0:	601a      	str	r2, [r3, #0]
	  q=-1.79768908;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	@ (80017e0 <secuencia+0x1b8>)
 80017b4:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <secuencia+0x22c>)
 80017b6:	601a      	str	r2, [r3, #0]
	  Cinematica_Inversa();
 80017b8:	f7ff fcaa 	bl	8001110 <Cinematica_Inversa>
	  HAL_Delay(1000);
 80017bc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80017c0:	f000 fbfe 	bl	8001fc0 <HAL_Delay>


}
 80017c4:	bf00      	nop
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000000 	.word	0x20000000
 80017cc:	432f0000 	.word	0x432f0000
 80017d0:	20000004 	.word	0x20000004
 80017d4:	40a00000 	.word	0x40a00000
 80017d8:	20000008 	.word	0x20000008
 80017dc:	42820000 	.word	0x42820000
 80017e0:	2000000c 	.word	0x2000000c
 80017e4:	bf567750 	.word	0xbf567750
 80017e8:	432e0000 	.word	0x432e0000
 80017ec:	41d80000 	.word	0x41d80000
 80017f0:	421c0000 	.word	0x421c0000
 80017f4:	434b0000 	.word	0x434b0000
 80017f8:	c1700000 	.word	0xc1700000
 80017fc:	42400000 	.word	0x42400000
 8001800:	bee85696 	.word	0xbee85696
 8001804:	43490000 	.word	0x43490000
 8001808:	41f00000 	.word	0x41f00000
 800180c:	43160000 	.word	0x43160000
 8001810:	42b60000 	.word	0x42b60000
 8001814:	429a0000 	.word	0x429a0000
 8001818:	3e7a35dd 	.word	0x3e7a35dd
 800181c:	42de0000 	.word	0x42de0000
 8001820:	42b40000 	.word	0x42b40000
 8001824:	43680000 	.word	0x43680000
 8001828:	3c8efa35 	.word	0x3c8efa35
 800182c:	430d0000 	.word	0x430d0000
 8001830:	41a00000 	.word	0x41a00000
 8001834:	43780000 	.word	0x43780000
 8001838:	43110000 	.word	0x43110000
 800183c:	43820000 	.word	0x43820000
 8001840:	43400000 	.word	0x43400000
 8001844:	435a0000 	.word	0x435a0000
 8001848:	42a80000 	.word	0x42a80000
 800184c:	42b80000 	.word	0x42b80000
 8001850:	42340000 	.word	0x42340000
 8001854:	bfe61aad 	.word	0xbfe61aad

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f000 fb3e 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f82c 	bl	80018bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f000 f9c6 	bl	8001bf4 <MX_GPIO_Init>
  MX_RTC_Init();
 8001868:	f000 f892 	bl	8001990 <MX_RTC_Init>
  MX_TIM1_Init();
 800186c:	f000 f8b6 	bl	80019dc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001870:	f000 f95c 	bl	8001b2c <MX_TIM2_Init>

  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001874:	2100      	movs	r1, #0
 8001876:	480f      	ldr	r0, [pc, #60]	@ (80018b4 <main+0x5c>)
 8001878:	f001 fc98 	bl	80031ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800187c:	2104      	movs	r1, #4
 800187e:	480d      	ldr	r0, [pc, #52]	@ (80018b4 <main+0x5c>)
 8001880:	f001 fc94 	bl	80031ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001884:	2108      	movs	r1, #8
 8001886:	480b      	ldr	r0, [pc, #44]	@ (80018b4 <main+0x5c>)
 8001888:	f001 fc90 	bl	80031ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800188c:	210c      	movs	r1, #12
 800188e:	4809      	ldr	r0, [pc, #36]	@ (80018b4 <main+0x5c>)
 8001890:	f001 fc8c 	bl	80031ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001894:	2100      	movs	r1, #0
 8001896:	4808      	ldr	r0, [pc, #32]	@ (80018b8 <main+0x60>)
 8001898:	f001 fc88 	bl	80031ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800189c:	2104      	movs	r1, #4
 800189e:	4806      	ldr	r0, [pc, #24]	@ (80018b8 <main+0x60>)
 80018a0:	f001 fc84 	bl	80031ac <HAL_TIM_PWM_Start>
  /* USER CODE BEGIN 2 */
  secuencia();
 80018a4:	f7ff fec0 	bl	8001628 <secuencia>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(2000);
 80018a8:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80018ac:	f000 fb88 	bl	8001fc0 <HAL_Delay>
 80018b0:	e7fa      	b.n	80018a8 <main+0x50>
 80018b2:	bf00      	nop
 80018b4:	200000b8 	.word	0x200000b8
 80018b8:	20000100 	.word	0x20000100

080018bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b094      	sub	sp, #80	@ 0x50
 80018c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018c2:	f107 0320 	add.w	r3, r7, #32
 80018c6:	2230      	movs	r2, #48	@ 0x30
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f002 f8d8 	bl	8003a80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	4b28      	ldr	r3, [pc, #160]	@ (8001988 <SystemClock_Config+0xcc>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	4a27      	ldr	r2, [pc, #156]	@ (8001988 <SystemClock_Config+0xcc>)
 80018ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f0:	4b25      	ldr	r3, [pc, #148]	@ (8001988 <SystemClock_Config+0xcc>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	2300      	movs	r3, #0
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	4b22      	ldr	r3, [pc, #136]	@ (800198c <SystemClock_Config+0xd0>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a21      	ldr	r2, [pc, #132]	@ (800198c <SystemClock_Config+0xd0>)
 8001906:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b1f      	ldr	r3, [pc, #124]	@ (800198c <SystemClock_Config+0xd0>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001914:	607b      	str	r3, [r7, #4]
 8001916:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001918:	230a      	movs	r3, #10
 800191a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800191c:	2301      	movs	r3, #1
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001920:	2310      	movs	r3, #16
 8001922:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001924:	2301      	movs	r3, #1
 8001926:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001928:	2302      	movs	r3, #2
 800192a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800192c:	2300      	movs	r3, #0
 800192e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001930:	2308      	movs	r3, #8
 8001932:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001934:	2364      	movs	r3, #100	@ 0x64
 8001936:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001938:	2302      	movs	r3, #2
 800193a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800193c:	2304      	movs	r3, #4
 800193e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	4618      	mov	r0, r3
 8001946:	f000 fdc9 	bl	80024dc <HAL_RCC_OscConfig>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001950:	f000 f96a 	bl	8001c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001954:	230f      	movs	r3, #15
 8001956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001958:	2302      	movs	r3, #2
 800195a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800196a:	f107 030c 	add.w	r3, r7, #12
 800196e:	2103      	movs	r1, #3
 8001970:	4618      	mov	r0, r3
 8001972:	f001 f82b 	bl	80029cc <HAL_RCC_ClockConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800197c:	f000 f954 	bl	8001c28 <Error_Handler>
  }
}
 8001980:	bf00      	nop
 8001982:	3750      	adds	r7, #80	@ 0x50
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	40023800 	.word	0x40023800
 800198c:	40007000 	.word	0x40007000

08001990 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001994:	4b0f      	ldr	r3, [pc, #60]	@ (80019d4 <MX_RTC_Init+0x44>)
 8001996:	4a10      	ldr	r2, [pc, #64]	@ (80019d8 <MX_RTC_Init+0x48>)
 8001998:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <MX_RTC_Init+0x44>)
 800199c:	2200      	movs	r2, #0
 800199e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019a2:	227f      	movs	r2, #127	@ 0x7f
 80019a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019a8:	22ff      	movs	r2, #255	@ 0xff
 80019aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80019ac:	4b09      	ldr	r3, [pc, #36]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80019b2:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80019b8:	4b06      	ldr	r3, [pc, #24]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	@ (80019d4 <MX_RTC_Init+0x44>)
 80019c0:	f001 faa0 	bl	8002f04 <HAL_RTC_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80019ca:	f000 f92d 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20000098 	.word	0x20000098
 80019d8:	40002800 	.word	0x40002800

080019dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b092      	sub	sp, #72	@ 0x48
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
 80019fc:	615a      	str	r2, [r3, #20]
 80019fe:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a00:	1d3b      	adds	r3, r7, #4
 8001a02:	2220      	movs	r2, #32
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 f83a 	bl	8003a80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a0c:	4b45      	ldr	r3, [pc, #276]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a0e:	4a46      	ldr	r2, [pc, #280]	@ (8001b28 <MX_TIM1_Init+0x14c>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2000;
 8001a12:	4b44      	ldr	r3, [pc, #272]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a14:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001a18:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a1a:	4b42      	ldr	r3, [pc, #264]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001a20:	4b40      	ldr	r3, [pc, #256]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001a26:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a28:	4b3e      	ldr	r3, [pc, #248]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b3b      	ldr	r3, [pc, #236]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a3a:	483a      	ldr	r0, [pc, #232]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a3c:	f001 fb66 	bl	800310c <HAL_TIM_PWM_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001a46:	f000 f8ef 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a52:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a56:	4619      	mov	r1, r3
 8001a58:	4832      	ldr	r0, [pc, #200]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a5a:	f001 ff51 	bl	8003900 <HAL_TIMEx_MasterConfigSynchronization>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8001a64:	f000 f8e0 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a68:	2360      	movs	r3, #96	@ 0x60
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a70:	2300      	movs	r3, #0
 8001a72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a74:	2300      	movs	r3, #0
 8001a76:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a80:	2300      	movs	r3, #0
 8001a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a88:	2200      	movs	r2, #0
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	4825      	ldr	r0, [pc, #148]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001a8e:	f001 fc3d 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 8001a92:	4603      	mov	r3, r0
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001a98:	f000 f8c6 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa0:	2204      	movs	r2, #4
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	481f      	ldr	r0, [pc, #124]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001aa6:	f001 fc31 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8001ab0:	f000 f8ba 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab8:	2208      	movs	r2, #8
 8001aba:	4619      	mov	r1, r3
 8001abc:	4819      	ldr	r0, [pc, #100]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001abe:	f001 fc25 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001ac8:	f000 f8ae 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001acc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad0:	220c      	movs	r2, #12
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4813      	ldr	r0, [pc, #76]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001ad6:	f001 fc19 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001ae0:	f000 f8a2 	bl	8001c28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001af4:	2300      	movs	r3, #0
 8001af6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001afc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001afe:	2300      	movs	r3, #0
 8001b00:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	4619      	mov	r1, r3
 8001b06:	4807      	ldr	r0, [pc, #28]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001b08:	f001 ff68 	bl	80039dc <HAL_TIMEx_ConfigBreakDeadTime>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8001b12:	f000 f889 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b16:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <MX_TIM1_Init+0x148>)
 8001b18:	f000 f916 	bl	8001d48 <HAL_TIM_MspPostInit>

}
 8001b1c:	bf00      	nop
 8001b1e:	3748      	adds	r7, #72	@ 0x48
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	200000b8 	.word	0x200000b8
 8001b28:	40010000 	.word	0x40010000

08001b2c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	@ 0x28
 8001b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b32:	f107 0320 	add.w	r3, r7, #32
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3c:	1d3b      	adds	r3, r7, #4
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4e:	4b28      	ldr	r3, [pc, #160]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b54:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2000;
 8001b56:	4b26      	ldr	r3, [pc, #152]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b58:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8001b5c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5e:	4b24      	ldr	r3, [pc, #144]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001b64:	4b22      	ldr	r3, [pc, #136]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001b6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b20      	ldr	r3, [pc, #128]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b78:	481d      	ldr	r0, [pc, #116]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b7a:	f001 fac7 	bl	800310c <HAL_TIM_PWM_Init>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d001      	beq.n	8001b88 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001b84:	f000 f850 	bl	8001c28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b90:	f107 0320 	add.w	r3, r7, #32
 8001b94:	4619      	mov	r1, r3
 8001b96:	4816      	ldr	r0, [pc, #88]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001b98:	f001 feb2 	bl	8003900 <HAL_TIMEx_MasterConfigSynchronization>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001ba2:	f000 f841 	bl	8001c28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba6:	2360      	movs	r3, #96	@ 0x60
 8001ba8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb6:	1d3b      	adds	r3, r7, #4
 8001bb8:	2200      	movs	r2, #0
 8001bba:	4619      	mov	r1, r3
 8001bbc:	480c      	ldr	r0, [pc, #48]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001bbe:	f001 fba5 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001bc8:	f000 f82e 	bl	8001c28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	2204      	movs	r2, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4807      	ldr	r0, [pc, #28]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001bd4:	f001 fb9a 	bl	800330c <HAL_TIM_PWM_ConfigChannel>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001bde:	f000 f823 	bl	8001c28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001be2:	4803      	ldr	r0, [pc, #12]	@ (8001bf0 <MX_TIM2_Init+0xc4>)
 8001be4:	f000 f8b0 	bl	8001d48 <HAL_TIM_MspPostInit>

}
 8001be8:	bf00      	nop
 8001bea:	3728      	adds	r7, #40	@ 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	20000100 	.word	0x20000100

08001bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	607b      	str	r3, [r7, #4]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	@ (8001c24 <MX_GPIO_Init+0x30>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c02:	4a08      	ldr	r2, [pc, #32]	@ (8001c24 <MX_GPIO_Init+0x30>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c0a:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <MX_GPIO_Init+0x30>)
 8001c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	607b      	str	r3, [r7, #4]
 8001c14:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800

08001c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c2c:	b672      	cpsid	i
}
 8001c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c30:	bf00      	nop
 8001c32:	e7fd      	b.n	8001c30 <Error_Handler+0x8>

08001c34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	607b      	str	r3, [r7, #4]
 8001c3e:	4b10      	ldr	r3, [pc, #64]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c42:	4a0f      	ldr	r2, [pc, #60]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c52:	607b      	str	r3, [r7, #4]
 8001c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	603b      	str	r3, [r7, #0]
 8001c5a:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5e:	4a08      	ldr	r2, [pc, #32]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_MspInit+0x4c>)
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40023800 	.word	0x40023800

08001c84 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b088      	sub	sp, #32
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c8c:	f107 0308 	add.w	r3, r7, #8
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]
 8001c9c:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a0c      	ldr	r2, [pc, #48]	@ (8001cd4 <HAL_RTC_MspInit+0x50>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d111      	bne.n	8001ccc <HAL_RTC_MspInit+0x48>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ca8:	2302      	movs	r3, #2
 8001caa:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001cac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cb0:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb2:	f107 0308 	add.w	r3, r7, #8
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f001 f834 	bl	8002d24 <HAL_RCCEx_PeriphCLKConfig>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001cc2:	f7ff ffb1 	bl	8001c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001cc6:	4b04      	ldr	r3, [pc, #16]	@ (8001cd8 <HAL_RTC_MspInit+0x54>)
 8001cc8:	2201      	movs	r2, #1
 8001cca:	601a      	str	r2, [r3, #0]

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40002800 	.word	0x40002800
 8001cd8:	42470e3c 	.word	0x42470e3c

08001cdc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a15      	ldr	r2, [pc, #84]	@ (8001d40 <HAL_TIM_PWM_MspInit+0x64>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b14      	ldr	r3, [pc, #80]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x68>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a13      	ldr	r2, [pc, #76]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x68>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x68>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d0a:	e012      	b.n	8001d32 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM2)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d14:	d10d      	bne.n	8001d32 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x68>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1e:	4a09      	ldr	r2, [pc, #36]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x68>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d26:	4b07      	ldr	r3, [pc, #28]	@ (8001d44 <HAL_TIM_PWM_MspInit+0x68>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40010000 	.word	0x40010000
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a24      	ldr	r2, [pc, #144]	@ (8001df8 <HAL_TIM_MspPostInit+0xb0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d11f      	bne.n	8001daa <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b23      	ldr	r3, [pc, #140]	@ (8001dfc <HAL_TIM_MspPostInit+0xb4>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	4a22      	ldr	r2, [pc, #136]	@ (8001dfc <HAL_TIM_MspPostInit+0xb4>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d7a:	4b20      	ldr	r3, [pc, #128]	@ (8001dfc <HAL_TIM_MspPostInit+0xb4>)
 8001d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001d86:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4817      	ldr	r0, [pc, #92]	@ (8001e00 <HAL_TIM_MspPostInit+0xb8>)
 8001da4:	f000 fa16 	bl	80021d4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001da8:	e022      	b.n	8001df0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db2:	d11d      	bne.n	8001df0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db4:	2300      	movs	r3, #0
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <HAL_TIM_MspPostInit+0xb4>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <HAL_TIM_MspPostInit+0xb4>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <HAL_TIM_MspPostInit+0xb4>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de0:	2301      	movs	r3, #1
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f107 0314 	add.w	r3, r7, #20
 8001de8:	4619      	mov	r1, r3
 8001dea:	4805      	ldr	r0, [pc, #20]	@ (8001e00 <HAL_TIM_MspPostInit+0xb8>)
 8001dec:	f000 f9f2 	bl	80021d4 <HAL_GPIO_Init>
}
 8001df0:	bf00      	nop
 8001df2:	3728      	adds	r7, #40	@ 0x28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	40010000 	.word	0x40010000
 8001dfc:	40023800 	.word	0x40023800
 8001e00:	40020000 	.word	0x40020000

08001e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001e08:	bf00      	nop
 8001e0a:	e7fd      	b.n	8001e08 <NMI_Handler+0x4>

08001e0c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e10:	bf00      	nop
 8001e12:	e7fd      	b.n	8001e10 <HardFault_Handler+0x4>

08001e14 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e18:	bf00      	nop
 8001e1a:	e7fd      	b.n	8001e18 <MemManage_Handler+0x4>

08001e1c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <BusFault_Handler+0x4>

08001e24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e28:	bf00      	nop
 8001e2a:	e7fd      	b.n	8001e28 <UsageFault_Handler+0x4>

08001e2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e4c:	bf00      	nop
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e5a:	f000 f891 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e68:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <SystemInit+0x20>)
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e6e:	4a05      	ldr	r2, [pc, #20]	@ (8001e84 <SystemInit+0x20>)
 8001e70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ec0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8c:	f7ff ffea 	bl	8001e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e90:	480c      	ldr	r0, [pc, #48]	@ (8001ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e92:	490d      	ldr	r1, [pc, #52]	@ (8001ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e94:	4a0d      	ldr	r2, [pc, #52]	@ (8001ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e98:	e002      	b.n	8001ea0 <LoopCopyDataInit>

08001e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9e:	3304      	adds	r3, #4

08001ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea4:	d3f9      	bcc.n	8001e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ea8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001eac:	e001      	b.n	8001eb2 <LoopFillZerobss>

08001eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eb0:	3204      	adds	r2, #4

08001eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb4:	d3fb      	bcc.n	8001eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f001 fdf1 	bl	8003a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7ff fccd 	bl	8001858 <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001ecc:	08006648 	.word	0x08006648
  ldr r2, =_sbss
 8001ed0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ed4:	200002b8 	.word	0x200002b8

08001ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	@ (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	@ (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	@ (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	@ (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	@ (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 f931 	bl	800216c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fe90 	bl	8001c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	@ (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	@ (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 f93b 	bl	80021ba <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f5c:	f000 f911 	bl	8002182 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	@ (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000020 	.word	0x20000020
 8001f78:	20000028 	.word	0x20000028
 8001f7c:	20000024 	.word	0x20000024

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	@ (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000028 	.word	0x20000028
 8001fa4:	2000017c 	.word	0x2000017c

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	@ (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	2000017c 	.word	0x2000017c

08001fc0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fc8:	f7ff ffee 	bl	8001fa8 <HAL_GetTick>
 8001fcc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001fd8:	d005      	beq.n	8001fe6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	@ (8002004 <HAL_Delay+0x44>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fe6:	bf00      	nop
 8001fe8:	f7ff ffde 	bl	8001fa8 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	d8f7      	bhi.n	8001fe8 <HAL_Delay+0x28>
  {
  }
}
 8001ff8:	bf00      	nop
 8001ffa:	bf00      	nop
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000028 	.word	0x20000028

08002008 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800201e:	68ba      	ldr	r2, [r7, #8]
 8002020:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002024:	4013      	ands	r3, r2
 8002026:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002030:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002034:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002038:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800203a:	4a04      	ldr	r2, [pc, #16]	@ (800204c <__NVIC_SetPriorityGrouping+0x44>)
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	60d3      	str	r3, [r2, #12]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002054:	4b04      	ldr	r3, [pc, #16]	@ (8002068 <__NVIC_GetPriorityGrouping+0x18>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	0a1b      	lsrs	r3, r3, #8
 800205a:	f003 0307 	and.w	r3, r3, #7
}
 800205e:	4618      	mov	r0, r3
 8002060:	46bd      	mov	sp, r7
 8002062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002066:	4770      	bx	lr
 8002068:	e000ed00 	.word	0xe000ed00

0800206c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	4603      	mov	r3, r0
 8002074:	6039      	str	r1, [r7, #0]
 8002076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207c:	2b00      	cmp	r3, #0
 800207e:	db0a      	blt.n	8002096 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	b2da      	uxtb	r2, r3
 8002084:	490c      	ldr	r1, [pc, #48]	@ (80020b8 <__NVIC_SetPriority+0x4c>)
 8002086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800208a:	0112      	lsls	r2, r2, #4
 800208c:	b2d2      	uxtb	r2, r2
 800208e:	440b      	add	r3, r1
 8002090:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002094:	e00a      	b.n	80020ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	b2da      	uxtb	r2, r3
 800209a:	4908      	ldr	r1, [pc, #32]	@ (80020bc <__NVIC_SetPriority+0x50>)
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	3b04      	subs	r3, #4
 80020a4:	0112      	lsls	r2, r2, #4
 80020a6:	b2d2      	uxtb	r2, r2
 80020a8:	440b      	add	r3, r1
 80020aa:	761a      	strb	r2, [r3, #24]
}
 80020ac:	bf00      	nop
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b089      	sub	sp, #36	@ 0x24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	f1c3 0307 	rsb	r3, r3, #7
 80020da:	2b04      	cmp	r3, #4
 80020dc:	bf28      	it	cs
 80020de:	2304      	movcs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	3304      	adds	r3, #4
 80020e6:	2b06      	cmp	r3, #6
 80020e8:	d902      	bls.n	80020f0 <NVIC_EncodePriority+0x30>
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3b03      	subs	r3, #3
 80020ee:	e000      	b.n	80020f2 <NVIC_EncodePriority+0x32>
 80020f0:	2300      	movs	r3, #0
 80020f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	fa02 f303 	lsl.w	r3, r2, r3
 80020fe:	43da      	mvns	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	401a      	ands	r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002108:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	fa01 f303 	lsl.w	r3, r1, r3
 8002112:	43d9      	mvns	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002118:	4313      	orrs	r3, r2
         );
}
 800211a:	4618      	mov	r0, r3
 800211c:	3724      	adds	r7, #36	@ 0x24
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
	...

08002128 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002138:	d301      	bcc.n	800213e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800213a:	2301      	movs	r3, #1
 800213c:	e00f      	b.n	800215e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800213e:	4a0a      	ldr	r2, [pc, #40]	@ (8002168 <SysTick_Config+0x40>)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3b01      	subs	r3, #1
 8002144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002146:	210f      	movs	r1, #15
 8002148:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800214c:	f7ff ff8e 	bl	800206c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002150:	4b05      	ldr	r3, [pc, #20]	@ (8002168 <SysTick_Config+0x40>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002156:	4b04      	ldr	r3, [pc, #16]	@ (8002168 <SysTick_Config+0x40>)
 8002158:	2207      	movs	r2, #7
 800215a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	3708      	adds	r7, #8
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	e000e010 	.word	0xe000e010

0800216c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7ff ff47 	bl	8002008 <__NVIC_SetPriorityGrouping>
}
 800217a:	bf00      	nop
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002182:	b580      	push	{r7, lr}
 8002184:	b086      	sub	sp, #24
 8002186:	af00      	add	r7, sp, #0
 8002188:	4603      	mov	r3, r0
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002194:	f7ff ff5c 	bl	8002050 <__NVIC_GetPriorityGrouping>
 8002198:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800219a:	687a      	ldr	r2, [r7, #4]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	6978      	ldr	r0, [r7, #20]
 80021a0:	f7ff ff8e 	bl	80020c0 <NVIC_EncodePriority>
 80021a4:	4602      	mov	r2, r0
 80021a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021aa:	4611      	mov	r1, r2
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff ff5d 	bl	800206c <__NVIC_SetPriority>
}
 80021b2:	bf00      	nop
 80021b4:	3718      	adds	r7, #24
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}

080021ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ba:	b580      	push	{r7, lr}
 80021bc:	b082      	sub	sp, #8
 80021be:	af00      	add	r7, sp, #0
 80021c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f7ff ffb0 	bl	8002128 <SysTick_Config>
 80021c8:	4603      	mov	r3, r0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b089      	sub	sp, #36	@ 0x24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	e159      	b.n	80024a4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f0:	2201      	movs	r2, #1
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	4013      	ands	r3, r2
 8002202:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	429a      	cmp	r2, r3
 800220a:	f040 8148 	bne.w	800249e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f003 0303 	and.w	r3, r3, #3
 8002216:	2b01      	cmp	r3, #1
 8002218:	d005      	beq.n	8002226 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002222:	2b02      	cmp	r3, #2
 8002224:	d130      	bne.n	8002288 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	2203      	movs	r2, #3
 8002232:	fa02 f303 	lsl.w	r3, r2, r3
 8002236:	43db      	mvns	r3, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4013      	ands	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4313      	orrs	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800225c:	2201      	movs	r2, #1
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	69ba      	ldr	r2, [r7, #24]
 8002268:	4013      	ands	r3, r2
 800226a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	091b      	lsrs	r3, r3, #4
 8002272:	f003 0201 	and.w	r2, r3, #1
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	fa02 f303 	lsl.w	r3, r2, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4313      	orrs	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	2b03      	cmp	r3, #3
 8002292:	d017      	beq.n	80022c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	2203      	movs	r2, #3
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	43db      	mvns	r3, r3
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4013      	ands	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	69fb      	ldr	r3, [r7, #28]
 80022b2:	005b      	lsls	r3, r3, #1
 80022b4:	fa02 f303 	lsl.w	r3, r2, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d123      	bne.n	8002318 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	08da      	lsrs	r2, r3, #3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3208      	adds	r2, #8
 80022d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	f003 0307 	and.w	r3, r3, #7
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	220f      	movs	r2, #15
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	691a      	ldr	r2, [r3, #16]
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	f003 0307 	and.w	r3, r3, #7
 80022fe:	009b      	lsls	r3, r3, #2
 8002300:	fa02 f303 	lsl.w	r3, r2, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4313      	orrs	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	08da      	lsrs	r2, r3, #3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	3208      	adds	r2, #8
 8002312:	69b9      	ldr	r1, [r7, #24]
 8002314:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	2203      	movs	r2, #3
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43db      	mvns	r3, r3
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f003 0203 	and.w	r2, r3, #3
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	4313      	orrs	r3, r2
 8002344:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002354:	2b00      	cmp	r3, #0
 8002356:	f000 80a2 	beq.w	800249e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b57      	ldr	r3, [pc, #348]	@ (80024bc <HAL_GPIO_Init+0x2e8>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a56      	ldr	r2, [pc, #344]	@ (80024bc <HAL_GPIO_Init+0x2e8>)
 8002364:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b54      	ldr	r3, [pc, #336]	@ (80024bc <HAL_GPIO_Init+0x2e8>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002376:	4a52      	ldr	r2, [pc, #328]	@ (80024c0 <HAL_GPIO_Init+0x2ec>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002382:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	220f      	movs	r2, #15
 800238e:	fa02 f303 	lsl.w	r3, r2, r3
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	4a49      	ldr	r2, [pc, #292]	@ (80024c4 <HAL_GPIO_Init+0x2f0>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d019      	beq.n	80023d6 <HAL_GPIO_Init+0x202>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a48      	ldr	r2, [pc, #288]	@ (80024c8 <HAL_GPIO_Init+0x2f4>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d013      	beq.n	80023d2 <HAL_GPIO_Init+0x1fe>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a47      	ldr	r2, [pc, #284]	@ (80024cc <HAL_GPIO_Init+0x2f8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d00d      	beq.n	80023ce <HAL_GPIO_Init+0x1fa>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a46      	ldr	r2, [pc, #280]	@ (80024d0 <HAL_GPIO_Init+0x2fc>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d007      	beq.n	80023ca <HAL_GPIO_Init+0x1f6>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a45      	ldr	r2, [pc, #276]	@ (80024d4 <HAL_GPIO_Init+0x300>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d101      	bne.n	80023c6 <HAL_GPIO_Init+0x1f2>
 80023c2:	2304      	movs	r3, #4
 80023c4:	e008      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023c6:	2307      	movs	r3, #7
 80023c8:	e006      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ca:	2303      	movs	r3, #3
 80023cc:	e004      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023ce:	2302      	movs	r3, #2
 80023d0:	e002      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_GPIO_Init+0x204>
 80023d6:	2300      	movs	r3, #0
 80023d8:	69fa      	ldr	r2, [r7, #28]
 80023da:	f002 0203 	and.w	r2, r2, #3
 80023de:	0092      	lsls	r2, r2, #2
 80023e0:	4093      	lsls	r3, r2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e8:	4935      	ldr	r1, [pc, #212]	@ (80024c0 <HAL_GPIO_Init+0x2ec>)
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	089b      	lsrs	r3, r3, #2
 80023ee:	3302      	adds	r3, #2
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f6:	4b38      	ldr	r3, [pc, #224]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	43db      	mvns	r3, r3
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	4013      	ands	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d003      	beq.n	800241a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4313      	orrs	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800241a:	4a2f      	ldr	r2, [pc, #188]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002420:	4b2d      	ldr	r3, [pc, #180]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	43db      	mvns	r3, r3
 800242a:	69ba      	ldr	r2, [r7, #24]
 800242c:	4013      	ands	r3, r2
 800242e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d003      	beq.n	8002444 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	4313      	orrs	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002444:	4a24      	ldr	r2, [pc, #144]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002446:	69bb      	ldr	r3, [r7, #24]
 8002448:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800244a:	4b23      	ldr	r3, [pc, #140]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	43db      	mvns	r3, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4013      	ands	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002466:	69ba      	ldr	r2, [r7, #24]
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246e:	4a1a      	ldr	r2, [pc, #104]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002470:	69bb      	ldr	r3, [r7, #24]
 8002472:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002474:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	43db      	mvns	r3, r3
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	4013      	ands	r3, r2
 8002482:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d003      	beq.n	8002498 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002490:	69ba      	ldr	r2, [r7, #24]
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002498:	4a0f      	ldr	r2, [pc, #60]	@ (80024d8 <HAL_GPIO_Init+0x304>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	3301      	adds	r3, #1
 80024a2:	61fb      	str	r3, [r7, #28]
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	2b0f      	cmp	r3, #15
 80024a8:	f67f aea2 	bls.w	80021f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024ac:	bf00      	nop
 80024ae:	bf00      	nop
 80024b0:	3724      	adds	r7, #36	@ 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40023800 	.word	0x40023800
 80024c0:	40013800 	.word	0x40013800
 80024c4:	40020000 	.word	0x40020000
 80024c8:	40020400 	.word	0x40020400
 80024cc:	40020800 	.word	0x40020800
 80024d0:	40020c00 	.word	0x40020c00
 80024d4:	40021000 	.word	0x40021000
 80024d8:	40013c00 	.word	0x40013c00

080024dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e267      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d075      	beq.n	80025e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80024fa:	4b88      	ldr	r3, [pc, #544]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 030c 	and.w	r3, r3, #12
 8002502:	2b04      	cmp	r3, #4
 8002504:	d00c      	beq.n	8002520 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002506:	4b85      	ldr	r3, [pc, #532]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800250e:	2b08      	cmp	r3, #8
 8002510:	d112      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002512:	4b82      	ldr	r3, [pc, #520]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800251a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800251e:	d10b      	bne.n	8002538 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002520:	4b7e      	ldr	r3, [pc, #504]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d05b      	beq.n	80025e4 <HAL_RCC_OscConfig+0x108>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d157      	bne.n	80025e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e242      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002540:	d106      	bne.n	8002550 <HAL_RCC_OscConfig+0x74>
 8002542:	4b76      	ldr	r3, [pc, #472]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a75      	ldr	r2, [pc, #468]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	e01d      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b70      	ldr	r3, [pc, #448]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6f      	ldr	r2, [pc, #444]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002560:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b6d      	ldr	r3, [pc, #436]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6c      	ldr	r2, [pc, #432]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800256c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xb0>
 8002574:	4b69      	ldr	r3, [pc, #420]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a68      	ldr	r2, [pc, #416]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800257a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800257e:	6013      	str	r3, [r2, #0]
 8002580:	4b66      	ldr	r3, [pc, #408]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a65      	ldr	r2, [pc, #404]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800258a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d013      	beq.n	80025bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7ff fd08 	bl	8001fa8 <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259c:	f7ff fd04 	bl	8001fa8 <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b64      	cmp	r3, #100	@ 0x64
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e207      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ae:	4b5b      	ldr	r3, [pc, #364]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d0f0      	beq.n	800259c <HAL_RCC_OscConfig+0xc0>
 80025ba:	e014      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7ff fcf4 	bl	8001fa8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7ff fcf0 	bl	8001fa8 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	@ 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e1f3      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025d6:	4b51      	ldr	r3, [pc, #324]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xe8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d063      	beq.n	80026ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80025f2:	4b4a      	ldr	r3, [pc, #296]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 030c 	and.w	r3, r3, #12
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025fe:	4b47      	ldr	r3, [pc, #284]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002606:	2b08      	cmp	r3, #8
 8002608:	d11c      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800260a:	4b44      	ldr	r3, [pc, #272]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d116      	bne.n	8002644 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002616:	4b41      	ldr	r3, [pc, #260]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0302 	and.w	r3, r3, #2
 800261e:	2b00      	cmp	r3, #0
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e1c7      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b3b      	ldr	r3, [pc, #236]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4937      	ldr	r1, [pc, #220]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800263e:	4313      	orrs	r3, r2
 8002640:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002642:	e03a      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d020      	beq.n	800268e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264c:	4b34      	ldr	r3, [pc, #208]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800264e:	2201      	movs	r2, #1
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002652:	f7ff fca9 	bl	8001fa8 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265a:	f7ff fca5 	bl	8001fa8 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e1a8      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800266c:	4b2b      	ldr	r3, [pc, #172]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002678:	4b28      	ldr	r3, [pc, #160]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691b      	ldr	r3, [r3, #16]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4925      	ldr	r1, [pc, #148]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 8002688:	4313      	orrs	r3, r2
 800268a:	600b      	str	r3, [r1, #0]
 800268c:	e015      	b.n	80026ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800268e:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002690:	2200      	movs	r2, #0
 8002692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002694:	f7ff fc88 	bl	8001fa8 <HAL_GetTick>
 8002698:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800269a:	e008      	b.n	80026ae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800269c:	f7ff fc84 	bl	8001fa8 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b02      	cmp	r3, #2
 80026a8:	d901      	bls.n	80026ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e187      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ae:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d1f0      	bne.n	800269c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d036      	beq.n	8002734 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d016      	beq.n	80026fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ce:	4b15      	ldr	r3, [pc, #84]	@ (8002724 <HAL_RCC_OscConfig+0x248>)
 80026d0:	2201      	movs	r2, #1
 80026d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d4:	f7ff fc68 	bl	8001fa8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026dc:	f7ff fc64 	bl	8001fa8 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e167      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026ee:	4b0b      	ldr	r3, [pc, #44]	@ (800271c <HAL_RCC_OscConfig+0x240>)
 80026f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0f0      	beq.n	80026dc <HAL_RCC_OscConfig+0x200>
 80026fa:	e01b      	b.n	8002734 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b09      	ldr	r3, [pc, #36]	@ (8002724 <HAL_RCC_OscConfig+0x248>)
 80026fe:	2200      	movs	r2, #0
 8002700:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002702:	f7ff fc51 	bl	8001fa8 <HAL_GetTick>
 8002706:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002708:	e00e      	b.n	8002728 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800270a:	f7ff fc4d 	bl	8001fa8 <HAL_GetTick>
 800270e:	4602      	mov	r2, r0
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	1ad3      	subs	r3, r2, r3
 8002714:	2b02      	cmp	r3, #2
 8002716:	d907      	bls.n	8002728 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e150      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
 800271c:	40023800 	.word	0x40023800
 8002720:	42470000 	.word	0x42470000
 8002724:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002728:	4b88      	ldr	r3, [pc, #544]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800272a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1ea      	bne.n	800270a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 8097 	beq.w	8002870 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002742:	2300      	movs	r3, #0
 8002744:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002746:	4b81      	ldr	r3, [pc, #516]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800274a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
 8002756:	4b7d      	ldr	r3, [pc, #500]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4a7c      	ldr	r2, [pc, #496]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	@ 0x40
 8002762:	4b7a      	ldr	r3, [pc, #488]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	60bb      	str	r3, [r7, #8]
 800276c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800276e:	2301      	movs	r3, #1
 8002770:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002772:	4b77      	ldr	r3, [pc, #476]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800277a:	2b00      	cmp	r3, #0
 800277c:	d118      	bne.n	80027b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277e:	4b74      	ldr	r3, [pc, #464]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a73      	ldr	r2, [pc, #460]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 8002784:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002788:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800278a:	f7ff fc0d 	bl	8001fa8 <HAL_GetTick>
 800278e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002790:	e008      	b.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002792:	f7ff fc09 	bl	8001fa8 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	2b02      	cmp	r3, #2
 800279e:	d901      	bls.n	80027a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80027a0:	2303      	movs	r3, #3
 80027a2:	e10c      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a4:	4b6a      	ldr	r3, [pc, #424]	@ (8002950 <HAL_RCC_OscConfig+0x474>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d0f0      	beq.n	8002792 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d106      	bne.n	80027c6 <HAL_RCC_OscConfig+0x2ea>
 80027b8:	4b64      	ldr	r3, [pc, #400]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027bc:	4a63      	ldr	r2, [pc, #396]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027be:	f043 0301 	orr.w	r3, r3, #1
 80027c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027c4:	e01c      	b.n	8002800 <HAL_RCC_OscConfig+0x324>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b05      	cmp	r3, #5
 80027cc:	d10c      	bne.n	80027e8 <HAL_RCC_OscConfig+0x30c>
 80027ce:	4b5f      	ldr	r3, [pc, #380]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d2:	4a5e      	ldr	r2, [pc, #376]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80027da:	4b5c      	ldr	r3, [pc, #368]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027de:	4a5b      	ldr	r2, [pc, #364]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80027e6:	e00b      	b.n	8002800 <HAL_RCC_OscConfig+0x324>
 80027e8:	4b58      	ldr	r3, [pc, #352]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027ec:	4a57      	ldr	r2, [pc, #348]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027ee:	f023 0301 	bic.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80027f4:	4b55      	ldr	r3, [pc, #340]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f8:	4a54      	ldr	r2, [pc, #336]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80027fa:	f023 0304 	bic.w	r3, r3, #4
 80027fe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d015      	beq.n	8002834 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002808:	f7ff fbce 	bl	8001fa8 <HAL_GetTick>
 800280c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800280e:	e00a      	b.n	8002826 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002810:	f7ff fbca 	bl	8001fa8 <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	693b      	ldr	r3, [r7, #16]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281e:	4293      	cmp	r3, r2
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e0cb      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002826:	4b49      	ldr	r3, [pc, #292]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800282a:	f003 0302 	and.w	r3, r3, #2
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0ee      	beq.n	8002810 <HAL_RCC_OscConfig+0x334>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002834:	f7ff fbb8 	bl	8001fa8 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800283a:	e00a      	b.n	8002852 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283c:	f7ff fbb4 	bl	8001fa8 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	f241 3288 	movw	r2, #5000	@ 0x1388
 800284a:	4293      	cmp	r3, r2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e0b5      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002852:	4b3e      	ldr	r3, [pc, #248]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1ee      	bne.n	800283c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800285e:	7dfb      	ldrb	r3, [r7, #23]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d105      	bne.n	8002870 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002864:	4b39      	ldr	r3, [pc, #228]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002868:	4a38      	ldr	r2, [pc, #224]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800286a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800286e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	699b      	ldr	r3, [r3, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	f000 80a1 	beq.w	80029bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800287a:	4b34      	ldr	r3, [pc, #208]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	f003 030c 	and.w	r3, r3, #12
 8002882:	2b08      	cmp	r3, #8
 8002884:	d05c      	beq.n	8002940 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d141      	bne.n	8002912 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288e:	4b31      	ldr	r3, [pc, #196]	@ (8002954 <HAL_RCC_OscConfig+0x478>)
 8002890:	2200      	movs	r2, #0
 8002892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002894:	f7ff fb88 	bl	8001fa8 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7ff fb84 	bl	8001fa8 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e087      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ae:	4b27      	ldr	r3, [pc, #156]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	431a      	orrs	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028c8:	019b      	lsls	r3, r3, #6
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d0:	085b      	lsrs	r3, r3, #1
 80028d2:	3b01      	subs	r3, #1
 80028d4:	041b      	lsls	r3, r3, #16
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028dc:	061b      	lsls	r3, r3, #24
 80028de:	491b      	ldr	r1, [pc, #108]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028e4:	4b1b      	ldr	r3, [pc, #108]	@ (8002954 <HAL_RCC_OscConfig+0x478>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028ea:	f7ff fb5d 	bl	8001fa8 <HAL_GetTick>
 80028ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f0:	e008      	b.n	8002904 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f2:	f7ff fb59 	bl	8001fa8 <HAL_GetTick>
 80028f6:	4602      	mov	r2, r0
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e05c      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002904:	4b11      	ldr	r3, [pc, #68]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d0f0      	beq.n	80028f2 <HAL_RCC_OscConfig+0x416>
 8002910:	e054      	b.n	80029bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <HAL_RCC_OscConfig+0x478>)
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002918:	f7ff fb46 	bl	8001fa8 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff fb42 	bl	8001fa8 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e045      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002932:	4b06      	ldr	r3, [pc, #24]	@ (800294c <HAL_RCC_OscConfig+0x470>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d1f0      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
 800293e:	e03d      	b.n	80029bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d107      	bne.n	8002958 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e038      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
 800294c:	40023800 	.word	0x40023800
 8002950:	40007000 	.word	0x40007000
 8002954:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002958:	4b1b      	ldr	r3, [pc, #108]	@ (80029c8 <HAL_RCC_OscConfig+0x4ec>)
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d028      	beq.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002970:	429a      	cmp	r2, r3
 8002972:	d121      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800297e:	429a      	cmp	r2, r3
 8002980:	d11a      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002988:	4013      	ands	r3, r2
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800298e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800299e:	085b      	lsrs	r3, r3, #1
 80029a0:	3b01      	subs	r3, #1
 80029a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3718      	adds	r7, #24
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cc      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b68      	ldr	r3, [pc, #416]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d90c      	bls.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b65      	ldr	r3, [pc, #404]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f0:	683a      	ldr	r2, [r7, #0]
 80029f2:	b2d2      	uxtb	r2, r2
 80029f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029f6:	4b63      	ldr	r3, [pc, #396]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d001      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e0b8      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0302 	and.w	r3, r3, #2
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d020      	beq.n	8002a56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0304 	and.w	r3, r3, #4
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a20:	4b59      	ldr	r3, [pc, #356]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a58      	ldr	r2, [pc, #352]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0308 	and.w	r3, r3, #8
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d005      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a38:	4b53      	ldr	r3, [pc, #332]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	4a52      	ldr	r2, [pc, #328]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002a42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a44:	4b50      	ldr	r3, [pc, #320]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	494d      	ldr	r1, [pc, #308]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d044      	beq.n	8002aec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6a:	4b47      	ldr	r3, [pc, #284]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e07f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d003      	beq.n	8002a8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d107      	bne.n	8002a9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a8a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d109      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e06f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0302 	and.w	r3, r3, #2
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e067      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002aaa:	4b37      	ldr	r3, [pc, #220]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f023 0203 	bic.w	r2, r3, #3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	4934      	ldr	r1, [pc, #208]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002abc:	f7ff fa74 	bl	8001fa8 <HAL_GetTick>
 8002ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	e00a      	b.n	8002ada <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac4:	f7ff fa70 	bl	8001fa8 <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e04f      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ada:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f003 020c 	and.w	r2, r3, #12
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d1eb      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002aec:	4b25      	ldr	r3, [pc, #148]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d20c      	bcs.n	8002b14 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002afa:	4b22      	ldr	r3, [pc, #136]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	b2d2      	uxtb	r2, r2
 8002b00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b20      	ldr	r3, [pc, #128]	@ (8002b84 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e032      	b.n	8002b7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b20:	4b19      	ldr	r3, [pc, #100]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	689b      	ldr	r3, [r3, #8]
 8002b24:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	4916      	ldr	r1, [pc, #88]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0308 	and.w	r3, r3, #8
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d009      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3e:	4b12      	ldr	r3, [pc, #72]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	490e      	ldr	r1, [pc, #56]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b52:	f000 f821 	bl	8002b98 <HAL_RCC_GetSysClockFreq>
 8002b56:	4602      	mov	r2, r0
 8002b58:	4b0b      	ldr	r3, [pc, #44]	@ (8002b88 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	091b      	lsrs	r3, r3, #4
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	490a      	ldr	r1, [pc, #40]	@ (8002b8c <HAL_RCC_ClockConfig+0x1c0>)
 8002b64:	5ccb      	ldrb	r3, [r1, r3]
 8002b66:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6a:	4a09      	ldr	r2, [pc, #36]	@ (8002b90 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_RCC_ClockConfig+0x1c8>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7ff f9d4 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40023c00 	.word	0x40023c00
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08006398 	.word	0x08006398
 8002b90:	20000020 	.word	0x20000020
 8002b94:	20000024 	.word	0x20000024

08002b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b9c:	b090      	sub	sp, #64	@ 0x40
 8002b9e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002bb0:	4b59      	ldr	r3, [pc, #356]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f003 030c 	and.w	r3, r3, #12
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d00d      	beq.n	8002bd8 <HAL_RCC_GetSysClockFreq+0x40>
 8002bbc:	2b08      	cmp	r3, #8
 8002bbe:	f200 80a1 	bhi.w	8002d04 <HAL_RCC_GetSysClockFreq+0x16c>
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d002      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x34>
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d003      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002bca:	e09b      	b.n	8002d04 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bcc:	4b53      	ldr	r3, [pc, #332]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002bce:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bd0:	e09b      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bd2:	4b53      	ldr	r3, [pc, #332]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002bd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002bd6:	e098      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002be0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002be2:	4b4d      	ldr	r3, [pc, #308]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d028      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bee:	4b4a      	ldr	r3, [pc, #296]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	099b      	lsrs	r3, r3, #6
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	623b      	str	r3, [r7, #32]
 8002bf8:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bfa:	6a3b      	ldr	r3, [r7, #32]
 8002bfc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c00:	2100      	movs	r1, #0
 8002c02:	4b47      	ldr	r3, [pc, #284]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c04:	fb03 f201 	mul.w	r2, r3, r1
 8002c08:	2300      	movs	r3, #0
 8002c0a:	fb00 f303 	mul.w	r3, r0, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	4a43      	ldr	r2, [pc, #268]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c12:	fba0 1202 	umull	r1, r2, r0, r2
 8002c16:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c18:	460a      	mov	r2, r1
 8002c1a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c1e:	4413      	add	r3, r2
 8002c20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c24:	2200      	movs	r2, #0
 8002c26:	61bb      	str	r3, [r7, #24]
 8002c28:	61fa      	str	r2, [r7, #28]
 8002c2a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c2e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002c32:	f7fd ffb5 	bl	8000ba0 <__aeabi_uldivmod>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c3e:	e053      	b.n	8002ce8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c40:	4b35      	ldr	r3, [pc, #212]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	2200      	movs	r2, #0
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	617a      	str	r2, [r7, #20]
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002c52:	f04f 0b00 	mov.w	fp, #0
 8002c56:	4652      	mov	r2, sl
 8002c58:	465b      	mov	r3, fp
 8002c5a:	f04f 0000 	mov.w	r0, #0
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	0159      	lsls	r1, r3, #5
 8002c64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c68:	0150      	lsls	r0, r2, #5
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	460b      	mov	r3, r1
 8002c6e:	ebb2 080a 	subs.w	r8, r2, sl
 8002c72:	eb63 090b 	sbc.w	r9, r3, fp
 8002c76:	f04f 0200 	mov.w	r2, #0
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002c82:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002c86:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002c8a:	ebb2 0408 	subs.w	r4, r2, r8
 8002c8e:	eb63 0509 	sbc.w	r5, r3, r9
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	00eb      	lsls	r3, r5, #3
 8002c9c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ca0:	00e2      	lsls	r2, r4, #3
 8002ca2:	4614      	mov	r4, r2
 8002ca4:	461d      	mov	r5, r3
 8002ca6:	eb14 030a 	adds.w	r3, r4, sl
 8002caa:	603b      	str	r3, [r7, #0]
 8002cac:	eb45 030b 	adc.w	r3, r5, fp
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cbe:	4629      	mov	r1, r5
 8002cc0:	028b      	lsls	r3, r1, #10
 8002cc2:	4621      	mov	r1, r4
 8002cc4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002cc8:	4621      	mov	r1, r4
 8002cca:	028a      	lsls	r2, r1, #10
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60bb      	str	r3, [r7, #8]
 8002cd6:	60fa      	str	r2, [r7, #12]
 8002cd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002cdc:	f7fd ff60 	bl	8000ba0 <__aeabi_uldivmod>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002cf8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002cfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d02:	e002      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d04:	4b05      	ldr	r3, [pc, #20]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x184>)
 8002d06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002d08:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3740      	adds	r7, #64	@ 0x40
 8002d10:	46bd      	mov	sp, r7
 8002d12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	00f42400 	.word	0x00f42400
 8002d20:	017d7840 	.word	0x017d7840

08002d24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0301 	and.w	r3, r3, #1
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d105      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d038      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002d4c:	4b68      	ldr	r3, [pc, #416]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d52:	f7ff f929 	bl	8001fa8 <HAL_GetTick>
 8002d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002d5a:	f7ff f925 	bl	8001fa8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0bd      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d6c:	4b61      	ldr	r3, [pc, #388]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d1f0      	bne.n	8002d5a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	019b      	lsls	r3, r3, #6
 8002d82:	431a      	orrs	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	071b      	lsls	r3, r3, #28
 8002d8a:	495a      	ldr	r1, [pc, #360]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d92:	4b57      	ldr	r3, [pc, #348]	@ (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d98:	f7ff f906 	bl	8001fa8 <HAL_GetTick>
 8002d9c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d9e:	e008      	b.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002da0:	f7ff f902 	bl	8001fa8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e09a      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002db2:	4b50      	ldr	r3, [pc, #320]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	f000 8083 	beq.w	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	4b48      	ldr	r3, [pc, #288]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dd4:	4a47      	ldr	r2, [pc, #284]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ddc:	4b45      	ldr	r3, [pc, #276]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002de8:	4b43      	ldr	r3, [pc, #268]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a42      	ldr	r2, [pc, #264]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002df2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002df4:	f7ff f8d8 	bl	8001fa8 <HAL_GetTick>
 8002df8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002dfa:	e008      	b.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfc:	f7ff f8d4 	bl	8001fa8 <HAL_GetTick>
 8002e00:	4602      	mov	r2, r0
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	d901      	bls.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8002e0a:	2303      	movs	r3, #3
 8002e0c:	e06c      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002e0e:	4b3a      	ldr	r3, [pc, #232]	@ (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0f0      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e1a:	4b36      	ldr	r3, [pc, #216]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e22:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d02f      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x166>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e32:	693a      	ldr	r2, [r7, #16]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d028      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e38:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e40:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e42:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e48:	4b2c      	ldr	r3, [pc, #176]	@ (8002efc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e4e:	4a29      	ldr	r2, [pc, #164]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e54:	4b27      	ldr	r3, [pc, #156]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d114      	bne.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e60:	f7ff f8a2 	bl	8001fa8 <HAL_GetTick>
 8002e64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e66:	e00a      	b.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e68:	f7ff f89e 	bl	8001fa8 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d901      	bls.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e034      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d0ee      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e96:	d10d      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8002e98:	4b16      	ldr	r3, [pc, #88]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8002ea8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eac:	4911      	ldr	r1, [pc, #68]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	608b      	str	r3, [r1, #8]
 8002eb2:	e005      	b.n	8002ec0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	4a0e      	ldr	r2, [pc, #56]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eba:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002ebe:	6093      	str	r3, [r2, #8]
 8002ec0:	4b0c      	ldr	r3, [pc, #48]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ecc:	4909      	ldr	r1, [pc, #36]	@ (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	7d1a      	ldrb	r2, [r3, #20]
 8002ee2:	4b07      	ldr	r3, [pc, #28]	@ (8002f00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002ee4:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3718      	adds	r7, #24
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	42470068 	.word	0x42470068
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40007000 	.word	0x40007000
 8002efc:	42470e40 	.word	0x42470e40
 8002f00:	424711e0 	.word	0x424711e0

08002f04 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b084      	sub	sp, #16
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e073      	b.n	8002ffe <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	7f5b      	ldrb	r3, [r3, #29]
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f7fe feac 	bl	8001c84 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2202      	movs	r2, #2
 8002f30:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d055      	beq.n	8002fec <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	22ca      	movs	r2, #202	@ 0xca
 8002f46:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2253      	movs	r2, #83	@ 0x53
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 f87f 	bl	8003054 <RTC_EnterInitMode>
 8002f56:	4603      	mov	r3, r0
 8002f58:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002f5a:	7bfb      	ldrb	r3, [r7, #15]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d12c      	bne.n	8002fba <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002f6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f72:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6899      	ldr	r1, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	695b      	ldr	r3, [r3, #20]
 8002f88:	431a      	orrs	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6919      	ldr	r1, [r3, #16]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	041a      	lsls	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f000 f886 	bl	80030c2 <RTC_ExitInitMode>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002fba:	7bfb      	ldrb	r3, [r7, #15]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d110      	bne.n	8002fe2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fce:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	22ff      	movs	r2, #255	@ 0xff
 8002fe8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002fea:	e001      	b.n	8002ff0 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002fec:	2300      	movs	r3, #0
 8002fee:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8002ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0d      	ldr	r2, [pc, #52]	@ (8003050 <HAL_RTC_WaitForSynchro+0x48>)
 800301a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800301c:	f7fe ffc4 	bl	8001fa8 <HAL_GetTick>
 8003020:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003022:	e009      	b.n	8003038 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003024:	f7fe ffc0 	bl	8001fa8 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003032:	d901      	bls.n	8003038 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e007      	b.n	8003048 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0320 	and.w	r3, r3, #32
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	00013f5f 	.word	0x00013f5f

08003054 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800306e:	2b00      	cmp	r3, #0
 8003070:	d122      	bne.n	80030b8 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68da      	ldr	r2, [r3, #12]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003080:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003082:	f7fe ff91 	bl	8001fa8 <HAL_GetTick>
 8003086:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003088:	e00c      	b.n	80030a4 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800308a:	f7fe ff8d 	bl	8001fa8 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003098:	d904      	bls.n	80030a4 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2204      	movs	r2, #4
 800309e:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <RTC_EnterInitMode+0x64>
 80030b2:	7bfb      	ldrb	r3, [r7, #15]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d1e8      	bne.n	800308a <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}

080030c2 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80030c2:	b580      	push	{r7, lr}
 80030c4:	b084      	sub	sp, #16
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030ca:	2300      	movs	r3, #0
 80030cc:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030dc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d10a      	bne.n	8003102 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff8b 	bl	8003008 <HAL_RTC_WaitForSynchro>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d004      	beq.n	8003102 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2204      	movs	r2, #4
 80030fc:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003102:	7bfb      	ldrb	r3, [r7, #15]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e041      	b.n	80031a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fe fdd2 	bl	8001cdc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f000 f9a0 	bl	8003490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
 80031b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d109      	bne.n	80031d0 <HAL_TIM_PWM_Start+0x24>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	bf14      	ite	ne
 80031c8:	2301      	movne	r3, #1
 80031ca:	2300      	moveq	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	e022      	b.n	8003216 <HAL_TIM_PWM_Start+0x6a>
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d109      	bne.n	80031ea <HAL_TIM_PWM_Start+0x3e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b01      	cmp	r3, #1
 80031e0:	bf14      	ite	ne
 80031e2:	2301      	movne	r3, #1
 80031e4:	2300      	moveq	r3, #0
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	e015      	b.n	8003216 <HAL_TIM_PWM_Start+0x6a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b08      	cmp	r3, #8
 80031ee:	d109      	bne.n	8003204 <HAL_TIM_PWM_Start+0x58>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	bf14      	ite	ne
 80031fc:	2301      	movne	r3, #1
 80031fe:	2300      	moveq	r3, #0
 8003200:	b2db      	uxtb	r3, r3
 8003202:	e008      	b.n	8003216 <HAL_TIM_PWM_Start+0x6a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	bf14      	ite	ne
 8003210:	2301      	movne	r3, #1
 8003212:	2300      	moveq	r3, #0
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e068      	b.n	80032f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d104      	bne.n	800322e <HAL_TIM_PWM_Start+0x82>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2202      	movs	r2, #2
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800322c:	e013      	b.n	8003256 <HAL_TIM_PWM_Start+0xaa>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b04      	cmp	r3, #4
 8003232:	d104      	bne.n	800323e <HAL_TIM_PWM_Start+0x92>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800323c:	e00b      	b.n	8003256 <HAL_TIM_PWM_Start+0xaa>
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b08      	cmp	r3, #8
 8003242:	d104      	bne.n	800324e <HAL_TIM_PWM_Start+0xa2>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2202      	movs	r2, #2
 8003248:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800324c:	e003      	b.n	8003256 <HAL_TIM_PWM_Start+0xaa>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2202      	movs	r2, #2
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2201      	movs	r2, #1
 800325c:	6839      	ldr	r1, [r7, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f000 fb28 	bl	80038b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a23      	ldr	r2, [pc, #140]	@ (80032f8 <HAL_TIM_PWM_Start+0x14c>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d107      	bne.n	800327e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800327c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a1d      	ldr	r2, [pc, #116]	@ (80032f8 <HAL_TIM_PWM_Start+0x14c>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d018      	beq.n	80032ba <HAL_TIM_PWM_Start+0x10e>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003290:	d013      	beq.n	80032ba <HAL_TIM_PWM_Start+0x10e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a19      	ldr	r2, [pc, #100]	@ (80032fc <HAL_TIM_PWM_Start+0x150>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d00e      	beq.n	80032ba <HAL_TIM_PWM_Start+0x10e>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a17      	ldr	r2, [pc, #92]	@ (8003300 <HAL_TIM_PWM_Start+0x154>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d009      	beq.n	80032ba <HAL_TIM_PWM_Start+0x10e>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a16      	ldr	r2, [pc, #88]	@ (8003304 <HAL_TIM_PWM_Start+0x158>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d004      	beq.n	80032ba <HAL_TIM_PWM_Start+0x10e>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a14      	ldr	r2, [pc, #80]	@ (8003308 <HAL_TIM_PWM_Start+0x15c>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d111      	bne.n	80032de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 0307 	and.w	r3, r3, #7
 80032c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d010      	beq.n	80032ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0201 	orr.w	r2, r2, #1
 80032da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032dc:	e007      	b.n	80032ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f042 0201 	orr.w	r2, r2, #1
 80032ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40010000 	.word	0x40010000
 80032fc:	40000400 	.word	0x40000400
 8003300:	40000800 	.word	0x40000800
 8003304:	40000c00 	.word	0x40000c00
 8003308:	40014000 	.word	0x40014000

0800330c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003326:	2302      	movs	r3, #2
 8003328:	e0ae      	b.n	8003488 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2b0c      	cmp	r3, #12
 8003336:	f200 809f 	bhi.w	8003478 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800333a:	a201      	add	r2, pc, #4	@ (adr r2, 8003340 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003340:	08003375 	.word	0x08003375
 8003344:	08003479 	.word	0x08003479
 8003348:	08003479 	.word	0x08003479
 800334c:	08003479 	.word	0x08003479
 8003350:	080033b5 	.word	0x080033b5
 8003354:	08003479 	.word	0x08003479
 8003358:	08003479 	.word	0x08003479
 800335c:	08003479 	.word	0x08003479
 8003360:	080033f7 	.word	0x080033f7
 8003364:	08003479 	.word	0x08003479
 8003368:	08003479 	.word	0x08003479
 800336c:	08003479 	.word	0x08003479
 8003370:	08003437 	.word	0x08003437
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f90e 	bl	800359c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 0208 	orr.w	r2, r2, #8
 800338e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	699a      	ldr	r2, [r3, #24]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0204 	bic.w	r2, r2, #4
 800339e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6999      	ldr	r1, [r3, #24]
 80033a6:	68bb      	ldr	r3, [r7, #8]
 80033a8:	691a      	ldr	r2, [r3, #16]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	619a      	str	r2, [r3, #24]
      break;
 80033b2:	e064      	b.n	800347e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68b9      	ldr	r1, [r7, #8]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f954 	bl	8003668 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699a      	ldr	r2, [r3, #24]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6999      	ldr	r1, [r3, #24]
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	691b      	ldr	r3, [r3, #16]
 80033ea:	021a      	lsls	r2, r3, #8
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	619a      	str	r2, [r3, #24]
      break;
 80033f4:	e043      	b.n	800347e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f000 f99f 	bl	8003740 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69da      	ldr	r2, [r3, #28]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0208 	orr.w	r2, r2, #8
 8003410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	69da      	ldr	r2, [r3, #28]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 0204 	bic.w	r2, r2, #4
 8003420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	69d9      	ldr	r1, [r3, #28]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	61da      	str	r2, [r3, #28]
      break;
 8003434:	e023      	b.n	800347e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68b9      	ldr	r1, [r7, #8]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f9e9 	bl	8003814 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69da      	ldr	r2, [r3, #28]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	69da      	ldr	r2, [r3, #28]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	69d9      	ldr	r1, [r3, #28]
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	691b      	ldr	r3, [r3, #16]
 800346c:	021a      	lsls	r2, r3, #8
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	61da      	str	r2, [r3, #28]
      break;
 8003476:	e002      	b.n	800347e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003478:	2301      	movs	r3, #1
 800347a:	75fb      	strb	r3, [r7, #23]
      break;
 800347c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003486:	7dfb      	ldrb	r3, [r7, #23]
}
 8003488:	4618      	mov	r0, r3
 800348a:	3718      	adds	r7, #24
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003490:	b480      	push	{r7}
 8003492:	b085      	sub	sp, #20
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a37      	ldr	r2, [pc, #220]	@ (8003580 <TIM_Base_SetConfig+0xf0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00f      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ae:	d00b      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a34      	ldr	r2, [pc, #208]	@ (8003584 <TIM_Base_SetConfig+0xf4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d007      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a33      	ldr	r2, [pc, #204]	@ (8003588 <TIM_Base_SetConfig+0xf8>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d003      	beq.n	80034c8 <TIM_Base_SetConfig+0x38>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a32      	ldr	r2, [pc, #200]	@ (800358c <TIM_Base_SetConfig+0xfc>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d108      	bne.n	80034da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a28      	ldr	r2, [pc, #160]	@ (8003580 <TIM_Base_SetConfig+0xf0>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01b      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034e8:	d017      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a25      	ldr	r2, [pc, #148]	@ (8003584 <TIM_Base_SetConfig+0xf4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d013      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a24      	ldr	r2, [pc, #144]	@ (8003588 <TIM_Base_SetConfig+0xf8>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d00f      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a23      	ldr	r2, [pc, #140]	@ (800358c <TIM_Base_SetConfig+0xfc>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d00b      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a22      	ldr	r2, [pc, #136]	@ (8003590 <TIM_Base_SetConfig+0x100>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d007      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a21      	ldr	r2, [pc, #132]	@ (8003594 <TIM_Base_SetConfig+0x104>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d003      	beq.n	800351a <TIM_Base_SetConfig+0x8a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a20      	ldr	r2, [pc, #128]	@ (8003598 <TIM_Base_SetConfig+0x108>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d108      	bne.n	800352c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	68fa      	ldr	r2, [r7, #12]
 8003528:	4313      	orrs	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	695b      	ldr	r3, [r3, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a0c      	ldr	r2, [pc, #48]	@ (8003580 <TIM_Base_SetConfig+0xf0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d103      	bne.n	800355a <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	691a      	ldr	r2, [r3, #16]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2201      	movs	r2, #1
 800356a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	601a      	str	r2, [r3, #0]
}
 8003572:	bf00      	nop
 8003574:	3714      	adds	r7, #20
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	40010000 	.word	0x40010000
 8003584:	40000400 	.word	0x40000400
 8003588:	40000800 	.word	0x40000800
 800358c:	40000c00 	.word	0x40000c00
 8003590:	40014000 	.word	0x40014000
 8003594:	40014400 	.word	0x40014400
 8003598:	40014800 	.word	0x40014800

0800359c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800359c:	b480      	push	{r7}
 800359e:	b087      	sub	sp, #28
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
 80035a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f023 0201 	bic.w	r2, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f023 0303 	bic.w	r3, r3, #3
 80035d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	4313      	orrs	r3, r2
 80035dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0302 	bic.w	r3, r3, #2
 80035e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	697a      	ldr	r2, [r7, #20]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	4a1c      	ldr	r2, [pc, #112]	@ (8003664 <TIM_OC1_SetConfig+0xc8>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d10c      	bne.n	8003612 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0308 	bic.w	r3, r3, #8
 80035fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	68db      	ldr	r3, [r3, #12]
 8003604:	697a      	ldr	r2, [r7, #20]
 8003606:	4313      	orrs	r3, r2
 8003608:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	f023 0304 	bic.w	r3, r3, #4
 8003610:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a13      	ldr	r2, [pc, #76]	@ (8003664 <TIM_OC1_SetConfig+0xc8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d111      	bne.n	800363e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	693a      	ldr	r2, [r7, #16]
 8003630:	4313      	orrs	r3, r2
 8003632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	699b      	ldr	r3, [r3, #24]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	4313      	orrs	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	693a      	ldr	r2, [r7, #16]
 8003642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685a      	ldr	r2, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	621a      	str	r2, [r3, #32]
}
 8003658:	bf00      	nop
 800365a:	371c      	adds	r7, #28
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	40010000 	.word	0x40010000

08003668 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
 8003676:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	f023 0210 	bic.w	r2, r3, #16
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	f023 0320 	bic.w	r3, r3, #32
 80036b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4313      	orrs	r3, r2
 80036be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a1e      	ldr	r2, [pc, #120]	@ (800373c <TIM_OC2_SetConfig+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d10d      	bne.n	80036e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	@ (800373c <TIM_OC2_SetConfig+0xd4>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d113      	bne.n	8003714 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80036fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	693a      	ldr	r2, [r7, #16]
 8003718:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	68fa      	ldr	r2, [r7, #12]
 800371e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	621a      	str	r2, [r3, #32]
}
 800372e:	bf00      	nop
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40010000 	.word	0x40010000

08003740 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003740:	b480      	push	{r7}
 8003742:	b087      	sub	sp, #28
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a1b      	ldr	r3, [r3, #32]
 800374e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800376e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f023 0303 	bic.w	r3, r3, #3
 8003776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68fa      	ldr	r2, [r7, #12]
 800377e:	4313      	orrs	r3, r2
 8003780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003788:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a1d      	ldr	r2, [pc, #116]	@ (8003810 <TIM_OC3_SetConfig+0xd0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d10d      	bne.n	80037ba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	021b      	lsls	r3, r3, #8
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a14      	ldr	r2, [pc, #80]	@ (8003810 <TIM_OC3_SetConfig+0xd0>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40010000 	.word	0x40010000

08003814 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003814:	b480      	push	{r7}
 8003816:	b087      	sub	sp, #28
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003842:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800384a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	021b      	lsls	r3, r3, #8
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	4313      	orrs	r3, r2
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800385e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	031b      	lsls	r3, r3, #12
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	4313      	orrs	r3, r2
 800386a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a10      	ldr	r2, [pc, #64]	@ (80038b0 <TIM_OC4_SetConfig+0x9c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d109      	bne.n	8003888 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800387a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	621a      	str	r2, [r3, #32]
}
 80038a2:	bf00      	nop
 80038a4:	371c      	adds	r7, #28
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	40010000 	.word	0x40010000

080038b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 031f 	and.w	r3, r3, #31
 80038c6:	2201      	movs	r2, #1
 80038c8:	fa02 f303 	lsl.w	r3, r2, r3
 80038cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	43db      	mvns	r3, r3
 80038d6:	401a      	ands	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f003 031f 	and.w	r3, r3, #31
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	621a      	str	r2, [r3, #32]
}
 80038f2:	bf00      	nop
 80038f4:	371c      	adds	r7, #28
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003914:	2302      	movs	r3, #2
 8003916:	e050      	b.n	80039ba <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2202      	movs	r2, #2
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800393e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	68fa      	ldr	r2, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a1c      	ldr	r2, [pc, #112]	@ (80039c8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d018      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003964:	d013      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a18      	ldr	r2, [pc, #96]	@ (80039cc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d00e      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a16      	ldr	r2, [pc, #88]	@ (80039d0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d009      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a15      	ldr	r2, [pc, #84]	@ (80039d4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d004      	beq.n	800398e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a13      	ldr	r2, [pc, #76]	@ (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d10c      	bne.n	80039a8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003994:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	68ba      	ldr	r2, [r7, #8]
 800399c:	4313      	orrs	r3, r2
 800399e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2200      	movs	r2, #0
 80039b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40010000 	.word	0x40010000
 80039cc:	40000400 	.word	0x40000400
 80039d0:	40000800 	.word	0x40000800
 80039d4:	40000c00 	.word	0x40000c00
 80039d8:	40014000 	.word	0x40014000

080039dc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80039dc:	b480      	push	{r7}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80039e6:	2300      	movs	r3, #0
 80039e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e03d      	b.n	8003a74 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	695b      	ldr	r3, [r3, #20]
 8003a50:	4313      	orrs	r3, r2
 8003a52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3714      	adds	r7, #20
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <memset>:
 8003a80:	4402      	add	r2, r0
 8003a82:	4603      	mov	r3, r0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d100      	bne.n	8003a8a <memset+0xa>
 8003a88:	4770      	bx	lr
 8003a8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a8e:	e7f9      	b.n	8003a84 <memset+0x4>

08003a90 <__errno>:
 8003a90:	4b01      	ldr	r3, [pc, #4]	@ (8003a98 <__errno+0x8>)
 8003a92:	6818      	ldr	r0, [r3, #0]
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	2000002c 	.word	0x2000002c

08003a9c <__libc_init_array>:
 8003a9c:	b570      	push	{r4, r5, r6, lr}
 8003a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8003ad4 <__libc_init_array+0x38>)
 8003aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8003ad8 <__libc_init_array+0x3c>)
 8003aa2:	1b64      	subs	r4, r4, r5
 8003aa4:	10a4      	asrs	r4, r4, #2
 8003aa6:	2600      	movs	r6, #0
 8003aa8:	42a6      	cmp	r6, r4
 8003aaa:	d109      	bne.n	8003ac0 <__libc_init_array+0x24>
 8003aac:	4d0b      	ldr	r5, [pc, #44]	@ (8003adc <__libc_init_array+0x40>)
 8003aae:	4c0c      	ldr	r4, [pc, #48]	@ (8003ae0 <__libc_init_array+0x44>)
 8003ab0:	f002 fc66 	bl	8006380 <_init>
 8003ab4:	1b64      	subs	r4, r4, r5
 8003ab6:	10a4      	asrs	r4, r4, #2
 8003ab8:	2600      	movs	r6, #0
 8003aba:	42a6      	cmp	r6, r4
 8003abc:	d105      	bne.n	8003aca <__libc_init_array+0x2e>
 8003abe:	bd70      	pop	{r4, r5, r6, pc}
 8003ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ac4:	4798      	blx	r3
 8003ac6:	3601      	adds	r6, #1
 8003ac8:	e7ee      	b.n	8003aa8 <__libc_init_array+0xc>
 8003aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ace:	4798      	blx	r3
 8003ad0:	3601      	adds	r6, #1
 8003ad2:	e7f2      	b.n	8003aba <__libc_init_array+0x1e>
 8003ad4:	08006640 	.word	0x08006640
 8003ad8:	08006640 	.word	0x08006640
 8003adc:	08006640 	.word	0x08006640
 8003ae0:	08006644 	.word	0x08006644

08003ae4 <acos>:
 8003ae4:	b538      	push	{r3, r4, r5, lr}
 8003ae6:	ed2d 8b02 	vpush	{d8}
 8003aea:	ec55 4b10 	vmov	r4, r5, d0
 8003aee:	f000 fae7 	bl	80040c0 <__ieee754_acos>
 8003af2:	4622      	mov	r2, r4
 8003af4:	462b      	mov	r3, r5
 8003af6:	4620      	mov	r0, r4
 8003af8:	4629      	mov	r1, r5
 8003afa:	eeb0 8a40 	vmov.f32	s16, s0
 8003afe:	eef0 8a60 	vmov.f32	s17, s1
 8003b02:	f7fc ffbf 	bl	8000a84 <__aeabi_dcmpun>
 8003b06:	b9a8      	cbnz	r0, 8003b34 <acos+0x50>
 8003b08:	ec45 4b10 	vmov	d0, r4, r5
 8003b0c:	f000 f8e4 	bl	8003cd8 <fabs>
 8003b10:	4b0c      	ldr	r3, [pc, #48]	@ (8003b44 <acos+0x60>)
 8003b12:	ec51 0b10 	vmov	r0, r1, d0
 8003b16:	2200      	movs	r2, #0
 8003b18:	f7fc ffaa 	bl	8000a70 <__aeabi_dcmpgt>
 8003b1c:	b150      	cbz	r0, 8003b34 <acos+0x50>
 8003b1e:	f7ff ffb7 	bl	8003a90 <__errno>
 8003b22:	ecbd 8b02 	vpop	{d8}
 8003b26:	2321      	movs	r3, #33	@ 0x21
 8003b28:	6003      	str	r3, [r0, #0]
 8003b2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b2e:	4806      	ldr	r0, [pc, #24]	@ (8003b48 <acos+0x64>)
 8003b30:	f000 b93a 	b.w	8003da8 <nan>
 8003b34:	eeb0 0a48 	vmov.f32	s0, s16
 8003b38:	eef0 0a68 	vmov.f32	s1, s17
 8003b3c:	ecbd 8b02 	vpop	{d8}
 8003b40:	bd38      	pop	{r3, r4, r5, pc}
 8003b42:	bf00      	nop
 8003b44:	3ff00000 	.word	0x3ff00000
 8003b48:	080063a8 	.word	0x080063a8

08003b4c <atan2>:
 8003b4c:	f000 bd14 	b.w	8004578 <__ieee754_atan2>

08003b50 <pow>:
 8003b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b52:	ed2d 8b02 	vpush	{d8}
 8003b56:	eeb0 8a40 	vmov.f32	s16, s0
 8003b5a:	eef0 8a60 	vmov.f32	s17, s1
 8003b5e:	ec55 4b11 	vmov	r4, r5, d1
 8003b62:	f000 fdd1 	bl	8004708 <__ieee754_pow>
 8003b66:	4622      	mov	r2, r4
 8003b68:	462b      	mov	r3, r5
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	ec57 6b10 	vmov	r6, r7, d0
 8003b72:	f7fc ff87 	bl	8000a84 <__aeabi_dcmpun>
 8003b76:	2800      	cmp	r0, #0
 8003b78:	d13b      	bne.n	8003bf2 <pow+0xa2>
 8003b7a:	ec51 0b18 	vmov	r0, r1, d8
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2300      	movs	r3, #0
 8003b82:	f7fc ff4d 	bl	8000a20 <__aeabi_dcmpeq>
 8003b86:	b1b8      	cbz	r0, 8003bb8 <pow+0x68>
 8003b88:	2200      	movs	r2, #0
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	4620      	mov	r0, r4
 8003b8e:	4629      	mov	r1, r5
 8003b90:	f7fc ff46 	bl	8000a20 <__aeabi_dcmpeq>
 8003b94:	2800      	cmp	r0, #0
 8003b96:	d146      	bne.n	8003c26 <pow+0xd6>
 8003b98:	ec45 4b10 	vmov	d0, r4, r5
 8003b9c:	f000 f8f8 	bl	8003d90 <finite>
 8003ba0:	b338      	cbz	r0, 8003bf2 <pow+0xa2>
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	4629      	mov	r1, r5
 8003baa:	f7fc ff43 	bl	8000a34 <__aeabi_dcmplt>
 8003bae:	b300      	cbz	r0, 8003bf2 <pow+0xa2>
 8003bb0:	f7ff ff6e 	bl	8003a90 <__errno>
 8003bb4:	2322      	movs	r3, #34	@ 0x22
 8003bb6:	e01b      	b.n	8003bf0 <pow+0xa0>
 8003bb8:	ec47 6b10 	vmov	d0, r6, r7
 8003bbc:	f000 f8e8 	bl	8003d90 <finite>
 8003bc0:	b9e0      	cbnz	r0, 8003bfc <pow+0xac>
 8003bc2:	eeb0 0a48 	vmov.f32	s0, s16
 8003bc6:	eef0 0a68 	vmov.f32	s1, s17
 8003bca:	f000 f8e1 	bl	8003d90 <finite>
 8003bce:	b1a8      	cbz	r0, 8003bfc <pow+0xac>
 8003bd0:	ec45 4b10 	vmov	d0, r4, r5
 8003bd4:	f000 f8dc 	bl	8003d90 <finite>
 8003bd8:	b180      	cbz	r0, 8003bfc <pow+0xac>
 8003bda:	4632      	mov	r2, r6
 8003bdc:	463b      	mov	r3, r7
 8003bde:	4630      	mov	r0, r6
 8003be0:	4639      	mov	r1, r7
 8003be2:	f7fc ff4f 	bl	8000a84 <__aeabi_dcmpun>
 8003be6:	2800      	cmp	r0, #0
 8003be8:	d0e2      	beq.n	8003bb0 <pow+0x60>
 8003bea:	f7ff ff51 	bl	8003a90 <__errno>
 8003bee:	2321      	movs	r3, #33	@ 0x21
 8003bf0:	6003      	str	r3, [r0, #0]
 8003bf2:	ecbd 8b02 	vpop	{d8}
 8003bf6:	ec47 6b10 	vmov	d0, r6, r7
 8003bfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	2300      	movs	r3, #0
 8003c00:	4630      	mov	r0, r6
 8003c02:	4639      	mov	r1, r7
 8003c04:	f7fc ff0c 	bl	8000a20 <__aeabi_dcmpeq>
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d0f2      	beq.n	8003bf2 <pow+0xa2>
 8003c0c:	eeb0 0a48 	vmov.f32	s0, s16
 8003c10:	eef0 0a68 	vmov.f32	s1, s17
 8003c14:	f000 f8bc 	bl	8003d90 <finite>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	d0ea      	beq.n	8003bf2 <pow+0xa2>
 8003c1c:	ec45 4b10 	vmov	d0, r4, r5
 8003c20:	f000 f8b6 	bl	8003d90 <finite>
 8003c24:	e7c3      	b.n	8003bae <pow+0x5e>
 8003c26:	4f01      	ldr	r7, [pc, #4]	@ (8003c2c <pow+0xdc>)
 8003c28:	2600      	movs	r6, #0
 8003c2a:	e7e2      	b.n	8003bf2 <pow+0xa2>
 8003c2c:	3ff00000 	.word	0x3ff00000

08003c30 <cos>:
 8003c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c32:	ec53 2b10 	vmov	r2, r3, d0
 8003c36:	4826      	ldr	r0, [pc, #152]	@ (8003cd0 <cos+0xa0>)
 8003c38:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003c3c:	4281      	cmp	r1, r0
 8003c3e:	d806      	bhi.n	8003c4e <cos+0x1e>
 8003c40:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003cc8 <cos+0x98>
 8003c44:	b005      	add	sp, #20
 8003c46:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c4a:	f000 b8b5 	b.w	8003db8 <__kernel_cos>
 8003c4e:	4821      	ldr	r0, [pc, #132]	@ (8003cd4 <cos+0xa4>)
 8003c50:	4281      	cmp	r1, r0
 8003c52:	d908      	bls.n	8003c66 <cos+0x36>
 8003c54:	4610      	mov	r0, r2
 8003c56:	4619      	mov	r1, r3
 8003c58:	f7fc fac2 	bl	80001e0 <__aeabi_dsub>
 8003c5c:	ec41 0b10 	vmov	d0, r0, r1
 8003c60:	b005      	add	sp, #20
 8003c62:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c66:	4668      	mov	r0, sp
 8003c68:	f001 fa9a 	bl	80051a0 <__ieee754_rem_pio2>
 8003c6c:	f000 0003 	and.w	r0, r0, #3
 8003c70:	2801      	cmp	r0, #1
 8003c72:	d00b      	beq.n	8003c8c <cos+0x5c>
 8003c74:	2802      	cmp	r0, #2
 8003c76:	d015      	beq.n	8003ca4 <cos+0x74>
 8003c78:	b9d8      	cbnz	r0, 8003cb2 <cos+0x82>
 8003c7a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c7e:	ed9d 0b00 	vldr	d0, [sp]
 8003c82:	f000 f899 	bl	8003db8 <__kernel_cos>
 8003c86:	ec51 0b10 	vmov	r0, r1, d0
 8003c8a:	e7e7      	b.n	8003c5c <cos+0x2c>
 8003c8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c90:	ed9d 0b00 	vldr	d0, [sp]
 8003c94:	f000 f958 	bl	8003f48 <__kernel_sin>
 8003c98:	ec53 2b10 	vmov	r2, r3, d0
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003ca2:	e7db      	b.n	8003c5c <cos+0x2c>
 8003ca4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ca8:	ed9d 0b00 	vldr	d0, [sp]
 8003cac:	f000 f884 	bl	8003db8 <__kernel_cos>
 8003cb0:	e7f2      	b.n	8003c98 <cos+0x68>
 8003cb2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003cb6:	ed9d 0b00 	vldr	d0, [sp]
 8003cba:	2001      	movs	r0, #1
 8003cbc:	f000 f944 	bl	8003f48 <__kernel_sin>
 8003cc0:	e7e1      	b.n	8003c86 <cos+0x56>
 8003cc2:	bf00      	nop
 8003cc4:	f3af 8000 	nop.w
	...
 8003cd0:	3fe921fb 	.word	0x3fe921fb
 8003cd4:	7fefffff 	.word	0x7fefffff

08003cd8 <fabs>:
 8003cd8:	ec51 0b10 	vmov	r0, r1, d0
 8003cdc:	4602      	mov	r2, r0
 8003cde:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003ce2:	ec43 2b10 	vmov	d0, r2, r3
 8003ce6:	4770      	bx	lr

08003ce8 <sin>:
 8003ce8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003cea:	ec53 2b10 	vmov	r2, r3, d0
 8003cee:	4826      	ldr	r0, [pc, #152]	@ (8003d88 <sin+0xa0>)
 8003cf0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003cf4:	4281      	cmp	r1, r0
 8003cf6:	d807      	bhi.n	8003d08 <sin+0x20>
 8003cf8:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 8003d80 <sin+0x98>
 8003cfc:	2000      	movs	r0, #0
 8003cfe:	b005      	add	sp, #20
 8003d00:	f85d eb04 	ldr.w	lr, [sp], #4
 8003d04:	f000 b920 	b.w	8003f48 <__kernel_sin>
 8003d08:	4820      	ldr	r0, [pc, #128]	@ (8003d8c <sin+0xa4>)
 8003d0a:	4281      	cmp	r1, r0
 8003d0c:	d908      	bls.n	8003d20 <sin+0x38>
 8003d0e:	4610      	mov	r0, r2
 8003d10:	4619      	mov	r1, r3
 8003d12:	f7fc fa65 	bl	80001e0 <__aeabi_dsub>
 8003d16:	ec41 0b10 	vmov	d0, r0, r1
 8003d1a:	b005      	add	sp, #20
 8003d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d20:	4668      	mov	r0, sp
 8003d22:	f001 fa3d 	bl	80051a0 <__ieee754_rem_pio2>
 8003d26:	f000 0003 	and.w	r0, r0, #3
 8003d2a:	2801      	cmp	r0, #1
 8003d2c:	d00c      	beq.n	8003d48 <sin+0x60>
 8003d2e:	2802      	cmp	r0, #2
 8003d30:	d011      	beq.n	8003d56 <sin+0x6e>
 8003d32:	b9e8      	cbnz	r0, 8003d70 <sin+0x88>
 8003d34:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d38:	ed9d 0b00 	vldr	d0, [sp]
 8003d3c:	2001      	movs	r0, #1
 8003d3e:	f000 f903 	bl	8003f48 <__kernel_sin>
 8003d42:	ec51 0b10 	vmov	r0, r1, d0
 8003d46:	e7e6      	b.n	8003d16 <sin+0x2e>
 8003d48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d4c:	ed9d 0b00 	vldr	d0, [sp]
 8003d50:	f000 f832 	bl	8003db8 <__kernel_cos>
 8003d54:	e7f5      	b.n	8003d42 <sin+0x5a>
 8003d56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d5a:	ed9d 0b00 	vldr	d0, [sp]
 8003d5e:	2001      	movs	r0, #1
 8003d60:	f000 f8f2 	bl	8003f48 <__kernel_sin>
 8003d64:	ec53 2b10 	vmov	r2, r3, d0
 8003d68:	4610      	mov	r0, r2
 8003d6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003d6e:	e7d2      	b.n	8003d16 <sin+0x2e>
 8003d70:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003d74:	ed9d 0b00 	vldr	d0, [sp]
 8003d78:	f000 f81e 	bl	8003db8 <__kernel_cos>
 8003d7c:	e7f2      	b.n	8003d64 <sin+0x7c>
 8003d7e:	bf00      	nop
	...
 8003d88:	3fe921fb 	.word	0x3fe921fb
 8003d8c:	7fefffff 	.word	0x7fefffff

08003d90 <finite>:
 8003d90:	b082      	sub	sp, #8
 8003d92:	ed8d 0b00 	vstr	d0, [sp]
 8003d96:	9801      	ldr	r0, [sp, #4]
 8003d98:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003d9c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8003da0:	0fc0      	lsrs	r0, r0, #31
 8003da2:	b002      	add	sp, #8
 8003da4:	4770      	bx	lr
	...

08003da8 <nan>:
 8003da8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8003db0 <nan+0x8>
 8003dac:	4770      	bx	lr
 8003dae:	bf00      	nop
 8003db0:	00000000 	.word	0x00000000
 8003db4:	7ff80000 	.word	0x7ff80000

08003db8 <__kernel_cos>:
 8003db8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dbc:	ec57 6b10 	vmov	r6, r7, d0
 8003dc0:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003dc4:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 8003dc8:	ed8d 1b00 	vstr	d1, [sp]
 8003dcc:	d206      	bcs.n	8003ddc <__kernel_cos+0x24>
 8003dce:	4630      	mov	r0, r6
 8003dd0:	4639      	mov	r1, r7
 8003dd2:	f7fc fe6d 	bl	8000ab0 <__aeabi_d2iz>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	f000 8088 	beq.w	8003eec <__kernel_cos+0x134>
 8003ddc:	4632      	mov	r2, r6
 8003dde:	463b      	mov	r3, r7
 8003de0:	4630      	mov	r0, r6
 8003de2:	4639      	mov	r1, r7
 8003de4:	f7fc fbb4 	bl	8000550 <__aeabi_dmul>
 8003de8:	4b51      	ldr	r3, [pc, #324]	@ (8003f30 <__kernel_cos+0x178>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	4604      	mov	r4, r0
 8003dee:	460d      	mov	r5, r1
 8003df0:	f7fc fbae 	bl	8000550 <__aeabi_dmul>
 8003df4:	a340      	add	r3, pc, #256	@ (adr r3, 8003ef8 <__kernel_cos+0x140>)
 8003df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfa:	4682      	mov	sl, r0
 8003dfc:	468b      	mov	fp, r1
 8003dfe:	4620      	mov	r0, r4
 8003e00:	4629      	mov	r1, r5
 8003e02:	f7fc fba5 	bl	8000550 <__aeabi_dmul>
 8003e06:	a33e      	add	r3, pc, #248	@ (adr r3, 8003f00 <__kernel_cos+0x148>)
 8003e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e0c:	f7fc f9ea 	bl	80001e4 <__adddf3>
 8003e10:	4622      	mov	r2, r4
 8003e12:	462b      	mov	r3, r5
 8003e14:	f7fc fb9c 	bl	8000550 <__aeabi_dmul>
 8003e18:	a33b      	add	r3, pc, #236	@ (adr r3, 8003f08 <__kernel_cos+0x150>)
 8003e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e1e:	f7fc f9df 	bl	80001e0 <__aeabi_dsub>
 8003e22:	4622      	mov	r2, r4
 8003e24:	462b      	mov	r3, r5
 8003e26:	f7fc fb93 	bl	8000550 <__aeabi_dmul>
 8003e2a:	a339      	add	r3, pc, #228	@ (adr r3, 8003f10 <__kernel_cos+0x158>)
 8003e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e30:	f7fc f9d8 	bl	80001e4 <__adddf3>
 8003e34:	4622      	mov	r2, r4
 8003e36:	462b      	mov	r3, r5
 8003e38:	f7fc fb8a 	bl	8000550 <__aeabi_dmul>
 8003e3c:	a336      	add	r3, pc, #216	@ (adr r3, 8003f18 <__kernel_cos+0x160>)
 8003e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e42:	f7fc f9cd 	bl	80001e0 <__aeabi_dsub>
 8003e46:	4622      	mov	r2, r4
 8003e48:	462b      	mov	r3, r5
 8003e4a:	f7fc fb81 	bl	8000550 <__aeabi_dmul>
 8003e4e:	a334      	add	r3, pc, #208	@ (adr r3, 8003f20 <__kernel_cos+0x168>)
 8003e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e54:	f7fc f9c6 	bl	80001e4 <__adddf3>
 8003e58:	4622      	mov	r2, r4
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	f7fc fb78 	bl	8000550 <__aeabi_dmul>
 8003e60:	4622      	mov	r2, r4
 8003e62:	462b      	mov	r3, r5
 8003e64:	f7fc fb74 	bl	8000550 <__aeabi_dmul>
 8003e68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e6c:	4604      	mov	r4, r0
 8003e6e:	460d      	mov	r5, r1
 8003e70:	4630      	mov	r0, r6
 8003e72:	4639      	mov	r1, r7
 8003e74:	f7fc fb6c 	bl	8000550 <__aeabi_dmul>
 8003e78:	460b      	mov	r3, r1
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	4629      	mov	r1, r5
 8003e7e:	4620      	mov	r0, r4
 8003e80:	f7fc f9ae 	bl	80001e0 <__aeabi_dsub>
 8003e84:	4b2b      	ldr	r3, [pc, #172]	@ (8003f34 <__kernel_cos+0x17c>)
 8003e86:	4598      	cmp	r8, r3
 8003e88:	4606      	mov	r6, r0
 8003e8a:	460f      	mov	r7, r1
 8003e8c:	d810      	bhi.n	8003eb0 <__kernel_cos+0xf8>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	460b      	mov	r3, r1
 8003e92:	4650      	mov	r0, sl
 8003e94:	4659      	mov	r1, fp
 8003e96:	f7fc f9a3 	bl	80001e0 <__aeabi_dsub>
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4926      	ldr	r1, [pc, #152]	@ (8003f38 <__kernel_cos+0x180>)
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	f7fc f99d 	bl	80001e0 <__aeabi_dsub>
 8003ea6:	ec41 0b10 	vmov	d0, r0, r1
 8003eaa:	b003      	add	sp, #12
 8003eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003eb0:	4b22      	ldr	r3, [pc, #136]	@ (8003f3c <__kernel_cos+0x184>)
 8003eb2:	4921      	ldr	r1, [pc, #132]	@ (8003f38 <__kernel_cos+0x180>)
 8003eb4:	4598      	cmp	r8, r3
 8003eb6:	bf8c      	ite	hi
 8003eb8:	4d21      	ldrhi	r5, [pc, #132]	@ (8003f40 <__kernel_cos+0x188>)
 8003eba:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 8003ebe:	2400      	movs	r4, #0
 8003ec0:	4622      	mov	r2, r4
 8003ec2:	462b      	mov	r3, r5
 8003ec4:	2000      	movs	r0, #0
 8003ec6:	f7fc f98b 	bl	80001e0 <__aeabi_dsub>
 8003eca:	4622      	mov	r2, r4
 8003ecc:	4680      	mov	r8, r0
 8003ece:	4689      	mov	r9, r1
 8003ed0:	462b      	mov	r3, r5
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	4659      	mov	r1, fp
 8003ed6:	f7fc f983 	bl	80001e0 <__aeabi_dsub>
 8003eda:	4632      	mov	r2, r6
 8003edc:	463b      	mov	r3, r7
 8003ede:	f7fc f97f 	bl	80001e0 <__aeabi_dsub>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	4640      	mov	r0, r8
 8003ee8:	4649      	mov	r1, r9
 8003eea:	e7da      	b.n	8003ea2 <__kernel_cos+0xea>
 8003eec:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003f28 <__kernel_cos+0x170>
 8003ef0:	e7db      	b.n	8003eaa <__kernel_cos+0xf2>
 8003ef2:	bf00      	nop
 8003ef4:	f3af 8000 	nop.w
 8003ef8:	be8838d4 	.word	0xbe8838d4
 8003efc:	bda8fae9 	.word	0xbda8fae9
 8003f00:	bdb4b1c4 	.word	0xbdb4b1c4
 8003f04:	3e21ee9e 	.word	0x3e21ee9e
 8003f08:	809c52ad 	.word	0x809c52ad
 8003f0c:	3e927e4f 	.word	0x3e927e4f
 8003f10:	19cb1590 	.word	0x19cb1590
 8003f14:	3efa01a0 	.word	0x3efa01a0
 8003f18:	16c15177 	.word	0x16c15177
 8003f1c:	3f56c16c 	.word	0x3f56c16c
 8003f20:	5555554c 	.word	0x5555554c
 8003f24:	3fa55555 	.word	0x3fa55555
 8003f28:	00000000 	.word	0x00000000
 8003f2c:	3ff00000 	.word	0x3ff00000
 8003f30:	3fe00000 	.word	0x3fe00000
 8003f34:	3fd33332 	.word	0x3fd33332
 8003f38:	3ff00000 	.word	0x3ff00000
 8003f3c:	3fe90000 	.word	0x3fe90000
 8003f40:	3fd20000 	.word	0x3fd20000
 8003f44:	00000000 	.word	0x00000000

08003f48 <__kernel_sin>:
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	ec55 4b10 	vmov	r4, r5, d0
 8003f50:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003f54:	b085      	sub	sp, #20
 8003f56:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003f5a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003f5e:	4680      	mov	r8, r0
 8003f60:	d205      	bcs.n	8003f6e <__kernel_sin+0x26>
 8003f62:	4620      	mov	r0, r4
 8003f64:	4629      	mov	r1, r5
 8003f66:	f7fc fda3 	bl	8000ab0 <__aeabi_d2iz>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d052      	beq.n	8004014 <__kernel_sin+0xcc>
 8003f6e:	4622      	mov	r2, r4
 8003f70:	462b      	mov	r3, r5
 8003f72:	4620      	mov	r0, r4
 8003f74:	4629      	mov	r1, r5
 8003f76:	f7fc faeb 	bl	8000550 <__aeabi_dmul>
 8003f7a:	4682      	mov	sl, r0
 8003f7c:	468b      	mov	fp, r1
 8003f7e:	4602      	mov	r2, r0
 8003f80:	460b      	mov	r3, r1
 8003f82:	4620      	mov	r0, r4
 8003f84:	4629      	mov	r1, r5
 8003f86:	f7fc fae3 	bl	8000550 <__aeabi_dmul>
 8003f8a:	a342      	add	r3, pc, #264	@ (adr r3, 8004094 <__kernel_sin+0x14c>)
 8003f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f90:	e9cd 0100 	strd	r0, r1, [sp]
 8003f94:	4650      	mov	r0, sl
 8003f96:	4659      	mov	r1, fp
 8003f98:	f7fc fada 	bl	8000550 <__aeabi_dmul>
 8003f9c:	a33f      	add	r3, pc, #252	@ (adr r3, 800409c <__kernel_sin+0x154>)
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f7fc f91d 	bl	80001e0 <__aeabi_dsub>
 8003fa6:	4652      	mov	r2, sl
 8003fa8:	465b      	mov	r3, fp
 8003faa:	f7fc fad1 	bl	8000550 <__aeabi_dmul>
 8003fae:	a33d      	add	r3, pc, #244	@ (adr r3, 80040a4 <__kernel_sin+0x15c>)
 8003fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb4:	f7fc f916 	bl	80001e4 <__adddf3>
 8003fb8:	4652      	mov	r2, sl
 8003fba:	465b      	mov	r3, fp
 8003fbc:	f7fc fac8 	bl	8000550 <__aeabi_dmul>
 8003fc0:	a33a      	add	r3, pc, #232	@ (adr r3, 80040ac <__kernel_sin+0x164>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	f7fc f90b 	bl	80001e0 <__aeabi_dsub>
 8003fca:	4652      	mov	r2, sl
 8003fcc:	465b      	mov	r3, fp
 8003fce:	f7fc fabf 	bl	8000550 <__aeabi_dmul>
 8003fd2:	a338      	add	r3, pc, #224	@ (adr r3, 80040b4 <__kernel_sin+0x16c>)
 8003fd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd8:	f7fc f904 	bl	80001e4 <__adddf3>
 8003fdc:	4606      	mov	r6, r0
 8003fde:	460f      	mov	r7, r1
 8003fe0:	f1b8 0f00 	cmp.w	r8, #0
 8003fe4:	d11b      	bne.n	800401e <__kernel_sin+0xd6>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4650      	mov	r0, sl
 8003fec:	4659      	mov	r1, fp
 8003fee:	f7fc faaf 	bl	8000550 <__aeabi_dmul>
 8003ff2:	a325      	add	r3, pc, #148	@ (adr r3, 8004088 <__kernel_sin+0x140>)
 8003ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff8:	f7fc f8f2 	bl	80001e0 <__aeabi_dsub>
 8003ffc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004000:	f7fc faa6 	bl	8000550 <__aeabi_dmul>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4620      	mov	r0, r4
 800400a:	4629      	mov	r1, r5
 800400c:	f7fc f8ea 	bl	80001e4 <__adddf3>
 8004010:	4604      	mov	r4, r0
 8004012:	460d      	mov	r5, r1
 8004014:	ec45 4b10 	vmov	d0, r4, r5
 8004018:	b005      	add	sp, #20
 800401a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004022:	4b1b      	ldr	r3, [pc, #108]	@ (8004090 <__kernel_sin+0x148>)
 8004024:	2200      	movs	r2, #0
 8004026:	f7fc fa93 	bl	8000550 <__aeabi_dmul>
 800402a:	4632      	mov	r2, r6
 800402c:	4680      	mov	r8, r0
 800402e:	4689      	mov	r9, r1
 8004030:	463b      	mov	r3, r7
 8004032:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004036:	f7fc fa8b 	bl	8000550 <__aeabi_dmul>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4640      	mov	r0, r8
 8004040:	4649      	mov	r1, r9
 8004042:	f7fc f8cd 	bl	80001e0 <__aeabi_dsub>
 8004046:	4652      	mov	r2, sl
 8004048:	465b      	mov	r3, fp
 800404a:	f7fc fa81 	bl	8000550 <__aeabi_dmul>
 800404e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004052:	f7fc f8c5 	bl	80001e0 <__aeabi_dsub>
 8004056:	a30c      	add	r3, pc, #48	@ (adr r3, 8004088 <__kernel_sin+0x140>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	4606      	mov	r6, r0
 800405e:	460f      	mov	r7, r1
 8004060:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004064:	f7fc fa74 	bl	8000550 <__aeabi_dmul>
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4630      	mov	r0, r6
 800406e:	4639      	mov	r1, r7
 8004070:	f7fc f8b8 	bl	80001e4 <__adddf3>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4620      	mov	r0, r4
 800407a:	4629      	mov	r1, r5
 800407c:	f7fc f8b0 	bl	80001e0 <__aeabi_dsub>
 8004080:	e7c6      	b.n	8004010 <__kernel_sin+0xc8>
 8004082:	bf00      	nop
 8004084:	f3af 8000 	nop.w
 8004088:	55555549 	.word	0x55555549
 800408c:	3fc55555 	.word	0x3fc55555
 8004090:	3fe00000 	.word	0x3fe00000
 8004094:	5acfd57c 	.word	0x5acfd57c
 8004098:	3de5d93a 	.word	0x3de5d93a
 800409c:	8a2b9ceb 	.word	0x8a2b9ceb
 80040a0:	3e5ae5e6 	.word	0x3e5ae5e6
 80040a4:	57b1fe7d 	.word	0x57b1fe7d
 80040a8:	3ec71de3 	.word	0x3ec71de3
 80040ac:	19c161d5 	.word	0x19c161d5
 80040b0:	3f2a01a0 	.word	0x3f2a01a0
 80040b4:	1110f8a6 	.word	0x1110f8a6
 80040b8:	3f811111 	.word	0x3f811111
 80040bc:	00000000 	.word	0x00000000

080040c0 <__ieee754_acos>:
 80040c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040c4:	ec55 4b10 	vmov	r4, r5, d0
 80040c8:	49b7      	ldr	r1, [pc, #732]	@ (80043a8 <__ieee754_acos+0x2e8>)
 80040ca:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80040ce:	428b      	cmp	r3, r1
 80040d0:	d919      	bls.n	8004106 <__ieee754_acos+0x46>
 80040d2:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 80040d6:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 80040da:	4323      	orrs	r3, r4
 80040dc:	d106      	bne.n	80040ec <__ieee754_acos+0x2c>
 80040de:	2d00      	cmp	r5, #0
 80040e0:	f340 8210 	ble.w	8004504 <__ieee754_acos+0x444>
 80040e4:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 8004338 <__ieee754_acos+0x278>
 80040e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040ec:	4622      	mov	r2, r4
 80040ee:	462b      	mov	r3, r5
 80040f0:	4620      	mov	r0, r4
 80040f2:	4629      	mov	r1, r5
 80040f4:	f7fc f874 	bl	80001e0 <__aeabi_dsub>
 80040f8:	4602      	mov	r2, r0
 80040fa:	460b      	mov	r3, r1
 80040fc:	f7fc fb52 	bl	80007a4 <__aeabi_ddiv>
 8004100:	ec41 0b10 	vmov	d0, r0, r1
 8004104:	e7f0      	b.n	80040e8 <__ieee754_acos+0x28>
 8004106:	49a9      	ldr	r1, [pc, #676]	@ (80043ac <__ieee754_acos+0x2ec>)
 8004108:	428b      	cmp	r3, r1
 800410a:	f200 8085 	bhi.w	8004218 <__ieee754_acos+0x158>
 800410e:	4aa8      	ldr	r2, [pc, #672]	@ (80043b0 <__ieee754_acos+0x2f0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	f240 81fa 	bls.w	800450a <__ieee754_acos+0x44a>
 8004116:	4622      	mov	r2, r4
 8004118:	462b      	mov	r3, r5
 800411a:	4620      	mov	r0, r4
 800411c:	4629      	mov	r1, r5
 800411e:	f7fc fa17 	bl	8000550 <__aeabi_dmul>
 8004122:	a387      	add	r3, pc, #540	@ (adr r3, 8004340 <__ieee754_acos+0x280>)
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	4606      	mov	r6, r0
 800412a:	460f      	mov	r7, r1
 800412c:	f7fc fa10 	bl	8000550 <__aeabi_dmul>
 8004130:	a385      	add	r3, pc, #532	@ (adr r3, 8004348 <__ieee754_acos+0x288>)
 8004132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004136:	f7fc f855 	bl	80001e4 <__adddf3>
 800413a:	4632      	mov	r2, r6
 800413c:	463b      	mov	r3, r7
 800413e:	f7fc fa07 	bl	8000550 <__aeabi_dmul>
 8004142:	a383      	add	r3, pc, #524	@ (adr r3, 8004350 <__ieee754_acos+0x290>)
 8004144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004148:	f7fc f84a 	bl	80001e0 <__aeabi_dsub>
 800414c:	4632      	mov	r2, r6
 800414e:	463b      	mov	r3, r7
 8004150:	f7fc f9fe 	bl	8000550 <__aeabi_dmul>
 8004154:	a380      	add	r3, pc, #512	@ (adr r3, 8004358 <__ieee754_acos+0x298>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc f843 	bl	80001e4 <__adddf3>
 800415e:	4632      	mov	r2, r6
 8004160:	463b      	mov	r3, r7
 8004162:	f7fc f9f5 	bl	8000550 <__aeabi_dmul>
 8004166:	a37e      	add	r3, pc, #504	@ (adr r3, 8004360 <__ieee754_acos+0x2a0>)
 8004168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416c:	f7fc f838 	bl	80001e0 <__aeabi_dsub>
 8004170:	4632      	mov	r2, r6
 8004172:	463b      	mov	r3, r7
 8004174:	f7fc f9ec 	bl	8000550 <__aeabi_dmul>
 8004178:	a37b      	add	r3, pc, #492	@ (adr r3, 8004368 <__ieee754_acos+0x2a8>)
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	f7fc f831 	bl	80001e4 <__adddf3>
 8004182:	4632      	mov	r2, r6
 8004184:	463b      	mov	r3, r7
 8004186:	f7fc f9e3 	bl	8000550 <__aeabi_dmul>
 800418a:	a379      	add	r3, pc, #484	@ (adr r3, 8004370 <__ieee754_acos+0x2b0>)
 800418c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004190:	4680      	mov	r8, r0
 8004192:	4689      	mov	r9, r1
 8004194:	4630      	mov	r0, r6
 8004196:	4639      	mov	r1, r7
 8004198:	f7fc f9da 	bl	8000550 <__aeabi_dmul>
 800419c:	a376      	add	r3, pc, #472	@ (adr r3, 8004378 <__ieee754_acos+0x2b8>)
 800419e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a2:	f7fc f81d 	bl	80001e0 <__aeabi_dsub>
 80041a6:	4632      	mov	r2, r6
 80041a8:	463b      	mov	r3, r7
 80041aa:	f7fc f9d1 	bl	8000550 <__aeabi_dmul>
 80041ae:	a374      	add	r3, pc, #464	@ (adr r3, 8004380 <__ieee754_acos+0x2c0>)
 80041b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b4:	f7fc f816 	bl	80001e4 <__adddf3>
 80041b8:	4632      	mov	r2, r6
 80041ba:	463b      	mov	r3, r7
 80041bc:	f7fc f9c8 	bl	8000550 <__aeabi_dmul>
 80041c0:	a371      	add	r3, pc, #452	@ (adr r3, 8004388 <__ieee754_acos+0x2c8>)
 80041c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c6:	f7fc f80b 	bl	80001e0 <__aeabi_dsub>
 80041ca:	4632      	mov	r2, r6
 80041cc:	463b      	mov	r3, r7
 80041ce:	f7fc f9bf 	bl	8000550 <__aeabi_dmul>
 80041d2:	4b78      	ldr	r3, [pc, #480]	@ (80043b4 <__ieee754_acos+0x2f4>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	f7fc f805 	bl	80001e4 <__adddf3>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f7fc fadf 	bl	80007a4 <__aeabi_ddiv>
 80041e6:	4622      	mov	r2, r4
 80041e8:	462b      	mov	r3, r5
 80041ea:	f7fc f9b1 	bl	8000550 <__aeabi_dmul>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	a167      	add	r1, pc, #412	@ (adr r1, 8004390 <__ieee754_acos+0x2d0>)
 80041f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041f8:	f7fb fff2 	bl	80001e0 <__aeabi_dsub>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4620      	mov	r0, r4
 8004202:	4629      	mov	r1, r5
 8004204:	f7fb ffec 	bl	80001e0 <__aeabi_dsub>
 8004208:	4602      	mov	r2, r0
 800420a:	460b      	mov	r3, r1
 800420c:	a162      	add	r1, pc, #392	@ (adr r1, 8004398 <__ieee754_acos+0x2d8>)
 800420e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004212:	f7fb ffe5 	bl	80001e0 <__aeabi_dsub>
 8004216:	e773      	b.n	8004100 <__ieee754_acos+0x40>
 8004218:	2d00      	cmp	r5, #0
 800421a:	f280 80cf 	bge.w	80043bc <__ieee754_acos+0x2fc>
 800421e:	4b65      	ldr	r3, [pc, #404]	@ (80043b4 <__ieee754_acos+0x2f4>)
 8004220:	2200      	movs	r2, #0
 8004222:	4620      	mov	r0, r4
 8004224:	4629      	mov	r1, r5
 8004226:	f7fb ffdd 	bl	80001e4 <__adddf3>
 800422a:	4b63      	ldr	r3, [pc, #396]	@ (80043b8 <__ieee754_acos+0x2f8>)
 800422c:	2200      	movs	r2, #0
 800422e:	f7fc f98f 	bl	8000550 <__aeabi_dmul>
 8004232:	a343      	add	r3, pc, #268	@ (adr r3, 8004340 <__ieee754_acos+0x280>)
 8004234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004238:	4604      	mov	r4, r0
 800423a:	460d      	mov	r5, r1
 800423c:	f7fc f988 	bl	8000550 <__aeabi_dmul>
 8004240:	a341      	add	r3, pc, #260	@ (adr r3, 8004348 <__ieee754_acos+0x288>)
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f7fb ffcd 	bl	80001e4 <__adddf3>
 800424a:	4622      	mov	r2, r4
 800424c:	462b      	mov	r3, r5
 800424e:	f7fc f97f 	bl	8000550 <__aeabi_dmul>
 8004252:	a33f      	add	r3, pc, #252	@ (adr r3, 8004350 <__ieee754_acos+0x290>)
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f7fb ffc2 	bl	80001e0 <__aeabi_dsub>
 800425c:	4622      	mov	r2, r4
 800425e:	462b      	mov	r3, r5
 8004260:	f7fc f976 	bl	8000550 <__aeabi_dmul>
 8004264:	a33c      	add	r3, pc, #240	@ (adr r3, 8004358 <__ieee754_acos+0x298>)
 8004266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426a:	f7fb ffbb 	bl	80001e4 <__adddf3>
 800426e:	4622      	mov	r2, r4
 8004270:	462b      	mov	r3, r5
 8004272:	f7fc f96d 	bl	8000550 <__aeabi_dmul>
 8004276:	a33a      	add	r3, pc, #232	@ (adr r3, 8004360 <__ieee754_acos+0x2a0>)
 8004278:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427c:	f7fb ffb0 	bl	80001e0 <__aeabi_dsub>
 8004280:	4622      	mov	r2, r4
 8004282:	462b      	mov	r3, r5
 8004284:	f7fc f964 	bl	8000550 <__aeabi_dmul>
 8004288:	a337      	add	r3, pc, #220	@ (adr r3, 8004368 <__ieee754_acos+0x2a8>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fb ffa9 	bl	80001e4 <__adddf3>
 8004292:	4622      	mov	r2, r4
 8004294:	462b      	mov	r3, r5
 8004296:	f7fc f95b 	bl	8000550 <__aeabi_dmul>
 800429a:	a335      	add	r3, pc, #212	@ (adr r3, 8004370 <__ieee754_acos+0x2b0>)
 800429c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a0:	4606      	mov	r6, r0
 80042a2:	460f      	mov	r7, r1
 80042a4:	4620      	mov	r0, r4
 80042a6:	4629      	mov	r1, r5
 80042a8:	f7fc f952 	bl	8000550 <__aeabi_dmul>
 80042ac:	a332      	add	r3, pc, #200	@ (adr r3, 8004378 <__ieee754_acos+0x2b8>)
 80042ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b2:	f7fb ff95 	bl	80001e0 <__aeabi_dsub>
 80042b6:	4622      	mov	r2, r4
 80042b8:	462b      	mov	r3, r5
 80042ba:	f7fc f949 	bl	8000550 <__aeabi_dmul>
 80042be:	a330      	add	r3, pc, #192	@ (adr r3, 8004380 <__ieee754_acos+0x2c0>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f7fb ff8e 	bl	80001e4 <__adddf3>
 80042c8:	4622      	mov	r2, r4
 80042ca:	462b      	mov	r3, r5
 80042cc:	f7fc f940 	bl	8000550 <__aeabi_dmul>
 80042d0:	a32d      	add	r3, pc, #180	@ (adr r3, 8004388 <__ieee754_acos+0x2c8>)
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f7fb ff83 	bl	80001e0 <__aeabi_dsub>
 80042da:	4622      	mov	r2, r4
 80042dc:	462b      	mov	r3, r5
 80042de:	f7fc f937 	bl	8000550 <__aeabi_dmul>
 80042e2:	4b34      	ldr	r3, [pc, #208]	@ (80043b4 <__ieee754_acos+0x2f4>)
 80042e4:	2200      	movs	r2, #0
 80042e6:	f7fb ff7d 	bl	80001e4 <__adddf3>
 80042ea:	ec45 4b10 	vmov	d0, r4, r5
 80042ee:	4680      	mov	r8, r0
 80042f0:	4689      	mov	r9, r1
 80042f2:	f001 fba1 	bl	8005a38 <__ieee754_sqrt>
 80042f6:	ec55 4b10 	vmov	r4, r5, d0
 80042fa:	4642      	mov	r2, r8
 80042fc:	464b      	mov	r3, r9
 80042fe:	4630      	mov	r0, r6
 8004300:	4639      	mov	r1, r7
 8004302:	f7fc fa4f 	bl	80007a4 <__aeabi_ddiv>
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	f7fc f921 	bl	8000550 <__aeabi_dmul>
 800430e:	a320      	add	r3, pc, #128	@ (adr r3, 8004390 <__ieee754_acos+0x2d0>)
 8004310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004314:	f7fb ff64 	bl	80001e0 <__aeabi_dsub>
 8004318:	4622      	mov	r2, r4
 800431a:	462b      	mov	r3, r5
 800431c:	f7fb ff62 	bl	80001e4 <__adddf3>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	f7fb ff5e 	bl	80001e4 <__adddf3>
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	a11c      	add	r1, pc, #112	@ (adr r1, 80043a0 <__ieee754_acos+0x2e0>)
 800432e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004332:	e76e      	b.n	8004212 <__ieee754_acos+0x152>
 8004334:	f3af 8000 	nop.w
	...
 8004340:	0dfdf709 	.word	0x0dfdf709
 8004344:	3f023de1 	.word	0x3f023de1
 8004348:	7501b288 	.word	0x7501b288
 800434c:	3f49efe0 	.word	0x3f49efe0
 8004350:	b5688f3b 	.word	0xb5688f3b
 8004354:	3fa48228 	.word	0x3fa48228
 8004358:	0e884455 	.word	0x0e884455
 800435c:	3fc9c155 	.word	0x3fc9c155
 8004360:	03eb6f7d 	.word	0x03eb6f7d
 8004364:	3fd4d612 	.word	0x3fd4d612
 8004368:	55555555 	.word	0x55555555
 800436c:	3fc55555 	.word	0x3fc55555
 8004370:	b12e9282 	.word	0xb12e9282
 8004374:	3fb3b8c5 	.word	0x3fb3b8c5
 8004378:	1b8d0159 	.word	0x1b8d0159
 800437c:	3fe6066c 	.word	0x3fe6066c
 8004380:	9c598ac8 	.word	0x9c598ac8
 8004384:	40002ae5 	.word	0x40002ae5
 8004388:	1c8a2d4b 	.word	0x1c8a2d4b
 800438c:	40033a27 	.word	0x40033a27
 8004390:	33145c07 	.word	0x33145c07
 8004394:	3c91a626 	.word	0x3c91a626
 8004398:	54442d18 	.word	0x54442d18
 800439c:	3ff921fb 	.word	0x3ff921fb
 80043a0:	54442d18 	.word	0x54442d18
 80043a4:	400921fb 	.word	0x400921fb
 80043a8:	3fefffff 	.word	0x3fefffff
 80043ac:	3fdfffff 	.word	0x3fdfffff
 80043b0:	3c600000 	.word	0x3c600000
 80043b4:	3ff00000 	.word	0x3ff00000
 80043b8:	3fe00000 	.word	0x3fe00000
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	496b      	ldr	r1, [pc, #428]	@ (8004570 <__ieee754_acos+0x4b0>)
 80043c2:	2000      	movs	r0, #0
 80043c4:	f7fb ff0c 	bl	80001e0 <__aeabi_dsub>
 80043c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004574 <__ieee754_acos+0x4b4>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	f7fc f8c0 	bl	8000550 <__aeabi_dmul>
 80043d0:	4604      	mov	r4, r0
 80043d2:	460d      	mov	r5, r1
 80043d4:	ec45 4b10 	vmov	d0, r4, r5
 80043d8:	f001 fb2e 	bl	8005a38 <__ieee754_sqrt>
 80043dc:	a34c      	add	r3, pc, #304	@ (adr r3, 8004510 <__ieee754_acos+0x450>)
 80043de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043e2:	4620      	mov	r0, r4
 80043e4:	4629      	mov	r1, r5
 80043e6:	ec59 8b10 	vmov	r8, r9, d0
 80043ea:	f7fc f8b1 	bl	8000550 <__aeabi_dmul>
 80043ee:	a34a      	add	r3, pc, #296	@ (adr r3, 8004518 <__ieee754_acos+0x458>)
 80043f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f4:	f7fb fef6 	bl	80001e4 <__adddf3>
 80043f8:	4622      	mov	r2, r4
 80043fa:	462b      	mov	r3, r5
 80043fc:	f7fc f8a8 	bl	8000550 <__aeabi_dmul>
 8004400:	a347      	add	r3, pc, #284	@ (adr r3, 8004520 <__ieee754_acos+0x460>)
 8004402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004406:	f7fb feeb 	bl	80001e0 <__aeabi_dsub>
 800440a:	4622      	mov	r2, r4
 800440c:	462b      	mov	r3, r5
 800440e:	f7fc f89f 	bl	8000550 <__aeabi_dmul>
 8004412:	a345      	add	r3, pc, #276	@ (adr r3, 8004528 <__ieee754_acos+0x468>)
 8004414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004418:	f7fb fee4 	bl	80001e4 <__adddf3>
 800441c:	4622      	mov	r2, r4
 800441e:	462b      	mov	r3, r5
 8004420:	f7fc f896 	bl	8000550 <__aeabi_dmul>
 8004424:	a342      	add	r3, pc, #264	@ (adr r3, 8004530 <__ieee754_acos+0x470>)
 8004426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442a:	f7fb fed9 	bl	80001e0 <__aeabi_dsub>
 800442e:	4622      	mov	r2, r4
 8004430:	462b      	mov	r3, r5
 8004432:	f7fc f88d 	bl	8000550 <__aeabi_dmul>
 8004436:	a340      	add	r3, pc, #256	@ (adr r3, 8004538 <__ieee754_acos+0x478>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7fb fed2 	bl	80001e4 <__adddf3>
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	f7fc f884 	bl	8000550 <__aeabi_dmul>
 8004448:	a33d      	add	r3, pc, #244	@ (adr r3, 8004540 <__ieee754_acos+0x480>)
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	4682      	mov	sl, r0
 8004450:	468b      	mov	fp, r1
 8004452:	4620      	mov	r0, r4
 8004454:	4629      	mov	r1, r5
 8004456:	f7fc f87b 	bl	8000550 <__aeabi_dmul>
 800445a:	a33b      	add	r3, pc, #236	@ (adr r3, 8004548 <__ieee754_acos+0x488>)
 800445c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004460:	f7fb febe 	bl	80001e0 <__aeabi_dsub>
 8004464:	4622      	mov	r2, r4
 8004466:	462b      	mov	r3, r5
 8004468:	f7fc f872 	bl	8000550 <__aeabi_dmul>
 800446c:	a338      	add	r3, pc, #224	@ (adr r3, 8004550 <__ieee754_acos+0x490>)
 800446e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004472:	f7fb feb7 	bl	80001e4 <__adddf3>
 8004476:	4622      	mov	r2, r4
 8004478:	462b      	mov	r3, r5
 800447a:	f7fc f869 	bl	8000550 <__aeabi_dmul>
 800447e:	a336      	add	r3, pc, #216	@ (adr r3, 8004558 <__ieee754_acos+0x498>)
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f7fb feac 	bl	80001e0 <__aeabi_dsub>
 8004488:	4622      	mov	r2, r4
 800448a:	462b      	mov	r3, r5
 800448c:	f7fc f860 	bl	8000550 <__aeabi_dmul>
 8004490:	4b37      	ldr	r3, [pc, #220]	@ (8004570 <__ieee754_acos+0x4b0>)
 8004492:	2200      	movs	r2, #0
 8004494:	f7fb fea6 	bl	80001e4 <__adddf3>
 8004498:	4602      	mov	r2, r0
 800449a:	460b      	mov	r3, r1
 800449c:	4650      	mov	r0, sl
 800449e:	4659      	mov	r1, fp
 80044a0:	f7fc f980 	bl	80007a4 <__aeabi_ddiv>
 80044a4:	4642      	mov	r2, r8
 80044a6:	464b      	mov	r3, r9
 80044a8:	f7fc f852 	bl	8000550 <__aeabi_dmul>
 80044ac:	2600      	movs	r6, #0
 80044ae:	4682      	mov	sl, r0
 80044b0:	468b      	mov	fp, r1
 80044b2:	4632      	mov	r2, r6
 80044b4:	464b      	mov	r3, r9
 80044b6:	4630      	mov	r0, r6
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fc f849 	bl	8000550 <__aeabi_dmul>
 80044be:	4602      	mov	r2, r0
 80044c0:	460b      	mov	r3, r1
 80044c2:	4620      	mov	r0, r4
 80044c4:	4629      	mov	r1, r5
 80044c6:	f7fb fe8b 	bl	80001e0 <__aeabi_dsub>
 80044ca:	4632      	mov	r2, r6
 80044cc:	4604      	mov	r4, r0
 80044ce:	460d      	mov	r5, r1
 80044d0:	464b      	mov	r3, r9
 80044d2:	4640      	mov	r0, r8
 80044d4:	4649      	mov	r1, r9
 80044d6:	f7fb fe85 	bl	80001e4 <__adddf3>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4620      	mov	r0, r4
 80044e0:	4629      	mov	r1, r5
 80044e2:	f7fc f95f 	bl	80007a4 <__aeabi_ddiv>
 80044e6:	4602      	mov	r2, r0
 80044e8:	460b      	mov	r3, r1
 80044ea:	4650      	mov	r0, sl
 80044ec:	4659      	mov	r1, fp
 80044ee:	f7fb fe79 	bl	80001e4 <__adddf3>
 80044f2:	4632      	mov	r2, r6
 80044f4:	464b      	mov	r3, r9
 80044f6:	f7fb fe75 	bl	80001e4 <__adddf3>
 80044fa:	4602      	mov	r2, r0
 80044fc:	460b      	mov	r3, r1
 80044fe:	f7fb fe71 	bl	80001e4 <__adddf3>
 8004502:	e5fd      	b.n	8004100 <__ieee754_acos+0x40>
 8004504:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 8004560 <__ieee754_acos+0x4a0>
 8004508:	e5ee      	b.n	80040e8 <__ieee754_acos+0x28>
 800450a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 8004568 <__ieee754_acos+0x4a8>
 800450e:	e5eb      	b.n	80040e8 <__ieee754_acos+0x28>
 8004510:	0dfdf709 	.word	0x0dfdf709
 8004514:	3f023de1 	.word	0x3f023de1
 8004518:	7501b288 	.word	0x7501b288
 800451c:	3f49efe0 	.word	0x3f49efe0
 8004520:	b5688f3b 	.word	0xb5688f3b
 8004524:	3fa48228 	.word	0x3fa48228
 8004528:	0e884455 	.word	0x0e884455
 800452c:	3fc9c155 	.word	0x3fc9c155
 8004530:	03eb6f7d 	.word	0x03eb6f7d
 8004534:	3fd4d612 	.word	0x3fd4d612
 8004538:	55555555 	.word	0x55555555
 800453c:	3fc55555 	.word	0x3fc55555
 8004540:	b12e9282 	.word	0xb12e9282
 8004544:	3fb3b8c5 	.word	0x3fb3b8c5
 8004548:	1b8d0159 	.word	0x1b8d0159
 800454c:	3fe6066c 	.word	0x3fe6066c
 8004550:	9c598ac8 	.word	0x9c598ac8
 8004554:	40002ae5 	.word	0x40002ae5
 8004558:	1c8a2d4b 	.word	0x1c8a2d4b
 800455c:	40033a27 	.word	0x40033a27
 8004560:	54442d18 	.word	0x54442d18
 8004564:	400921fb 	.word	0x400921fb
 8004568:	54442d18 	.word	0x54442d18
 800456c:	3ff921fb 	.word	0x3ff921fb
 8004570:	3ff00000 	.word	0x3ff00000
 8004574:	3fe00000 	.word	0x3fe00000

08004578 <__ieee754_atan2>:
 8004578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800457c:	ec57 6b11 	vmov	r6, r7, d1
 8004580:	4273      	negs	r3, r6
 8004582:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8004700 <__ieee754_atan2+0x188>
 8004586:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800458a:	4333      	orrs	r3, r6
 800458c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8004590:	4543      	cmp	r3, r8
 8004592:	ec51 0b10 	vmov	r0, r1, d0
 8004596:	4635      	mov	r5, r6
 8004598:	d809      	bhi.n	80045ae <__ieee754_atan2+0x36>
 800459a:	4244      	negs	r4, r0
 800459c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80045a0:	4304      	orrs	r4, r0
 80045a2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80045a6:	4544      	cmp	r4, r8
 80045a8:	468e      	mov	lr, r1
 80045aa:	4681      	mov	r9, r0
 80045ac:	d907      	bls.n	80045be <__ieee754_atan2+0x46>
 80045ae:	4632      	mov	r2, r6
 80045b0:	463b      	mov	r3, r7
 80045b2:	f7fb fe17 	bl	80001e4 <__adddf3>
 80045b6:	ec41 0b10 	vmov	d0, r0, r1
 80045ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80045be:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80045c2:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80045c6:	4334      	orrs	r4, r6
 80045c8:	d103      	bne.n	80045d2 <__ieee754_atan2+0x5a>
 80045ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ce:	f000 bfe3 	b.w	8005598 <atan>
 80045d2:	17bc      	asrs	r4, r7, #30
 80045d4:	f004 0402 	and.w	r4, r4, #2
 80045d8:	ea53 0909 	orrs.w	r9, r3, r9
 80045dc:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80045e0:	d107      	bne.n	80045f2 <__ieee754_atan2+0x7a>
 80045e2:	2c02      	cmp	r4, #2
 80045e4:	d05f      	beq.n	80046a6 <__ieee754_atan2+0x12e>
 80045e6:	2c03      	cmp	r4, #3
 80045e8:	d1e5      	bne.n	80045b6 <__ieee754_atan2+0x3e>
 80045ea:	a143      	add	r1, pc, #268	@ (adr r1, 80046f8 <__ieee754_atan2+0x180>)
 80045ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045f0:	e7e1      	b.n	80045b6 <__ieee754_atan2+0x3e>
 80045f2:	4315      	orrs	r5, r2
 80045f4:	d106      	bne.n	8004604 <__ieee754_atan2+0x8c>
 80045f6:	f1be 0f00 	cmp.w	lr, #0
 80045fa:	db5f      	blt.n	80046bc <__ieee754_atan2+0x144>
 80045fc:	a136      	add	r1, pc, #216	@ (adr r1, 80046d8 <__ieee754_atan2+0x160>)
 80045fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004602:	e7d8      	b.n	80045b6 <__ieee754_atan2+0x3e>
 8004604:	4542      	cmp	r2, r8
 8004606:	d10f      	bne.n	8004628 <__ieee754_atan2+0xb0>
 8004608:	4293      	cmp	r3, r2
 800460a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800460e:	d107      	bne.n	8004620 <__ieee754_atan2+0xa8>
 8004610:	2c02      	cmp	r4, #2
 8004612:	d84c      	bhi.n	80046ae <__ieee754_atan2+0x136>
 8004614:	4b36      	ldr	r3, [pc, #216]	@ (80046f0 <__ieee754_atan2+0x178>)
 8004616:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800461a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800461e:	e7ca      	b.n	80045b6 <__ieee754_atan2+0x3e>
 8004620:	2c02      	cmp	r4, #2
 8004622:	d848      	bhi.n	80046b6 <__ieee754_atan2+0x13e>
 8004624:	4b33      	ldr	r3, [pc, #204]	@ (80046f4 <__ieee754_atan2+0x17c>)
 8004626:	e7f6      	b.n	8004616 <__ieee754_atan2+0x9e>
 8004628:	4543      	cmp	r3, r8
 800462a:	d0e4      	beq.n	80045f6 <__ieee754_atan2+0x7e>
 800462c:	1a9b      	subs	r3, r3, r2
 800462e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8004632:	ea4f 5223 	mov.w	r2, r3, asr #20
 8004636:	da1e      	bge.n	8004676 <__ieee754_atan2+0xfe>
 8004638:	2f00      	cmp	r7, #0
 800463a:	da01      	bge.n	8004640 <__ieee754_atan2+0xc8>
 800463c:	323c      	adds	r2, #60	@ 0x3c
 800463e:	db1e      	blt.n	800467e <__ieee754_atan2+0x106>
 8004640:	4632      	mov	r2, r6
 8004642:	463b      	mov	r3, r7
 8004644:	f7fc f8ae 	bl	80007a4 <__aeabi_ddiv>
 8004648:	ec41 0b10 	vmov	d0, r0, r1
 800464c:	f7ff fb44 	bl	8003cd8 <fabs>
 8004650:	f000 ffa2 	bl	8005598 <atan>
 8004654:	ec51 0b10 	vmov	r0, r1, d0
 8004658:	2c01      	cmp	r4, #1
 800465a:	d013      	beq.n	8004684 <__ieee754_atan2+0x10c>
 800465c:	2c02      	cmp	r4, #2
 800465e:	d015      	beq.n	800468c <__ieee754_atan2+0x114>
 8004660:	2c00      	cmp	r4, #0
 8004662:	d0a8      	beq.n	80045b6 <__ieee754_atan2+0x3e>
 8004664:	a318      	add	r3, pc, #96	@ (adr r3, 80046c8 <__ieee754_atan2+0x150>)
 8004666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466a:	f7fb fdb9 	bl	80001e0 <__aeabi_dsub>
 800466e:	a318      	add	r3, pc, #96	@ (adr r3, 80046d0 <__ieee754_atan2+0x158>)
 8004670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004674:	e014      	b.n	80046a0 <__ieee754_atan2+0x128>
 8004676:	a118      	add	r1, pc, #96	@ (adr r1, 80046d8 <__ieee754_atan2+0x160>)
 8004678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800467c:	e7ec      	b.n	8004658 <__ieee754_atan2+0xe0>
 800467e:	2000      	movs	r0, #0
 8004680:	2100      	movs	r1, #0
 8004682:	e7e9      	b.n	8004658 <__ieee754_atan2+0xe0>
 8004684:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004688:	4619      	mov	r1, r3
 800468a:	e794      	b.n	80045b6 <__ieee754_atan2+0x3e>
 800468c:	a30e      	add	r3, pc, #56	@ (adr r3, 80046c8 <__ieee754_atan2+0x150>)
 800468e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004692:	f7fb fda5 	bl	80001e0 <__aeabi_dsub>
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	a10d      	add	r1, pc, #52	@ (adr r1, 80046d0 <__ieee754_atan2+0x158>)
 800469c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046a0:	f7fb fd9e 	bl	80001e0 <__aeabi_dsub>
 80046a4:	e787      	b.n	80045b6 <__ieee754_atan2+0x3e>
 80046a6:	a10a      	add	r1, pc, #40	@ (adr r1, 80046d0 <__ieee754_atan2+0x158>)
 80046a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046ac:	e783      	b.n	80045b6 <__ieee754_atan2+0x3e>
 80046ae:	a10c      	add	r1, pc, #48	@ (adr r1, 80046e0 <__ieee754_atan2+0x168>)
 80046b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046b4:	e77f      	b.n	80045b6 <__ieee754_atan2+0x3e>
 80046b6:	2000      	movs	r0, #0
 80046b8:	2100      	movs	r1, #0
 80046ba:	e77c      	b.n	80045b6 <__ieee754_atan2+0x3e>
 80046bc:	a10a      	add	r1, pc, #40	@ (adr r1, 80046e8 <__ieee754_atan2+0x170>)
 80046be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046c2:	e778      	b.n	80045b6 <__ieee754_atan2+0x3e>
 80046c4:	f3af 8000 	nop.w
 80046c8:	33145c07 	.word	0x33145c07
 80046cc:	3ca1a626 	.word	0x3ca1a626
 80046d0:	54442d18 	.word	0x54442d18
 80046d4:	400921fb 	.word	0x400921fb
 80046d8:	54442d18 	.word	0x54442d18
 80046dc:	3ff921fb 	.word	0x3ff921fb
 80046e0:	54442d18 	.word	0x54442d18
 80046e4:	3fe921fb 	.word	0x3fe921fb
 80046e8:	54442d18 	.word	0x54442d18
 80046ec:	bff921fb 	.word	0xbff921fb
 80046f0:	080063c8 	.word	0x080063c8
 80046f4:	080063b0 	.word	0x080063b0
 80046f8:	54442d18 	.word	0x54442d18
 80046fc:	c00921fb 	.word	0xc00921fb
 8004700:	7ff00000 	.word	0x7ff00000
 8004704:	00000000 	.word	0x00000000

08004708 <__ieee754_pow>:
 8004708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800470c:	b091      	sub	sp, #68	@ 0x44
 800470e:	ed8d 1b00 	vstr	d1, [sp]
 8004712:	e9dd 1900 	ldrd	r1, r9, [sp]
 8004716:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800471a:	ea5a 0001 	orrs.w	r0, sl, r1
 800471e:	ec57 6b10 	vmov	r6, r7, d0
 8004722:	d113      	bne.n	800474c <__ieee754_pow+0x44>
 8004724:	19b3      	adds	r3, r6, r6
 8004726:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800472a:	4152      	adcs	r2, r2
 800472c:	4298      	cmp	r0, r3
 800472e:	4b9a      	ldr	r3, [pc, #616]	@ (8004998 <__ieee754_pow+0x290>)
 8004730:	4193      	sbcs	r3, r2
 8004732:	f080 84ee 	bcs.w	8005112 <__ieee754_pow+0xa0a>
 8004736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800473a:	4630      	mov	r0, r6
 800473c:	4639      	mov	r1, r7
 800473e:	f7fb fd51 	bl	80001e4 <__adddf3>
 8004742:	ec41 0b10 	vmov	d0, r0, r1
 8004746:	b011      	add	sp, #68	@ 0x44
 8004748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474c:	4a93      	ldr	r2, [pc, #588]	@ (800499c <__ieee754_pow+0x294>)
 800474e:	f027 4500 	bic.w	r5, r7, #2147483648	@ 0x80000000
 8004752:	4295      	cmp	r5, r2
 8004754:	46b8      	mov	r8, r7
 8004756:	4633      	mov	r3, r6
 8004758:	d80a      	bhi.n	8004770 <__ieee754_pow+0x68>
 800475a:	d104      	bne.n	8004766 <__ieee754_pow+0x5e>
 800475c:	2e00      	cmp	r6, #0
 800475e:	d1ea      	bne.n	8004736 <__ieee754_pow+0x2e>
 8004760:	45aa      	cmp	sl, r5
 8004762:	d8e8      	bhi.n	8004736 <__ieee754_pow+0x2e>
 8004764:	e001      	b.n	800476a <__ieee754_pow+0x62>
 8004766:	4592      	cmp	sl, r2
 8004768:	d802      	bhi.n	8004770 <__ieee754_pow+0x68>
 800476a:	4592      	cmp	sl, r2
 800476c:	d10f      	bne.n	800478e <__ieee754_pow+0x86>
 800476e:	b171      	cbz	r1, 800478e <__ieee754_pow+0x86>
 8004770:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8004774:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8004778:	ea58 0803 	orrs.w	r8, r8, r3
 800477c:	d1db      	bne.n	8004736 <__ieee754_pow+0x2e>
 800477e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8004782:	18db      	adds	r3, r3, r3
 8004784:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8004788:	4152      	adcs	r2, r2
 800478a:	4598      	cmp	r8, r3
 800478c:	e7cf      	b.n	800472e <__ieee754_pow+0x26>
 800478e:	f1b8 0f00 	cmp.w	r8, #0
 8004792:	46ab      	mov	fp, r5
 8004794:	da43      	bge.n	800481e <__ieee754_pow+0x116>
 8004796:	4a82      	ldr	r2, [pc, #520]	@ (80049a0 <__ieee754_pow+0x298>)
 8004798:	4592      	cmp	sl, r2
 800479a:	d856      	bhi.n	800484a <__ieee754_pow+0x142>
 800479c:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 80047a0:	4592      	cmp	sl, r2
 80047a2:	f240 84c5 	bls.w	8005130 <__ieee754_pow+0xa28>
 80047a6:	ea4f 522a 	mov.w	r2, sl, asr #20
 80047aa:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 80047ae:	2a14      	cmp	r2, #20
 80047b0:	dd18      	ble.n	80047e4 <__ieee754_pow+0xdc>
 80047b2:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 80047b6:	fa21 f402 	lsr.w	r4, r1, r2
 80047ba:	fa04 f202 	lsl.w	r2, r4, r2
 80047be:	428a      	cmp	r2, r1
 80047c0:	f040 84b6 	bne.w	8005130 <__ieee754_pow+0xa28>
 80047c4:	f004 0401 	and.w	r4, r4, #1
 80047c8:	f1c4 0402 	rsb	r4, r4, #2
 80047cc:	2900      	cmp	r1, #0
 80047ce:	d159      	bne.n	8004884 <__ieee754_pow+0x17c>
 80047d0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80047d4:	d148      	bne.n	8004868 <__ieee754_pow+0x160>
 80047d6:	4632      	mov	r2, r6
 80047d8:	463b      	mov	r3, r7
 80047da:	4630      	mov	r0, r6
 80047dc:	4639      	mov	r1, r7
 80047de:	f7fb feb7 	bl	8000550 <__aeabi_dmul>
 80047e2:	e7ae      	b.n	8004742 <__ieee754_pow+0x3a>
 80047e4:	2900      	cmp	r1, #0
 80047e6:	d14c      	bne.n	8004882 <__ieee754_pow+0x17a>
 80047e8:	f1c2 0214 	rsb	r2, r2, #20
 80047ec:	fa4a f402 	asr.w	r4, sl, r2
 80047f0:	fa04 f202 	lsl.w	r2, r4, r2
 80047f4:	4552      	cmp	r2, sl
 80047f6:	f040 8498 	bne.w	800512a <__ieee754_pow+0xa22>
 80047fa:	f004 0401 	and.w	r4, r4, #1
 80047fe:	f1c4 0402 	rsb	r4, r4, #2
 8004802:	4a68      	ldr	r2, [pc, #416]	@ (80049a4 <__ieee754_pow+0x29c>)
 8004804:	4592      	cmp	sl, r2
 8004806:	d1e3      	bne.n	80047d0 <__ieee754_pow+0xc8>
 8004808:	f1b9 0f00 	cmp.w	r9, #0
 800480c:	f280 8489 	bge.w	8005122 <__ieee754_pow+0xa1a>
 8004810:	4964      	ldr	r1, [pc, #400]	@ (80049a4 <__ieee754_pow+0x29c>)
 8004812:	4632      	mov	r2, r6
 8004814:	463b      	mov	r3, r7
 8004816:	2000      	movs	r0, #0
 8004818:	f7fb ffc4 	bl	80007a4 <__aeabi_ddiv>
 800481c:	e791      	b.n	8004742 <__ieee754_pow+0x3a>
 800481e:	2400      	movs	r4, #0
 8004820:	bb81      	cbnz	r1, 8004884 <__ieee754_pow+0x17c>
 8004822:	4a5e      	ldr	r2, [pc, #376]	@ (800499c <__ieee754_pow+0x294>)
 8004824:	4592      	cmp	sl, r2
 8004826:	d1ec      	bne.n	8004802 <__ieee754_pow+0xfa>
 8004828:	f105 4240 	add.w	r2, r5, #3221225472	@ 0xc0000000
 800482c:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8004830:	431a      	orrs	r2, r3
 8004832:	f000 846e 	beq.w	8005112 <__ieee754_pow+0xa0a>
 8004836:	4b5c      	ldr	r3, [pc, #368]	@ (80049a8 <__ieee754_pow+0x2a0>)
 8004838:	429d      	cmp	r5, r3
 800483a:	d908      	bls.n	800484e <__ieee754_pow+0x146>
 800483c:	f1b9 0f00 	cmp.w	r9, #0
 8004840:	f280 846b 	bge.w	800511a <__ieee754_pow+0xa12>
 8004844:	2000      	movs	r0, #0
 8004846:	2100      	movs	r1, #0
 8004848:	e77b      	b.n	8004742 <__ieee754_pow+0x3a>
 800484a:	2402      	movs	r4, #2
 800484c:	e7e8      	b.n	8004820 <__ieee754_pow+0x118>
 800484e:	f1b9 0f00 	cmp.w	r9, #0
 8004852:	f04f 0000 	mov.w	r0, #0
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	f6bf af72 	bge.w	8004742 <__ieee754_pow+0x3a>
 800485e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004862:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8004866:	e76c      	b.n	8004742 <__ieee754_pow+0x3a>
 8004868:	4a50      	ldr	r2, [pc, #320]	@ (80049ac <__ieee754_pow+0x2a4>)
 800486a:	4591      	cmp	r9, r2
 800486c:	d10a      	bne.n	8004884 <__ieee754_pow+0x17c>
 800486e:	f1b8 0f00 	cmp.w	r8, #0
 8004872:	db07      	blt.n	8004884 <__ieee754_pow+0x17c>
 8004874:	ec47 6b10 	vmov	d0, r6, r7
 8004878:	b011      	add	sp, #68	@ 0x44
 800487a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487e:	f001 b8db 	b.w	8005a38 <__ieee754_sqrt>
 8004882:	2400      	movs	r4, #0
 8004884:	ec47 6b10 	vmov	d0, r6, r7
 8004888:	9302      	str	r3, [sp, #8]
 800488a:	f7ff fa25 	bl	8003cd8 <fabs>
 800488e:	9b02      	ldr	r3, [sp, #8]
 8004890:	ec51 0b10 	vmov	r0, r1, d0
 8004894:	bb43      	cbnz	r3, 80048e8 <__ieee754_pow+0x1e0>
 8004896:	4b43      	ldr	r3, [pc, #268]	@ (80049a4 <__ieee754_pow+0x29c>)
 8004898:	f028 4240 	bic.w	r2, r8, #3221225472	@ 0xc0000000
 800489c:	429a      	cmp	r2, r3
 800489e:	d000      	beq.n	80048a2 <__ieee754_pow+0x19a>
 80048a0:	bb15      	cbnz	r5, 80048e8 <__ieee754_pow+0x1e0>
 80048a2:	f1b9 0f00 	cmp.w	r9, #0
 80048a6:	da05      	bge.n	80048b4 <__ieee754_pow+0x1ac>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	2000      	movs	r0, #0
 80048ae:	493d      	ldr	r1, [pc, #244]	@ (80049a4 <__ieee754_pow+0x29c>)
 80048b0:	f7fb ff78 	bl	80007a4 <__aeabi_ddiv>
 80048b4:	f1b8 0f00 	cmp.w	r8, #0
 80048b8:	f6bf af43 	bge.w	8004742 <__ieee754_pow+0x3a>
 80048bc:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80048c0:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 80048c4:	4325      	orrs	r5, r4
 80048c6:	d108      	bne.n	80048da <__ieee754_pow+0x1d2>
 80048c8:	4602      	mov	r2, r0
 80048ca:	460b      	mov	r3, r1
 80048cc:	4610      	mov	r0, r2
 80048ce:	4619      	mov	r1, r3
 80048d0:	f7fb fc86 	bl	80001e0 <__aeabi_dsub>
 80048d4:	4602      	mov	r2, r0
 80048d6:	460b      	mov	r3, r1
 80048d8:	e79e      	b.n	8004818 <__ieee754_pow+0x110>
 80048da:	2c01      	cmp	r4, #1
 80048dc:	f47f af31 	bne.w	8004742 <__ieee754_pow+0x3a>
 80048e0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048e4:	4619      	mov	r1, r3
 80048e6:	e72c      	b.n	8004742 <__ieee754_pow+0x3a>
 80048e8:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 80048ec:	3b01      	subs	r3, #1
 80048ee:	ea53 0204 	orrs.w	r2, r3, r4
 80048f2:	d102      	bne.n	80048fa <__ieee754_pow+0x1f2>
 80048f4:	4632      	mov	r2, r6
 80048f6:	463b      	mov	r3, r7
 80048f8:	e7e8      	b.n	80048cc <__ieee754_pow+0x1c4>
 80048fa:	3c01      	subs	r4, #1
 80048fc:	431c      	orrs	r4, r3
 80048fe:	d016      	beq.n	800492e <__ieee754_pow+0x226>
 8004900:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8004988 <__ieee754_pow+0x280>
 8004904:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8004908:	ed8d 7b02 	vstr	d7, [sp, #8]
 800490c:	f240 8110 	bls.w	8004b30 <__ieee754_pow+0x428>
 8004910:	4b27      	ldr	r3, [pc, #156]	@ (80049b0 <__ieee754_pow+0x2a8>)
 8004912:	459a      	cmp	sl, r3
 8004914:	4b24      	ldr	r3, [pc, #144]	@ (80049a8 <__ieee754_pow+0x2a0>)
 8004916:	d916      	bls.n	8004946 <__ieee754_pow+0x23e>
 8004918:	429d      	cmp	r5, r3
 800491a:	d80b      	bhi.n	8004934 <__ieee754_pow+0x22c>
 800491c:	f1b9 0f00 	cmp.w	r9, #0
 8004920:	da0b      	bge.n	800493a <__ieee754_pow+0x232>
 8004922:	2000      	movs	r0, #0
 8004924:	b011      	add	sp, #68	@ 0x44
 8004926:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800492a:	f001 b87d 	b.w	8005a28 <__math_oflow>
 800492e:	ed9f 7b18 	vldr	d7, [pc, #96]	@ 8004990 <__ieee754_pow+0x288>
 8004932:	e7e7      	b.n	8004904 <__ieee754_pow+0x1fc>
 8004934:	f1b9 0f00 	cmp.w	r9, #0
 8004938:	dcf3      	bgt.n	8004922 <__ieee754_pow+0x21a>
 800493a:	2000      	movs	r0, #0
 800493c:	b011      	add	sp, #68	@ 0x44
 800493e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004942:	f001 b869 	b.w	8005a18 <__math_uflow>
 8004946:	429d      	cmp	r5, r3
 8004948:	d20c      	bcs.n	8004964 <__ieee754_pow+0x25c>
 800494a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800494e:	2200      	movs	r2, #0
 8004950:	2300      	movs	r3, #0
 8004952:	f7fc f86f 	bl	8000a34 <__aeabi_dcmplt>
 8004956:	3800      	subs	r0, #0
 8004958:	bf18      	it	ne
 800495a:	2001      	movne	r0, #1
 800495c:	f1b9 0f00 	cmp.w	r9, #0
 8004960:	daec      	bge.n	800493c <__ieee754_pow+0x234>
 8004962:	e7df      	b.n	8004924 <__ieee754_pow+0x21c>
 8004964:	4b0f      	ldr	r3, [pc, #60]	@ (80049a4 <__ieee754_pow+0x29c>)
 8004966:	429d      	cmp	r5, r3
 8004968:	f04f 0200 	mov.w	r2, #0
 800496c:	d922      	bls.n	80049b4 <__ieee754_pow+0x2ac>
 800496e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004972:	2300      	movs	r3, #0
 8004974:	f7fc f85e 	bl	8000a34 <__aeabi_dcmplt>
 8004978:	3800      	subs	r0, #0
 800497a:	bf18      	it	ne
 800497c:	2001      	movne	r0, #1
 800497e:	f1b9 0f00 	cmp.w	r9, #0
 8004982:	dccf      	bgt.n	8004924 <__ieee754_pow+0x21c>
 8004984:	e7da      	b.n	800493c <__ieee754_pow+0x234>
 8004986:	bf00      	nop
 8004988:	00000000 	.word	0x00000000
 800498c:	3ff00000 	.word	0x3ff00000
 8004990:	00000000 	.word	0x00000000
 8004994:	bff00000 	.word	0xbff00000
 8004998:	fff00000 	.word	0xfff00000
 800499c:	7ff00000 	.word	0x7ff00000
 80049a0:	433fffff 	.word	0x433fffff
 80049a4:	3ff00000 	.word	0x3ff00000
 80049a8:	3fefffff 	.word	0x3fefffff
 80049ac:	3fe00000 	.word	0x3fe00000
 80049b0:	43f00000 	.word	0x43f00000
 80049b4:	4b5a      	ldr	r3, [pc, #360]	@ (8004b20 <__ieee754_pow+0x418>)
 80049b6:	f7fb fc13 	bl	80001e0 <__aeabi_dsub>
 80049ba:	a351      	add	r3, pc, #324	@ (adr r3, 8004b00 <__ieee754_pow+0x3f8>)
 80049bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c0:	4604      	mov	r4, r0
 80049c2:	460d      	mov	r5, r1
 80049c4:	f7fb fdc4 	bl	8000550 <__aeabi_dmul>
 80049c8:	a34f      	add	r3, pc, #316	@ (adr r3, 8004b08 <__ieee754_pow+0x400>)
 80049ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ce:	4606      	mov	r6, r0
 80049d0:	460f      	mov	r7, r1
 80049d2:	4620      	mov	r0, r4
 80049d4:	4629      	mov	r1, r5
 80049d6:	f7fb fdbb 	bl	8000550 <__aeabi_dmul>
 80049da:	4b52      	ldr	r3, [pc, #328]	@ (8004b24 <__ieee754_pow+0x41c>)
 80049dc:	4682      	mov	sl, r0
 80049de:	468b      	mov	fp, r1
 80049e0:	2200      	movs	r2, #0
 80049e2:	4620      	mov	r0, r4
 80049e4:	4629      	mov	r1, r5
 80049e6:	f7fb fdb3 	bl	8000550 <__aeabi_dmul>
 80049ea:	4602      	mov	r2, r0
 80049ec:	460b      	mov	r3, r1
 80049ee:	a148      	add	r1, pc, #288	@ (adr r1, 8004b10 <__ieee754_pow+0x408>)
 80049f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80049f4:	f7fb fbf4 	bl	80001e0 <__aeabi_dsub>
 80049f8:	4622      	mov	r2, r4
 80049fa:	462b      	mov	r3, r5
 80049fc:	f7fb fda8 	bl	8000550 <__aeabi_dmul>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	2000      	movs	r0, #0
 8004a06:	4948      	ldr	r1, [pc, #288]	@ (8004b28 <__ieee754_pow+0x420>)
 8004a08:	f7fb fbea 	bl	80001e0 <__aeabi_dsub>
 8004a0c:	4622      	mov	r2, r4
 8004a0e:	4680      	mov	r8, r0
 8004a10:	4689      	mov	r9, r1
 8004a12:	462b      	mov	r3, r5
 8004a14:	4620      	mov	r0, r4
 8004a16:	4629      	mov	r1, r5
 8004a18:	f7fb fd9a 	bl	8000550 <__aeabi_dmul>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	460b      	mov	r3, r1
 8004a20:	4640      	mov	r0, r8
 8004a22:	4649      	mov	r1, r9
 8004a24:	f7fb fd94 	bl	8000550 <__aeabi_dmul>
 8004a28:	a33b      	add	r3, pc, #236	@ (adr r3, 8004b18 <__ieee754_pow+0x410>)
 8004a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2e:	f7fb fd8f 	bl	8000550 <__aeabi_dmul>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4650      	mov	r0, sl
 8004a38:	4659      	mov	r1, fp
 8004a3a:	f7fb fbd1 	bl	80001e0 <__aeabi_dsub>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	4680      	mov	r8, r0
 8004a44:	4689      	mov	r9, r1
 8004a46:	4630      	mov	r0, r6
 8004a48:	4639      	mov	r1, r7
 8004a4a:	f7fb fbcb 	bl	80001e4 <__adddf3>
 8004a4e:	2400      	movs	r4, #0
 8004a50:	4632      	mov	r2, r6
 8004a52:	463b      	mov	r3, r7
 8004a54:	4620      	mov	r0, r4
 8004a56:	460d      	mov	r5, r1
 8004a58:	f7fb fbc2 	bl	80001e0 <__aeabi_dsub>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4640      	mov	r0, r8
 8004a62:	4649      	mov	r1, r9
 8004a64:	f7fb fbbc 	bl	80001e0 <__aeabi_dsub>
 8004a68:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a6c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004a70:	2300      	movs	r3, #0
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004a78:	4606      	mov	r6, r0
 8004a7a:	460f      	mov	r7, r1
 8004a7c:	465b      	mov	r3, fp
 8004a7e:	4652      	mov	r2, sl
 8004a80:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004a84:	f7fb fbac 	bl	80001e0 <__aeabi_dsub>
 8004a88:	4622      	mov	r2, r4
 8004a8a:	462b      	mov	r3, r5
 8004a8c:	f7fb fd60 	bl	8000550 <__aeabi_dmul>
 8004a90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004a94:	4680      	mov	r8, r0
 8004a96:	4689      	mov	r9, r1
 8004a98:	4630      	mov	r0, r6
 8004a9a:	4639      	mov	r1, r7
 8004a9c:	f7fb fd58 	bl	8000550 <__aeabi_dmul>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	460b      	mov	r3, r1
 8004aa4:	4640      	mov	r0, r8
 8004aa6:	4649      	mov	r1, r9
 8004aa8:	f7fb fb9c 	bl	80001e4 <__adddf3>
 8004aac:	465b      	mov	r3, fp
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460f      	mov	r7, r1
 8004ab2:	4652      	mov	r2, sl
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7fb fd4a 	bl	8000550 <__aeabi_dmul>
 8004abc:	460b      	mov	r3, r1
 8004abe:	4602      	mov	r2, r0
 8004ac0:	4680      	mov	r8, r0
 8004ac2:	4689      	mov	r9, r1
 8004ac4:	4630      	mov	r0, r6
 8004ac6:	4639      	mov	r1, r7
 8004ac8:	f7fb fb8c 	bl	80001e4 <__adddf3>
 8004acc:	4b17      	ldr	r3, [pc, #92]	@ (8004b2c <__ieee754_pow+0x424>)
 8004ace:	4299      	cmp	r1, r3
 8004ad0:	4604      	mov	r4, r0
 8004ad2:	460d      	mov	r5, r1
 8004ad4:	468b      	mov	fp, r1
 8004ad6:	f340 820b 	ble.w	8004ef0 <__ieee754_pow+0x7e8>
 8004ada:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8004ade:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8004ae2:	4303      	orrs	r3, r0
 8004ae4:	f000 81ea 	beq.w	8004ebc <__ieee754_pow+0x7b4>
 8004ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aec:	2200      	movs	r2, #0
 8004aee:	2300      	movs	r3, #0
 8004af0:	f7fb ffa0 	bl	8000a34 <__aeabi_dcmplt>
 8004af4:	3800      	subs	r0, #0
 8004af6:	bf18      	it	ne
 8004af8:	2001      	movne	r0, #1
 8004afa:	e713      	b.n	8004924 <__ieee754_pow+0x21c>
 8004afc:	f3af 8000 	nop.w
 8004b00:	60000000 	.word	0x60000000
 8004b04:	3ff71547 	.word	0x3ff71547
 8004b08:	f85ddf44 	.word	0xf85ddf44
 8004b0c:	3e54ae0b 	.word	0x3e54ae0b
 8004b10:	55555555 	.word	0x55555555
 8004b14:	3fd55555 	.word	0x3fd55555
 8004b18:	652b82fe 	.word	0x652b82fe
 8004b1c:	3ff71547 	.word	0x3ff71547
 8004b20:	3ff00000 	.word	0x3ff00000
 8004b24:	3fd00000 	.word	0x3fd00000
 8004b28:	3fe00000 	.word	0x3fe00000
 8004b2c:	408fffff 	.word	0x408fffff
 8004b30:	4bd5      	ldr	r3, [pc, #852]	@ (8004e88 <__ieee754_pow+0x780>)
 8004b32:	ea08 0303 	and.w	r3, r8, r3
 8004b36:	2200      	movs	r2, #0
 8004b38:	b92b      	cbnz	r3, 8004b46 <__ieee754_pow+0x43e>
 8004b3a:	4bd4      	ldr	r3, [pc, #848]	@ (8004e8c <__ieee754_pow+0x784>)
 8004b3c:	f7fb fd08 	bl	8000550 <__aeabi_dmul>
 8004b40:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8004b44:	468b      	mov	fp, r1
 8004b46:	ea4f 532b 	mov.w	r3, fp, asr #20
 8004b4a:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8004b4e:	4413      	add	r3, r2
 8004b50:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b52:	4bcf      	ldr	r3, [pc, #828]	@ (8004e90 <__ieee754_pow+0x788>)
 8004b54:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8004b58:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8004b5c:	459b      	cmp	fp, r3
 8004b5e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8004b62:	dd08      	ble.n	8004b76 <__ieee754_pow+0x46e>
 8004b64:	4bcb      	ldr	r3, [pc, #812]	@ (8004e94 <__ieee754_pow+0x78c>)
 8004b66:	459b      	cmp	fp, r3
 8004b68:	f340 81a5 	ble.w	8004eb6 <__ieee754_pow+0x7ae>
 8004b6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b6e:	3301      	adds	r3, #1
 8004b70:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b72:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8004b76:	f04f 0a00 	mov.w	sl, #0
 8004b7a:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004b7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004b80:	4bc5      	ldr	r3, [pc, #788]	@ (8004e98 <__ieee754_pow+0x790>)
 8004b82:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004b86:	ed93 7b00 	vldr	d7, [r3]
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	ec53 2b17 	vmov	r2, r3, d7
 8004b90:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004b94:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004b98:	f7fb fb22 	bl	80001e0 <__aeabi_dsub>
 8004b9c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004ba0:	4606      	mov	r6, r0
 8004ba2:	460f      	mov	r7, r1
 8004ba4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ba8:	f7fb fb1c 	bl	80001e4 <__adddf3>
 8004bac:	4602      	mov	r2, r0
 8004bae:	460b      	mov	r3, r1
 8004bb0:	2000      	movs	r0, #0
 8004bb2:	49ba      	ldr	r1, [pc, #744]	@ (8004e9c <__ieee754_pow+0x794>)
 8004bb4:	f7fb fdf6 	bl	80007a4 <__aeabi_ddiv>
 8004bb8:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	460b      	mov	r3, r1
 8004bc0:	4630      	mov	r0, r6
 8004bc2:	4639      	mov	r1, r7
 8004bc4:	f7fb fcc4 	bl	8000550 <__aeabi_dmul>
 8004bc8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004bcc:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8004bd0:	106d      	asrs	r5, r5, #1
 8004bd2:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8004bd6:	f04f 0b00 	mov.w	fp, #0
 8004bda:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8004bde:	4661      	mov	r1, ip
 8004be0:	2200      	movs	r2, #0
 8004be2:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004be6:	4658      	mov	r0, fp
 8004be8:	46e1      	mov	r9, ip
 8004bea:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8004bee:	4614      	mov	r4, r2
 8004bf0:	461d      	mov	r5, r3
 8004bf2:	f7fb fcad 	bl	8000550 <__aeabi_dmul>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	4639      	mov	r1, r7
 8004bfe:	f7fb faef 	bl	80001e0 <__aeabi_dsub>
 8004c02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004c06:	4606      	mov	r6, r0
 8004c08:	460f      	mov	r7, r1
 8004c0a:	4620      	mov	r0, r4
 8004c0c:	4629      	mov	r1, r5
 8004c0e:	f7fb fae7 	bl	80001e0 <__aeabi_dsub>
 8004c12:	4602      	mov	r2, r0
 8004c14:	460b      	mov	r3, r1
 8004c16:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004c1a:	f7fb fae1 	bl	80001e0 <__aeabi_dsub>
 8004c1e:	465a      	mov	r2, fp
 8004c20:	464b      	mov	r3, r9
 8004c22:	f7fb fc95 	bl	8000550 <__aeabi_dmul>
 8004c26:	4602      	mov	r2, r0
 8004c28:	460b      	mov	r3, r1
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	4639      	mov	r1, r7
 8004c2e:	f7fb fad7 	bl	80001e0 <__aeabi_dsub>
 8004c32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8004c36:	f7fb fc8b 	bl	8000550 <__aeabi_dmul>
 8004c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c3e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c42:	4610      	mov	r0, r2
 8004c44:	4619      	mov	r1, r3
 8004c46:	f7fb fc83 	bl	8000550 <__aeabi_dmul>
 8004c4a:	a37d      	add	r3, pc, #500	@ (adr r3, 8004e40 <__ieee754_pow+0x738>)
 8004c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c50:	4604      	mov	r4, r0
 8004c52:	460d      	mov	r5, r1
 8004c54:	f7fb fc7c 	bl	8000550 <__aeabi_dmul>
 8004c58:	a37b      	add	r3, pc, #492	@ (adr r3, 8004e48 <__ieee754_pow+0x740>)
 8004c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c5e:	f7fb fac1 	bl	80001e4 <__adddf3>
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	f7fb fc73 	bl	8000550 <__aeabi_dmul>
 8004c6a:	a379      	add	r3, pc, #484	@ (adr r3, 8004e50 <__ieee754_pow+0x748>)
 8004c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c70:	f7fb fab8 	bl	80001e4 <__adddf3>
 8004c74:	4622      	mov	r2, r4
 8004c76:	462b      	mov	r3, r5
 8004c78:	f7fb fc6a 	bl	8000550 <__aeabi_dmul>
 8004c7c:	a376      	add	r3, pc, #472	@ (adr r3, 8004e58 <__ieee754_pow+0x750>)
 8004c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c82:	f7fb faaf 	bl	80001e4 <__adddf3>
 8004c86:	4622      	mov	r2, r4
 8004c88:	462b      	mov	r3, r5
 8004c8a:	f7fb fc61 	bl	8000550 <__aeabi_dmul>
 8004c8e:	a374      	add	r3, pc, #464	@ (adr r3, 8004e60 <__ieee754_pow+0x758>)
 8004c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c94:	f7fb faa6 	bl	80001e4 <__adddf3>
 8004c98:	4622      	mov	r2, r4
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	f7fb fc58 	bl	8000550 <__aeabi_dmul>
 8004ca0:	a371      	add	r3, pc, #452	@ (adr r3, 8004e68 <__ieee754_pow+0x760>)
 8004ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca6:	f7fb fa9d 	bl	80001e4 <__adddf3>
 8004caa:	4622      	mov	r2, r4
 8004cac:	4606      	mov	r6, r0
 8004cae:	460f      	mov	r7, r1
 8004cb0:	462b      	mov	r3, r5
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	f7fb fc4b 	bl	8000550 <__aeabi_dmul>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	4639      	mov	r1, r7
 8004cc2:	f7fb fc45 	bl	8000550 <__aeabi_dmul>
 8004cc6:	465a      	mov	r2, fp
 8004cc8:	4604      	mov	r4, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	464b      	mov	r3, r9
 8004cce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cd2:	f7fb fa87 	bl	80001e4 <__adddf3>
 8004cd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004cda:	f7fb fc39 	bl	8000550 <__aeabi_dmul>
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	f7fb fa7f 	bl	80001e4 <__adddf3>
 8004ce6:	465a      	mov	r2, fp
 8004ce8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004cec:	464b      	mov	r3, r9
 8004cee:	4658      	mov	r0, fp
 8004cf0:	4649      	mov	r1, r9
 8004cf2:	f7fb fc2d 	bl	8000550 <__aeabi_dmul>
 8004cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8004ea0 <__ieee754_pow+0x798>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	4606      	mov	r6, r0
 8004cfc:	460f      	mov	r7, r1
 8004cfe:	f7fb fa71 	bl	80001e4 <__adddf3>
 8004d02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004d06:	f7fb fa6d 	bl	80001e4 <__adddf3>
 8004d0a:	46d8      	mov	r8, fp
 8004d0c:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8004d10:	460d      	mov	r5, r1
 8004d12:	465a      	mov	r2, fp
 8004d14:	460b      	mov	r3, r1
 8004d16:	4640      	mov	r0, r8
 8004d18:	4649      	mov	r1, r9
 8004d1a:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8004d1e:	f7fb fc17 	bl	8000550 <__aeabi_dmul>
 8004d22:	465c      	mov	r4, fp
 8004d24:	4680      	mov	r8, r0
 8004d26:	4689      	mov	r9, r1
 8004d28:	4b5d      	ldr	r3, [pc, #372]	@ (8004ea0 <__ieee754_pow+0x798>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	4629      	mov	r1, r5
 8004d30:	f7fb fa56 	bl	80001e0 <__aeabi_dsub>
 8004d34:	4632      	mov	r2, r6
 8004d36:	463b      	mov	r3, r7
 8004d38:	f7fb fa52 	bl	80001e0 <__aeabi_dsub>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	460b      	mov	r3, r1
 8004d40:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8004d44:	f7fb fa4c 	bl	80001e0 <__aeabi_dsub>
 8004d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d4c:	f7fb fc00 	bl	8000550 <__aeabi_dmul>
 8004d50:	4622      	mov	r2, r4
 8004d52:	4606      	mov	r6, r0
 8004d54:	460f      	mov	r7, r1
 8004d56:	462b      	mov	r3, r5
 8004d58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d5c:	f7fb fbf8 	bl	8000550 <__aeabi_dmul>
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4630      	mov	r0, r6
 8004d66:	4639      	mov	r1, r7
 8004d68:	f7fb fa3c 	bl	80001e4 <__adddf3>
 8004d6c:	4606      	mov	r6, r0
 8004d6e:	460f      	mov	r7, r1
 8004d70:	4602      	mov	r2, r0
 8004d72:	460b      	mov	r3, r1
 8004d74:	4640      	mov	r0, r8
 8004d76:	4649      	mov	r1, r9
 8004d78:	f7fb fa34 	bl	80001e4 <__adddf3>
 8004d7c:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8004d80:	a33b      	add	r3, pc, #236	@ (adr r3, 8004e70 <__ieee754_pow+0x768>)
 8004d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d86:	4658      	mov	r0, fp
 8004d88:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8004d8c:	460d      	mov	r5, r1
 8004d8e:	f7fb fbdf 	bl	8000550 <__aeabi_dmul>
 8004d92:	465c      	mov	r4, fp
 8004d94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4629      	mov	r1, r5
 8004da0:	f7fb fa1e 	bl	80001e0 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	4630      	mov	r0, r6
 8004daa:	4639      	mov	r1, r7
 8004dac:	f7fb fa18 	bl	80001e0 <__aeabi_dsub>
 8004db0:	a331      	add	r3, pc, #196	@ (adr r3, 8004e78 <__ieee754_pow+0x770>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fbcb 	bl	8000550 <__aeabi_dmul>
 8004dba:	a331      	add	r3, pc, #196	@ (adr r3, 8004e80 <__ieee754_pow+0x778>)
 8004dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc0:	4606      	mov	r6, r0
 8004dc2:	460f      	mov	r7, r1
 8004dc4:	4620      	mov	r0, r4
 8004dc6:	4629      	mov	r1, r5
 8004dc8:	f7fb fbc2 	bl	8000550 <__aeabi_dmul>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	460b      	mov	r3, r1
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	4639      	mov	r1, r7
 8004dd4:	f7fb fa06 	bl	80001e4 <__adddf3>
 8004dd8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004dda:	4b32      	ldr	r3, [pc, #200]	@ (8004ea4 <__ieee754_pow+0x79c>)
 8004ddc:	4413      	add	r3, r2
 8004dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004de2:	f7fb f9ff 	bl	80001e4 <__adddf3>
 8004de6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004dea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004dec:	f7fb fb46 	bl	800047c <__aeabi_i2d>
 8004df0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8004df2:	4b2d      	ldr	r3, [pc, #180]	@ (8004ea8 <__ieee754_pow+0x7a0>)
 8004df4:	4413      	add	r3, r2
 8004df6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004e00:	460f      	mov	r7, r1
 8004e02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e06:	f7fb f9ed 	bl	80001e4 <__adddf3>
 8004e0a:	4642      	mov	r2, r8
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	f7fb f9e9 	bl	80001e4 <__adddf3>
 8004e12:	4632      	mov	r2, r6
 8004e14:	463b      	mov	r3, r7
 8004e16:	f7fb f9e5 	bl	80001e4 <__adddf3>
 8004e1a:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8004e1e:	4632      	mov	r2, r6
 8004e20:	463b      	mov	r3, r7
 8004e22:	4658      	mov	r0, fp
 8004e24:	460d      	mov	r5, r1
 8004e26:	f7fb f9db 	bl	80001e0 <__aeabi_dsub>
 8004e2a:	4642      	mov	r2, r8
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	f7fb f9d7 	bl	80001e0 <__aeabi_dsub>
 8004e32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e36:	f7fb f9d3 	bl	80001e0 <__aeabi_dsub>
 8004e3a:	465c      	mov	r4, fp
 8004e3c:	e036      	b.n	8004eac <__ieee754_pow+0x7a4>
 8004e3e:	bf00      	nop
 8004e40:	4a454eef 	.word	0x4a454eef
 8004e44:	3fca7e28 	.word	0x3fca7e28
 8004e48:	93c9db65 	.word	0x93c9db65
 8004e4c:	3fcd864a 	.word	0x3fcd864a
 8004e50:	a91d4101 	.word	0xa91d4101
 8004e54:	3fd17460 	.word	0x3fd17460
 8004e58:	518f264d 	.word	0x518f264d
 8004e5c:	3fd55555 	.word	0x3fd55555
 8004e60:	db6fabff 	.word	0xdb6fabff
 8004e64:	3fdb6db6 	.word	0x3fdb6db6
 8004e68:	33333303 	.word	0x33333303
 8004e6c:	3fe33333 	.word	0x3fe33333
 8004e70:	e0000000 	.word	0xe0000000
 8004e74:	3feec709 	.word	0x3feec709
 8004e78:	dc3a03fd 	.word	0xdc3a03fd
 8004e7c:	3feec709 	.word	0x3feec709
 8004e80:	145b01f5 	.word	0x145b01f5
 8004e84:	be3e2fe0 	.word	0xbe3e2fe0
 8004e88:	7ff00000 	.word	0x7ff00000
 8004e8c:	43400000 	.word	0x43400000
 8004e90:	0003988e 	.word	0x0003988e
 8004e94:	000bb679 	.word	0x000bb679
 8004e98:	08006400 	.word	0x08006400
 8004e9c:	3ff00000 	.word	0x3ff00000
 8004ea0:	40080000 	.word	0x40080000
 8004ea4:	080063e0 	.word	0x080063e0
 8004ea8:	080063f0 	.word	0x080063f0
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eb4:	e5d6      	b.n	8004a64 <__ieee754_pow+0x35c>
 8004eb6:	f04f 0a01 	mov.w	sl, #1
 8004eba:	e65e      	b.n	8004b7a <__ieee754_pow+0x472>
 8004ebc:	a3b5      	add	r3, pc, #724	@ (adr r3, 8005194 <__ieee754_pow+0xa8c>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	4630      	mov	r0, r6
 8004ec4:	4639      	mov	r1, r7
 8004ec6:	f7fb f98d 	bl	80001e4 <__adddf3>
 8004eca:	4642      	mov	r2, r8
 8004ecc:	e9cd 0100 	strd	r0, r1, [sp]
 8004ed0:	464b      	mov	r3, r9
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	4629      	mov	r1, r5
 8004ed6:	f7fb f983 	bl	80001e0 <__aeabi_dsub>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ee2:	f7fb fdc5 	bl	8000a70 <__aeabi_dcmpgt>
 8004ee6:	2800      	cmp	r0, #0
 8004ee8:	f47f adfe 	bne.w	8004ae8 <__ieee754_pow+0x3e0>
 8004eec:	4ba2      	ldr	r3, [pc, #648]	@ (8005178 <__ieee754_pow+0xa70>)
 8004eee:	e022      	b.n	8004f36 <__ieee754_pow+0x82e>
 8004ef0:	4ca2      	ldr	r4, [pc, #648]	@ (800517c <__ieee754_pow+0xa74>)
 8004ef2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004ef6:	42a3      	cmp	r3, r4
 8004ef8:	d919      	bls.n	8004f2e <__ieee754_pow+0x826>
 8004efa:	4ba1      	ldr	r3, [pc, #644]	@ (8005180 <__ieee754_pow+0xa78>)
 8004efc:	440b      	add	r3, r1
 8004efe:	4303      	orrs	r3, r0
 8004f00:	d009      	beq.n	8004f16 <__ieee754_pow+0x80e>
 8004f02:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f06:	2200      	movs	r2, #0
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f7fb fd93 	bl	8000a34 <__aeabi_dcmplt>
 8004f0e:	3800      	subs	r0, #0
 8004f10:	bf18      	it	ne
 8004f12:	2001      	movne	r0, #1
 8004f14:	e512      	b.n	800493c <__ieee754_pow+0x234>
 8004f16:	4642      	mov	r2, r8
 8004f18:	464b      	mov	r3, r9
 8004f1a:	f7fb f961 	bl	80001e0 <__aeabi_dsub>
 8004f1e:	4632      	mov	r2, r6
 8004f20:	463b      	mov	r3, r7
 8004f22:	f7fb fd9b 	bl	8000a5c <__aeabi_dcmpge>
 8004f26:	2800      	cmp	r0, #0
 8004f28:	d1eb      	bne.n	8004f02 <__ieee754_pow+0x7fa>
 8004f2a:	4b96      	ldr	r3, [pc, #600]	@ (8005184 <__ieee754_pow+0xa7c>)
 8004f2c:	e003      	b.n	8004f36 <__ieee754_pow+0x82e>
 8004f2e:	4a96      	ldr	r2, [pc, #600]	@ (8005188 <__ieee754_pow+0xa80>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	f240 80e7 	bls.w	8005104 <__ieee754_pow+0x9fc>
 8004f36:	151b      	asrs	r3, r3, #20
 8004f38:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 8004f3c:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 8004f40:	fa4a fa03 	asr.w	sl, sl, r3
 8004f44:	44da      	add	sl, fp
 8004f46:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8004f4a:	4890      	ldr	r0, [pc, #576]	@ (800518c <__ieee754_pow+0xa84>)
 8004f4c:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8004f50:	4108      	asrs	r0, r1
 8004f52:	ea00 030a 	and.w	r3, r0, sl
 8004f56:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8004f5a:	f1c1 0114 	rsb	r1, r1, #20
 8004f5e:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8004f62:	fa4a fa01 	asr.w	sl, sl, r1
 8004f66:	f1bb 0f00 	cmp.w	fp, #0
 8004f6a:	4640      	mov	r0, r8
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	f04f 0200 	mov.w	r2, #0
 8004f72:	bfb8      	it	lt
 8004f74:	f1ca 0a00 	rsblt	sl, sl, #0
 8004f78:	f7fb f932 	bl	80001e0 <__aeabi_dsub>
 8004f7c:	4680      	mov	r8, r0
 8004f7e:	4689      	mov	r9, r1
 8004f80:	4632      	mov	r2, r6
 8004f82:	463b      	mov	r3, r7
 8004f84:	4640      	mov	r0, r8
 8004f86:	4649      	mov	r1, r9
 8004f88:	f7fb f92c 	bl	80001e4 <__adddf3>
 8004f8c:	2400      	movs	r4, #0
 8004f8e:	a36a      	add	r3, pc, #424	@ (adr r3, 8005138 <__ieee754_pow+0xa30>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	4620      	mov	r0, r4
 8004f96:	460d      	mov	r5, r1
 8004f98:	f7fb fada 	bl	8000550 <__aeabi_dmul>
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa2:	464b      	mov	r3, r9
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	f7fb f91a 	bl	80001e0 <__aeabi_dsub>
 8004fac:	4602      	mov	r2, r0
 8004fae:	460b      	mov	r3, r1
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	4639      	mov	r1, r7
 8004fb4:	f7fb f914 	bl	80001e0 <__aeabi_dsub>
 8004fb8:	a361      	add	r3, pc, #388	@ (adr r3, 8005140 <__ieee754_pow+0xa38>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb fac7 	bl	8000550 <__aeabi_dmul>
 8004fc2:	a361      	add	r3, pc, #388	@ (adr r3, 8005148 <__ieee754_pow+0xa40>)
 8004fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fc8:	4680      	mov	r8, r0
 8004fca:	4689      	mov	r9, r1
 8004fcc:	4620      	mov	r0, r4
 8004fce:	4629      	mov	r1, r5
 8004fd0:	f7fb fabe 	bl	8000550 <__aeabi_dmul>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4649      	mov	r1, r9
 8004fdc:	f7fb f902 	bl	80001e4 <__adddf3>
 8004fe0:	4604      	mov	r4, r0
 8004fe2:	460d      	mov	r5, r1
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	460b      	mov	r3, r1
 8004fe8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fec:	f7fb f8fa 	bl	80001e4 <__adddf3>
 8004ff0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ff4:	4680      	mov	r8, r0
 8004ff6:	4689      	mov	r9, r1
 8004ff8:	f7fb f8f2 	bl	80001e0 <__aeabi_dsub>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4620      	mov	r0, r4
 8005002:	4629      	mov	r1, r5
 8005004:	f7fb f8ec 	bl	80001e0 <__aeabi_dsub>
 8005008:	4642      	mov	r2, r8
 800500a:	4606      	mov	r6, r0
 800500c:	460f      	mov	r7, r1
 800500e:	464b      	mov	r3, r9
 8005010:	4640      	mov	r0, r8
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb fa9c 	bl	8000550 <__aeabi_dmul>
 8005018:	a34d      	add	r3, pc, #308	@ (adr r3, 8005150 <__ieee754_pow+0xa48>)
 800501a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501e:	4604      	mov	r4, r0
 8005020:	460d      	mov	r5, r1
 8005022:	f7fb fa95 	bl	8000550 <__aeabi_dmul>
 8005026:	a34c      	add	r3, pc, #304	@ (adr r3, 8005158 <__ieee754_pow+0xa50>)
 8005028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502c:	f7fb f8d8 	bl	80001e0 <__aeabi_dsub>
 8005030:	4622      	mov	r2, r4
 8005032:	462b      	mov	r3, r5
 8005034:	f7fb fa8c 	bl	8000550 <__aeabi_dmul>
 8005038:	a349      	add	r3, pc, #292	@ (adr r3, 8005160 <__ieee754_pow+0xa58>)
 800503a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800503e:	f7fb f8d1 	bl	80001e4 <__adddf3>
 8005042:	4622      	mov	r2, r4
 8005044:	462b      	mov	r3, r5
 8005046:	f7fb fa83 	bl	8000550 <__aeabi_dmul>
 800504a:	a347      	add	r3, pc, #284	@ (adr r3, 8005168 <__ieee754_pow+0xa60>)
 800504c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005050:	f7fb f8c6 	bl	80001e0 <__aeabi_dsub>
 8005054:	4622      	mov	r2, r4
 8005056:	462b      	mov	r3, r5
 8005058:	f7fb fa7a 	bl	8000550 <__aeabi_dmul>
 800505c:	a344      	add	r3, pc, #272	@ (adr r3, 8005170 <__ieee754_pow+0xa68>)
 800505e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005062:	f7fb f8bf 	bl	80001e4 <__adddf3>
 8005066:	4622      	mov	r2, r4
 8005068:	462b      	mov	r3, r5
 800506a:	f7fb fa71 	bl	8000550 <__aeabi_dmul>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	4640      	mov	r0, r8
 8005074:	4649      	mov	r1, r9
 8005076:	f7fb f8b3 	bl	80001e0 <__aeabi_dsub>
 800507a:	4604      	mov	r4, r0
 800507c:	460d      	mov	r5, r1
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	4640      	mov	r0, r8
 8005084:	4649      	mov	r1, r9
 8005086:	f7fb fa63 	bl	8000550 <__aeabi_dmul>
 800508a:	2200      	movs	r2, #0
 800508c:	e9cd 0100 	strd	r0, r1, [sp]
 8005090:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005094:	4620      	mov	r0, r4
 8005096:	4629      	mov	r1, r5
 8005098:	f7fb f8a2 	bl	80001e0 <__aeabi_dsub>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050a4:	f7fb fb7e 	bl	80007a4 <__aeabi_ddiv>
 80050a8:	4632      	mov	r2, r6
 80050aa:	4604      	mov	r4, r0
 80050ac:	460d      	mov	r5, r1
 80050ae:	463b      	mov	r3, r7
 80050b0:	4640      	mov	r0, r8
 80050b2:	4649      	mov	r1, r9
 80050b4:	f7fb fa4c 	bl	8000550 <__aeabi_dmul>
 80050b8:	4632      	mov	r2, r6
 80050ba:	463b      	mov	r3, r7
 80050bc:	f7fb f892 	bl	80001e4 <__adddf3>
 80050c0:	4602      	mov	r2, r0
 80050c2:	460b      	mov	r3, r1
 80050c4:	4620      	mov	r0, r4
 80050c6:	4629      	mov	r1, r5
 80050c8:	f7fb f88a 	bl	80001e0 <__aeabi_dsub>
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	f7fb f886 	bl	80001e0 <__aeabi_dsub>
 80050d4:	460b      	mov	r3, r1
 80050d6:	4602      	mov	r2, r0
 80050d8:	492d      	ldr	r1, [pc, #180]	@ (8005190 <__ieee754_pow+0xa88>)
 80050da:	2000      	movs	r0, #0
 80050dc:	f7fb f880 	bl	80001e0 <__aeabi_dsub>
 80050e0:	ec41 0b10 	vmov	d0, r0, r1
 80050e4:	ee10 3a90 	vmov	r3, s1
 80050e8:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80050ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f0:	da0b      	bge.n	800510a <__ieee754_pow+0xa02>
 80050f2:	4650      	mov	r0, sl
 80050f4:	f000 fbe8 	bl	80058c8 <scalbn>
 80050f8:	ec51 0b10 	vmov	r0, r1, d0
 80050fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005100:	f7ff bb6d 	b.w	80047de <__ieee754_pow+0xd6>
 8005104:	f8dd a010 	ldr.w	sl, [sp, #16]
 8005108:	e73a      	b.n	8004f80 <__ieee754_pow+0x878>
 800510a:	ec51 0b10 	vmov	r0, r1, d0
 800510e:	4619      	mov	r1, r3
 8005110:	e7f4      	b.n	80050fc <__ieee754_pow+0x9f4>
 8005112:	491f      	ldr	r1, [pc, #124]	@ (8005190 <__ieee754_pow+0xa88>)
 8005114:	2000      	movs	r0, #0
 8005116:	f7ff bb14 	b.w	8004742 <__ieee754_pow+0x3a>
 800511a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800511e:	f7ff bb10 	b.w	8004742 <__ieee754_pow+0x3a>
 8005122:	4630      	mov	r0, r6
 8005124:	4639      	mov	r1, r7
 8005126:	f7ff bb0c 	b.w	8004742 <__ieee754_pow+0x3a>
 800512a:	460c      	mov	r4, r1
 800512c:	f7ff bb69 	b.w	8004802 <__ieee754_pow+0xfa>
 8005130:	2400      	movs	r4, #0
 8005132:	f7ff bb4b 	b.w	80047cc <__ieee754_pow+0xc4>
 8005136:	bf00      	nop
 8005138:	00000000 	.word	0x00000000
 800513c:	3fe62e43 	.word	0x3fe62e43
 8005140:	fefa39ef 	.word	0xfefa39ef
 8005144:	3fe62e42 	.word	0x3fe62e42
 8005148:	0ca86c39 	.word	0x0ca86c39
 800514c:	be205c61 	.word	0xbe205c61
 8005150:	72bea4d0 	.word	0x72bea4d0
 8005154:	3e663769 	.word	0x3e663769
 8005158:	c5d26bf1 	.word	0xc5d26bf1
 800515c:	3ebbbd41 	.word	0x3ebbbd41
 8005160:	af25de2c 	.word	0xaf25de2c
 8005164:	3f11566a 	.word	0x3f11566a
 8005168:	16bebd93 	.word	0x16bebd93
 800516c:	3f66c16c 	.word	0x3f66c16c
 8005170:	5555553e 	.word	0x5555553e
 8005174:	3fc55555 	.word	0x3fc55555
 8005178:	40900000 	.word	0x40900000
 800517c:	4090cbff 	.word	0x4090cbff
 8005180:	3f6f3400 	.word	0x3f6f3400
 8005184:	4090cc00 	.word	0x4090cc00
 8005188:	3fe00000 	.word	0x3fe00000
 800518c:	fff00000 	.word	0xfff00000
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	652b82fe 	.word	0x652b82fe
 8005198:	3c971547 	.word	0x3c971547
 800519c:	00000000 	.word	0x00000000

080051a0 <__ieee754_rem_pio2>:
 80051a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051a4:	ec57 6b10 	vmov	r6, r7, d0
 80051a8:	4bc5      	ldr	r3, [pc, #788]	@ (80054c0 <__ieee754_rem_pio2+0x320>)
 80051aa:	b08d      	sub	sp, #52	@ 0x34
 80051ac:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80051b0:	4598      	cmp	r8, r3
 80051b2:	4604      	mov	r4, r0
 80051b4:	9704      	str	r7, [sp, #16]
 80051b6:	d807      	bhi.n	80051c8 <__ieee754_rem_pio2+0x28>
 80051b8:	2200      	movs	r2, #0
 80051ba:	2300      	movs	r3, #0
 80051bc:	ed80 0b00 	vstr	d0, [r0]
 80051c0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80051c4:	2500      	movs	r5, #0
 80051c6:	e028      	b.n	800521a <__ieee754_rem_pio2+0x7a>
 80051c8:	4bbe      	ldr	r3, [pc, #760]	@ (80054c4 <__ieee754_rem_pio2+0x324>)
 80051ca:	4598      	cmp	r8, r3
 80051cc:	d878      	bhi.n	80052c0 <__ieee754_rem_pio2+0x120>
 80051ce:	9b04      	ldr	r3, [sp, #16]
 80051d0:	4dbd      	ldr	r5, [pc, #756]	@ (80054c8 <__ieee754_rem_pio2+0x328>)
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	4630      	mov	r0, r6
 80051d6:	a3ac      	add	r3, pc, #688	@ (adr r3, 8005488 <__ieee754_rem_pio2+0x2e8>)
 80051d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051dc:	4639      	mov	r1, r7
 80051de:	dd38      	ble.n	8005252 <__ieee754_rem_pio2+0xb2>
 80051e0:	f7fa fffe 	bl	80001e0 <__aeabi_dsub>
 80051e4:	45a8      	cmp	r8, r5
 80051e6:	4606      	mov	r6, r0
 80051e8:	460f      	mov	r7, r1
 80051ea:	d01a      	beq.n	8005222 <__ieee754_rem_pio2+0x82>
 80051ec:	a3a8      	add	r3, pc, #672	@ (adr r3, 8005490 <__ieee754_rem_pio2+0x2f0>)
 80051ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051f2:	f7fa fff5 	bl	80001e0 <__aeabi_dsub>
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	4680      	mov	r8, r0
 80051fc:	4689      	mov	r9, r1
 80051fe:	4630      	mov	r0, r6
 8005200:	4639      	mov	r1, r7
 8005202:	f7fa ffed 	bl	80001e0 <__aeabi_dsub>
 8005206:	a3a2      	add	r3, pc, #648	@ (adr r3, 8005490 <__ieee754_rem_pio2+0x2f0>)
 8005208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800520c:	f7fa ffe8 	bl	80001e0 <__aeabi_dsub>
 8005210:	e9c4 8900 	strd	r8, r9, [r4]
 8005214:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005218:	2501      	movs	r5, #1
 800521a:	4628      	mov	r0, r5
 800521c:	b00d      	add	sp, #52	@ 0x34
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	a39d      	add	r3, pc, #628	@ (adr r3, 8005498 <__ieee754_rem_pio2+0x2f8>)
 8005224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005228:	f7fa ffda 	bl	80001e0 <__aeabi_dsub>
 800522c:	a39c      	add	r3, pc, #624	@ (adr r3, 80054a0 <__ieee754_rem_pio2+0x300>)
 800522e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005232:	4606      	mov	r6, r0
 8005234:	460f      	mov	r7, r1
 8005236:	f7fa ffd3 	bl	80001e0 <__aeabi_dsub>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4680      	mov	r8, r0
 8005240:	4689      	mov	r9, r1
 8005242:	4630      	mov	r0, r6
 8005244:	4639      	mov	r1, r7
 8005246:	f7fa ffcb 	bl	80001e0 <__aeabi_dsub>
 800524a:	a395      	add	r3, pc, #596	@ (adr r3, 80054a0 <__ieee754_rem_pio2+0x300>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	e7dc      	b.n	800520c <__ieee754_rem_pio2+0x6c>
 8005252:	f7fa ffc7 	bl	80001e4 <__adddf3>
 8005256:	45a8      	cmp	r8, r5
 8005258:	4606      	mov	r6, r0
 800525a:	460f      	mov	r7, r1
 800525c:	d018      	beq.n	8005290 <__ieee754_rem_pio2+0xf0>
 800525e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005490 <__ieee754_rem_pio2+0x2f0>)
 8005260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005264:	f7fa ffbe 	bl	80001e4 <__adddf3>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4680      	mov	r8, r0
 800526e:	4689      	mov	r9, r1
 8005270:	4630      	mov	r0, r6
 8005272:	4639      	mov	r1, r7
 8005274:	f7fa ffb4 	bl	80001e0 <__aeabi_dsub>
 8005278:	a385      	add	r3, pc, #532	@ (adr r3, 8005490 <__ieee754_rem_pio2+0x2f0>)
 800527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800527e:	f7fa ffb1 	bl	80001e4 <__adddf3>
 8005282:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005286:	e9c4 8900 	strd	r8, r9, [r4]
 800528a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800528e:	e7c4      	b.n	800521a <__ieee754_rem_pio2+0x7a>
 8005290:	a381      	add	r3, pc, #516	@ (adr r3, 8005498 <__ieee754_rem_pio2+0x2f8>)
 8005292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005296:	f7fa ffa5 	bl	80001e4 <__adddf3>
 800529a:	a381      	add	r3, pc, #516	@ (adr r3, 80054a0 <__ieee754_rem_pio2+0x300>)
 800529c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a0:	4606      	mov	r6, r0
 80052a2:	460f      	mov	r7, r1
 80052a4:	f7fa ff9e 	bl	80001e4 <__adddf3>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4680      	mov	r8, r0
 80052ae:	4689      	mov	r9, r1
 80052b0:	4630      	mov	r0, r6
 80052b2:	4639      	mov	r1, r7
 80052b4:	f7fa ff94 	bl	80001e0 <__aeabi_dsub>
 80052b8:	a379      	add	r3, pc, #484	@ (adr r3, 80054a0 <__ieee754_rem_pio2+0x300>)
 80052ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052be:	e7de      	b.n	800527e <__ieee754_rem_pio2+0xde>
 80052c0:	4b82      	ldr	r3, [pc, #520]	@ (80054cc <__ieee754_rem_pio2+0x32c>)
 80052c2:	4598      	cmp	r8, r3
 80052c4:	f200 80d1 	bhi.w	800546a <__ieee754_rem_pio2+0x2ca>
 80052c8:	f7fe fd06 	bl	8003cd8 <fabs>
 80052cc:	ec57 6b10 	vmov	r6, r7, d0
 80052d0:	a375      	add	r3, pc, #468	@ (adr r3, 80054a8 <__ieee754_rem_pio2+0x308>)
 80052d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d6:	4630      	mov	r0, r6
 80052d8:	4639      	mov	r1, r7
 80052da:	f7fb f939 	bl	8000550 <__aeabi_dmul>
 80052de:	4b7c      	ldr	r3, [pc, #496]	@ (80054d0 <__ieee754_rem_pio2+0x330>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	f7fa ff7f 	bl	80001e4 <__adddf3>
 80052e6:	f7fb fbe3 	bl	8000ab0 <__aeabi_d2iz>
 80052ea:	4605      	mov	r5, r0
 80052ec:	f7fb f8c6 	bl	800047c <__aeabi_i2d>
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80052f8:	a363      	add	r3, pc, #396	@ (adr r3, 8005488 <__ieee754_rem_pio2+0x2e8>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fb f927 	bl	8000550 <__aeabi_dmul>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4630      	mov	r0, r6
 8005308:	4639      	mov	r1, r7
 800530a:	f7fa ff69 	bl	80001e0 <__aeabi_dsub>
 800530e:	a360      	add	r3, pc, #384	@ (adr r3, 8005490 <__ieee754_rem_pio2+0x2f0>)
 8005310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005314:	4682      	mov	sl, r0
 8005316:	468b      	mov	fp, r1
 8005318:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800531c:	f7fb f918 	bl	8000550 <__aeabi_dmul>
 8005320:	2d1f      	cmp	r5, #31
 8005322:	4606      	mov	r6, r0
 8005324:	460f      	mov	r7, r1
 8005326:	dc0c      	bgt.n	8005342 <__ieee754_rem_pio2+0x1a2>
 8005328:	4b6a      	ldr	r3, [pc, #424]	@ (80054d4 <__ieee754_rem_pio2+0x334>)
 800532a:	1e6a      	subs	r2, r5, #1
 800532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005330:	4543      	cmp	r3, r8
 8005332:	d006      	beq.n	8005342 <__ieee754_rem_pio2+0x1a2>
 8005334:	4632      	mov	r2, r6
 8005336:	463b      	mov	r3, r7
 8005338:	4650      	mov	r0, sl
 800533a:	4659      	mov	r1, fp
 800533c:	f7fa ff50 	bl	80001e0 <__aeabi_dsub>
 8005340:	e00e      	b.n	8005360 <__ieee754_rem_pio2+0x1c0>
 8005342:	463b      	mov	r3, r7
 8005344:	4632      	mov	r2, r6
 8005346:	4650      	mov	r0, sl
 8005348:	4659      	mov	r1, fp
 800534a:	f7fa ff49 	bl	80001e0 <__aeabi_dsub>
 800534e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005352:	9305      	str	r3, [sp, #20]
 8005354:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005358:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800535c:	2b10      	cmp	r3, #16
 800535e:	dc02      	bgt.n	8005366 <__ieee754_rem_pio2+0x1c6>
 8005360:	e9c4 0100 	strd	r0, r1, [r4]
 8005364:	e039      	b.n	80053da <__ieee754_rem_pio2+0x23a>
 8005366:	a34c      	add	r3, pc, #304	@ (adr r3, 8005498 <__ieee754_rem_pio2+0x2f8>)
 8005368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005370:	f7fb f8ee 	bl	8000550 <__aeabi_dmul>
 8005374:	4606      	mov	r6, r0
 8005376:	460f      	mov	r7, r1
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4650      	mov	r0, sl
 800537e:	4659      	mov	r1, fp
 8005380:	f7fa ff2e 	bl	80001e0 <__aeabi_dsub>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4680      	mov	r8, r0
 800538a:	4689      	mov	r9, r1
 800538c:	4650      	mov	r0, sl
 800538e:	4659      	mov	r1, fp
 8005390:	f7fa ff26 	bl	80001e0 <__aeabi_dsub>
 8005394:	4632      	mov	r2, r6
 8005396:	463b      	mov	r3, r7
 8005398:	f7fa ff22 	bl	80001e0 <__aeabi_dsub>
 800539c:	a340      	add	r3, pc, #256	@ (adr r3, 80054a0 <__ieee754_rem_pio2+0x300>)
 800539e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a2:	4606      	mov	r6, r0
 80053a4:	460f      	mov	r7, r1
 80053a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80053aa:	f7fb f8d1 	bl	8000550 <__aeabi_dmul>
 80053ae:	4632      	mov	r2, r6
 80053b0:	463b      	mov	r3, r7
 80053b2:	f7fa ff15 	bl	80001e0 <__aeabi_dsub>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4606      	mov	r6, r0
 80053bc:	460f      	mov	r7, r1
 80053be:	4640      	mov	r0, r8
 80053c0:	4649      	mov	r1, r9
 80053c2:	f7fa ff0d 	bl	80001e0 <__aeabi_dsub>
 80053c6:	9a05      	ldr	r2, [sp, #20]
 80053c8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80053cc:	1ad3      	subs	r3, r2, r3
 80053ce:	2b31      	cmp	r3, #49	@ 0x31
 80053d0:	dc20      	bgt.n	8005414 <__ieee754_rem_pio2+0x274>
 80053d2:	e9c4 0100 	strd	r0, r1, [r4]
 80053d6:	46c2      	mov	sl, r8
 80053d8:	46cb      	mov	fp, r9
 80053da:	e9d4 8900 	ldrd	r8, r9, [r4]
 80053de:	4650      	mov	r0, sl
 80053e0:	4642      	mov	r2, r8
 80053e2:	464b      	mov	r3, r9
 80053e4:	4659      	mov	r1, fp
 80053e6:	f7fa fefb 	bl	80001e0 <__aeabi_dsub>
 80053ea:	463b      	mov	r3, r7
 80053ec:	4632      	mov	r2, r6
 80053ee:	f7fa fef7 	bl	80001e0 <__aeabi_dsub>
 80053f2:	9b04      	ldr	r3, [sp, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053fa:	f6bf af0e 	bge.w	800521a <__ieee754_rem_pio2+0x7a>
 80053fe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005402:	6063      	str	r3, [r4, #4]
 8005404:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005408:	f8c4 8000 	str.w	r8, [r4]
 800540c:	60a0      	str	r0, [r4, #8]
 800540e:	60e3      	str	r3, [r4, #12]
 8005410:	426d      	negs	r5, r5
 8005412:	e702      	b.n	800521a <__ieee754_rem_pio2+0x7a>
 8005414:	a326      	add	r3, pc, #152	@ (adr r3, 80054b0 <__ieee754_rem_pio2+0x310>)
 8005416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800541e:	f7fb f897 	bl	8000550 <__aeabi_dmul>
 8005422:	4606      	mov	r6, r0
 8005424:	460f      	mov	r7, r1
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4640      	mov	r0, r8
 800542c:	4649      	mov	r1, r9
 800542e:	f7fa fed7 	bl	80001e0 <__aeabi_dsub>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4682      	mov	sl, r0
 8005438:	468b      	mov	fp, r1
 800543a:	4640      	mov	r0, r8
 800543c:	4649      	mov	r1, r9
 800543e:	f7fa fecf 	bl	80001e0 <__aeabi_dsub>
 8005442:	4632      	mov	r2, r6
 8005444:	463b      	mov	r3, r7
 8005446:	f7fa fecb 	bl	80001e0 <__aeabi_dsub>
 800544a:	a31b      	add	r3, pc, #108	@ (adr r3, 80054b8 <__ieee754_rem_pio2+0x318>)
 800544c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005450:	4606      	mov	r6, r0
 8005452:	460f      	mov	r7, r1
 8005454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005458:	f7fb f87a 	bl	8000550 <__aeabi_dmul>
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	f7fa febe 	bl	80001e0 <__aeabi_dsub>
 8005464:	4606      	mov	r6, r0
 8005466:	460f      	mov	r7, r1
 8005468:	e764      	b.n	8005334 <__ieee754_rem_pio2+0x194>
 800546a:	4b1b      	ldr	r3, [pc, #108]	@ (80054d8 <__ieee754_rem_pio2+0x338>)
 800546c:	4598      	cmp	r8, r3
 800546e:	d935      	bls.n	80054dc <__ieee754_rem_pio2+0x33c>
 8005470:	4632      	mov	r2, r6
 8005472:	463b      	mov	r3, r7
 8005474:	4630      	mov	r0, r6
 8005476:	4639      	mov	r1, r7
 8005478:	f7fa feb2 	bl	80001e0 <__aeabi_dsub>
 800547c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005480:	e9c4 0100 	strd	r0, r1, [r4]
 8005484:	e69e      	b.n	80051c4 <__ieee754_rem_pio2+0x24>
 8005486:	bf00      	nop
 8005488:	54400000 	.word	0x54400000
 800548c:	3ff921fb 	.word	0x3ff921fb
 8005490:	1a626331 	.word	0x1a626331
 8005494:	3dd0b461 	.word	0x3dd0b461
 8005498:	1a600000 	.word	0x1a600000
 800549c:	3dd0b461 	.word	0x3dd0b461
 80054a0:	2e037073 	.word	0x2e037073
 80054a4:	3ba3198a 	.word	0x3ba3198a
 80054a8:	6dc9c883 	.word	0x6dc9c883
 80054ac:	3fe45f30 	.word	0x3fe45f30
 80054b0:	2e000000 	.word	0x2e000000
 80054b4:	3ba3198a 	.word	0x3ba3198a
 80054b8:	252049c1 	.word	0x252049c1
 80054bc:	397b839a 	.word	0x397b839a
 80054c0:	3fe921fb 	.word	0x3fe921fb
 80054c4:	4002d97b 	.word	0x4002d97b
 80054c8:	3ff921fb 	.word	0x3ff921fb
 80054cc:	413921fb 	.word	0x413921fb
 80054d0:	3fe00000 	.word	0x3fe00000
 80054d4:	08006410 	.word	0x08006410
 80054d8:	7fefffff 	.word	0x7fefffff
 80054dc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80054e0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80054e4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80054e8:	4630      	mov	r0, r6
 80054ea:	460f      	mov	r7, r1
 80054ec:	f7fb fae0 	bl	8000ab0 <__aeabi_d2iz>
 80054f0:	f7fa ffc4 	bl	800047c <__aeabi_i2d>
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	4630      	mov	r0, r6
 80054fa:	4639      	mov	r1, r7
 80054fc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005500:	f7fa fe6e 	bl	80001e0 <__aeabi_dsub>
 8005504:	4b22      	ldr	r3, [pc, #136]	@ (8005590 <__ieee754_rem_pio2+0x3f0>)
 8005506:	2200      	movs	r2, #0
 8005508:	f7fb f822 	bl	8000550 <__aeabi_dmul>
 800550c:	460f      	mov	r7, r1
 800550e:	4606      	mov	r6, r0
 8005510:	f7fb face 	bl	8000ab0 <__aeabi_d2iz>
 8005514:	f7fa ffb2 	bl	800047c <__aeabi_i2d>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005524:	f7fa fe5c 	bl	80001e0 <__aeabi_dsub>
 8005528:	4b19      	ldr	r3, [pc, #100]	@ (8005590 <__ieee754_rem_pio2+0x3f0>)
 800552a:	2200      	movs	r2, #0
 800552c:	f7fb f810 	bl	8000550 <__aeabi_dmul>
 8005530:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005534:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005538:	f04f 0803 	mov.w	r8, #3
 800553c:	2600      	movs	r6, #0
 800553e:	2700      	movs	r7, #0
 8005540:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005544:	4632      	mov	r2, r6
 8005546:	463b      	mov	r3, r7
 8005548:	46c2      	mov	sl, r8
 800554a:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800554e:	f7fb fa67 	bl	8000a20 <__aeabi_dcmpeq>
 8005552:	2800      	cmp	r0, #0
 8005554:	d1f4      	bne.n	8005540 <__ieee754_rem_pio2+0x3a0>
 8005556:	4b0f      	ldr	r3, [pc, #60]	@ (8005594 <__ieee754_rem_pio2+0x3f4>)
 8005558:	9301      	str	r3, [sp, #4]
 800555a:	2302      	movs	r3, #2
 800555c:	9300      	str	r3, [sp, #0]
 800555e:	462a      	mov	r2, r5
 8005560:	4653      	mov	r3, sl
 8005562:	4621      	mov	r1, r4
 8005564:	a806      	add	r0, sp, #24
 8005566:	f000 fb3f 	bl	8005be8 <__kernel_rem_pio2>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	4605      	mov	r5, r0
 8005570:	f6bf ae53 	bge.w	800521a <__ieee754_rem_pio2+0x7a>
 8005574:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005578:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800557c:	e9c4 2300 	strd	r2, r3, [r4]
 8005580:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005584:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005588:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800558c:	e740      	b.n	8005410 <__ieee754_rem_pio2+0x270>
 800558e:	bf00      	nop
 8005590:	41700000 	.word	0x41700000
 8005594:	08006490 	.word	0x08006490

08005598 <atan>:
 8005598:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	ec55 4b10 	vmov	r4, r5, d0
 80055a0:	4bbf      	ldr	r3, [pc, #764]	@ (80058a0 <atan+0x308>)
 80055a2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 80055a6:	429e      	cmp	r6, r3
 80055a8:	46ab      	mov	fp, r5
 80055aa:	d918      	bls.n	80055de <atan+0x46>
 80055ac:	4bbd      	ldr	r3, [pc, #756]	@ (80058a4 <atan+0x30c>)
 80055ae:	429e      	cmp	r6, r3
 80055b0:	d801      	bhi.n	80055b6 <atan+0x1e>
 80055b2:	d109      	bne.n	80055c8 <atan+0x30>
 80055b4:	b144      	cbz	r4, 80055c8 <atan+0x30>
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fa fe11 	bl	80001e4 <__adddf3>
 80055c2:	4604      	mov	r4, r0
 80055c4:	460d      	mov	r5, r1
 80055c6:	e006      	b.n	80055d6 <atan+0x3e>
 80055c8:	f1bb 0f00 	cmp.w	fp, #0
 80055cc:	f340 812b 	ble.w	8005826 <atan+0x28e>
 80055d0:	a597      	add	r5, pc, #604	@ (adr r5, 8005830 <atan+0x298>)
 80055d2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80055d6:	ec45 4b10 	vmov	d0, r4, r5
 80055da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055de:	4bb2      	ldr	r3, [pc, #712]	@ (80058a8 <atan+0x310>)
 80055e0:	429e      	cmp	r6, r3
 80055e2:	d813      	bhi.n	800560c <atan+0x74>
 80055e4:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 80055e8:	429e      	cmp	r6, r3
 80055ea:	d80c      	bhi.n	8005606 <atan+0x6e>
 80055ec:	a392      	add	r3, pc, #584	@ (adr r3, 8005838 <atan+0x2a0>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	4620      	mov	r0, r4
 80055f4:	4629      	mov	r1, r5
 80055f6:	f7fa fdf5 	bl	80001e4 <__adddf3>
 80055fa:	4bac      	ldr	r3, [pc, #688]	@ (80058ac <atan+0x314>)
 80055fc:	2200      	movs	r2, #0
 80055fe:	f7fb fa37 	bl	8000a70 <__aeabi_dcmpgt>
 8005602:	2800      	cmp	r0, #0
 8005604:	d1e7      	bne.n	80055d6 <atan+0x3e>
 8005606:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800560a:	e029      	b.n	8005660 <atan+0xc8>
 800560c:	f7fe fb64 	bl	8003cd8 <fabs>
 8005610:	4ba7      	ldr	r3, [pc, #668]	@ (80058b0 <atan+0x318>)
 8005612:	429e      	cmp	r6, r3
 8005614:	ec55 4b10 	vmov	r4, r5, d0
 8005618:	f200 80bc 	bhi.w	8005794 <atan+0x1fc>
 800561c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8005620:	429e      	cmp	r6, r3
 8005622:	f200 809e 	bhi.w	8005762 <atan+0x1ca>
 8005626:	4622      	mov	r2, r4
 8005628:	462b      	mov	r3, r5
 800562a:	4620      	mov	r0, r4
 800562c:	4629      	mov	r1, r5
 800562e:	f7fa fdd9 	bl	80001e4 <__adddf3>
 8005632:	4b9e      	ldr	r3, [pc, #632]	@ (80058ac <atan+0x314>)
 8005634:	2200      	movs	r2, #0
 8005636:	f7fa fdd3 	bl	80001e0 <__aeabi_dsub>
 800563a:	2200      	movs	r2, #0
 800563c:	4606      	mov	r6, r0
 800563e:	460f      	mov	r7, r1
 8005640:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005644:	4620      	mov	r0, r4
 8005646:	4629      	mov	r1, r5
 8005648:	f7fa fdcc 	bl	80001e4 <__adddf3>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4630      	mov	r0, r6
 8005652:	4639      	mov	r1, r7
 8005654:	f7fb f8a6 	bl	80007a4 <__aeabi_ddiv>
 8005658:	f04f 0a00 	mov.w	sl, #0
 800565c:	4604      	mov	r4, r0
 800565e:	460d      	mov	r5, r1
 8005660:	4622      	mov	r2, r4
 8005662:	462b      	mov	r3, r5
 8005664:	4620      	mov	r0, r4
 8005666:	4629      	mov	r1, r5
 8005668:	f7fa ff72 	bl	8000550 <__aeabi_dmul>
 800566c:	4602      	mov	r2, r0
 800566e:	460b      	mov	r3, r1
 8005670:	4680      	mov	r8, r0
 8005672:	4689      	mov	r9, r1
 8005674:	f7fa ff6c 	bl	8000550 <__aeabi_dmul>
 8005678:	a371      	add	r3, pc, #452	@ (adr r3, 8005840 <atan+0x2a8>)
 800567a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567e:	4606      	mov	r6, r0
 8005680:	460f      	mov	r7, r1
 8005682:	f7fa ff65 	bl	8000550 <__aeabi_dmul>
 8005686:	a370      	add	r3, pc, #448	@ (adr r3, 8005848 <atan+0x2b0>)
 8005688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800568c:	f7fa fdaa 	bl	80001e4 <__adddf3>
 8005690:	4632      	mov	r2, r6
 8005692:	463b      	mov	r3, r7
 8005694:	f7fa ff5c 	bl	8000550 <__aeabi_dmul>
 8005698:	a36d      	add	r3, pc, #436	@ (adr r3, 8005850 <atan+0x2b8>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f7fa fda1 	bl	80001e4 <__adddf3>
 80056a2:	4632      	mov	r2, r6
 80056a4:	463b      	mov	r3, r7
 80056a6:	f7fa ff53 	bl	8000550 <__aeabi_dmul>
 80056aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8005858 <atan+0x2c0>)
 80056ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b0:	f7fa fd98 	bl	80001e4 <__adddf3>
 80056b4:	4632      	mov	r2, r6
 80056b6:	463b      	mov	r3, r7
 80056b8:	f7fa ff4a 	bl	8000550 <__aeabi_dmul>
 80056bc:	a368      	add	r3, pc, #416	@ (adr r3, 8005860 <atan+0x2c8>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fa fd8f 	bl	80001e4 <__adddf3>
 80056c6:	4632      	mov	r2, r6
 80056c8:	463b      	mov	r3, r7
 80056ca:	f7fa ff41 	bl	8000550 <__aeabi_dmul>
 80056ce:	a366      	add	r3, pc, #408	@ (adr r3, 8005868 <atan+0x2d0>)
 80056d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d4:	f7fa fd86 	bl	80001e4 <__adddf3>
 80056d8:	4642      	mov	r2, r8
 80056da:	464b      	mov	r3, r9
 80056dc:	f7fa ff38 	bl	8000550 <__aeabi_dmul>
 80056e0:	a363      	add	r3, pc, #396	@ (adr r3, 8005870 <atan+0x2d8>)
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	4680      	mov	r8, r0
 80056e8:	4689      	mov	r9, r1
 80056ea:	4630      	mov	r0, r6
 80056ec:	4639      	mov	r1, r7
 80056ee:	f7fa ff2f 	bl	8000550 <__aeabi_dmul>
 80056f2:	a361      	add	r3, pc, #388	@ (adr r3, 8005878 <atan+0x2e0>)
 80056f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f8:	f7fa fd72 	bl	80001e0 <__aeabi_dsub>
 80056fc:	4632      	mov	r2, r6
 80056fe:	463b      	mov	r3, r7
 8005700:	f7fa ff26 	bl	8000550 <__aeabi_dmul>
 8005704:	a35e      	add	r3, pc, #376	@ (adr r3, 8005880 <atan+0x2e8>)
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f7fa fd69 	bl	80001e0 <__aeabi_dsub>
 800570e:	4632      	mov	r2, r6
 8005710:	463b      	mov	r3, r7
 8005712:	f7fa ff1d 	bl	8000550 <__aeabi_dmul>
 8005716:	a35c      	add	r3, pc, #368	@ (adr r3, 8005888 <atan+0x2f0>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa fd60 	bl	80001e0 <__aeabi_dsub>
 8005720:	4632      	mov	r2, r6
 8005722:	463b      	mov	r3, r7
 8005724:	f7fa ff14 	bl	8000550 <__aeabi_dmul>
 8005728:	a359      	add	r3, pc, #356	@ (adr r3, 8005890 <atan+0x2f8>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fd57 	bl	80001e0 <__aeabi_dsub>
 8005732:	4632      	mov	r2, r6
 8005734:	463b      	mov	r3, r7
 8005736:	f7fa ff0b 	bl	8000550 <__aeabi_dmul>
 800573a:	4602      	mov	r2, r0
 800573c:	460b      	mov	r3, r1
 800573e:	4640      	mov	r0, r8
 8005740:	4649      	mov	r1, r9
 8005742:	f7fa fd4f 	bl	80001e4 <__adddf3>
 8005746:	4622      	mov	r2, r4
 8005748:	462b      	mov	r3, r5
 800574a:	f7fa ff01 	bl	8000550 <__aeabi_dmul>
 800574e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 8005752:	4602      	mov	r2, r0
 8005754:	460b      	mov	r3, r1
 8005756:	d148      	bne.n	80057ea <atan+0x252>
 8005758:	4620      	mov	r0, r4
 800575a:	4629      	mov	r1, r5
 800575c:	f7fa fd40 	bl	80001e0 <__aeabi_dsub>
 8005760:	e72f      	b.n	80055c2 <atan+0x2a>
 8005762:	4b52      	ldr	r3, [pc, #328]	@ (80058ac <atan+0x314>)
 8005764:	2200      	movs	r2, #0
 8005766:	4620      	mov	r0, r4
 8005768:	4629      	mov	r1, r5
 800576a:	f7fa fd39 	bl	80001e0 <__aeabi_dsub>
 800576e:	4b4f      	ldr	r3, [pc, #316]	@ (80058ac <atan+0x314>)
 8005770:	4606      	mov	r6, r0
 8005772:	460f      	mov	r7, r1
 8005774:	2200      	movs	r2, #0
 8005776:	4620      	mov	r0, r4
 8005778:	4629      	mov	r1, r5
 800577a:	f7fa fd33 	bl	80001e4 <__adddf3>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4630      	mov	r0, r6
 8005784:	4639      	mov	r1, r7
 8005786:	f7fb f80d 	bl	80007a4 <__aeabi_ddiv>
 800578a:	f04f 0a01 	mov.w	sl, #1
 800578e:	4604      	mov	r4, r0
 8005790:	460d      	mov	r5, r1
 8005792:	e765      	b.n	8005660 <atan+0xc8>
 8005794:	4b47      	ldr	r3, [pc, #284]	@ (80058b4 <atan+0x31c>)
 8005796:	429e      	cmp	r6, r3
 8005798:	d21c      	bcs.n	80057d4 <atan+0x23c>
 800579a:	4b47      	ldr	r3, [pc, #284]	@ (80058b8 <atan+0x320>)
 800579c:	2200      	movs	r2, #0
 800579e:	4620      	mov	r0, r4
 80057a0:	4629      	mov	r1, r5
 80057a2:	f7fa fd1d 	bl	80001e0 <__aeabi_dsub>
 80057a6:	4b44      	ldr	r3, [pc, #272]	@ (80058b8 <atan+0x320>)
 80057a8:	4606      	mov	r6, r0
 80057aa:	460f      	mov	r7, r1
 80057ac:	2200      	movs	r2, #0
 80057ae:	4620      	mov	r0, r4
 80057b0:	4629      	mov	r1, r5
 80057b2:	f7fa fecd 	bl	8000550 <__aeabi_dmul>
 80057b6:	4b3d      	ldr	r3, [pc, #244]	@ (80058ac <atan+0x314>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	f7fa fd13 	bl	80001e4 <__adddf3>
 80057be:	4602      	mov	r2, r0
 80057c0:	460b      	mov	r3, r1
 80057c2:	4630      	mov	r0, r6
 80057c4:	4639      	mov	r1, r7
 80057c6:	f7fa ffed 	bl	80007a4 <__aeabi_ddiv>
 80057ca:	f04f 0a02 	mov.w	sl, #2
 80057ce:	4604      	mov	r4, r0
 80057d0:	460d      	mov	r5, r1
 80057d2:	e745      	b.n	8005660 <atan+0xc8>
 80057d4:	4622      	mov	r2, r4
 80057d6:	462b      	mov	r3, r5
 80057d8:	4938      	ldr	r1, [pc, #224]	@ (80058bc <atan+0x324>)
 80057da:	2000      	movs	r0, #0
 80057dc:	f7fa ffe2 	bl	80007a4 <__aeabi_ddiv>
 80057e0:	f04f 0a03 	mov.w	sl, #3
 80057e4:	4604      	mov	r4, r0
 80057e6:	460d      	mov	r5, r1
 80057e8:	e73a      	b.n	8005660 <atan+0xc8>
 80057ea:	4b35      	ldr	r3, [pc, #212]	@ (80058c0 <atan+0x328>)
 80057ec:	4e35      	ldr	r6, [pc, #212]	@ (80058c4 <atan+0x32c>)
 80057ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f6:	f7fa fcf3 	bl	80001e0 <__aeabi_dsub>
 80057fa:	4622      	mov	r2, r4
 80057fc:	462b      	mov	r3, r5
 80057fe:	f7fa fcef 	bl	80001e0 <__aeabi_dsub>
 8005802:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8005806:	4602      	mov	r2, r0
 8005808:	460b      	mov	r3, r1
 800580a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800580e:	f7fa fce7 	bl	80001e0 <__aeabi_dsub>
 8005812:	f1bb 0f00 	cmp.w	fp, #0
 8005816:	4604      	mov	r4, r0
 8005818:	460d      	mov	r5, r1
 800581a:	f6bf aedc 	bge.w	80055d6 <atan+0x3e>
 800581e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005822:	461d      	mov	r5, r3
 8005824:	e6d7      	b.n	80055d6 <atan+0x3e>
 8005826:	a51c      	add	r5, pc, #112	@ (adr r5, 8005898 <atan+0x300>)
 8005828:	e9d5 4500 	ldrd	r4, r5, [r5]
 800582c:	e6d3      	b.n	80055d6 <atan+0x3e>
 800582e:	bf00      	nop
 8005830:	54442d18 	.word	0x54442d18
 8005834:	3ff921fb 	.word	0x3ff921fb
 8005838:	8800759c 	.word	0x8800759c
 800583c:	7e37e43c 	.word	0x7e37e43c
 8005840:	e322da11 	.word	0xe322da11
 8005844:	3f90ad3a 	.word	0x3f90ad3a
 8005848:	24760deb 	.word	0x24760deb
 800584c:	3fa97b4b 	.word	0x3fa97b4b
 8005850:	a0d03d51 	.word	0xa0d03d51
 8005854:	3fb10d66 	.word	0x3fb10d66
 8005858:	c54c206e 	.word	0xc54c206e
 800585c:	3fb745cd 	.word	0x3fb745cd
 8005860:	920083ff 	.word	0x920083ff
 8005864:	3fc24924 	.word	0x3fc24924
 8005868:	5555550d 	.word	0x5555550d
 800586c:	3fd55555 	.word	0x3fd55555
 8005870:	2c6a6c2f 	.word	0x2c6a6c2f
 8005874:	bfa2b444 	.word	0xbfa2b444
 8005878:	52defd9a 	.word	0x52defd9a
 800587c:	3fadde2d 	.word	0x3fadde2d
 8005880:	af749a6d 	.word	0xaf749a6d
 8005884:	3fb3b0f2 	.word	0x3fb3b0f2
 8005888:	fe231671 	.word	0xfe231671
 800588c:	3fbc71c6 	.word	0x3fbc71c6
 8005890:	9998ebc4 	.word	0x9998ebc4
 8005894:	3fc99999 	.word	0x3fc99999
 8005898:	54442d18 	.word	0x54442d18
 800589c:	bff921fb 	.word	0xbff921fb
 80058a0:	440fffff 	.word	0x440fffff
 80058a4:	7ff00000 	.word	0x7ff00000
 80058a8:	3fdbffff 	.word	0x3fdbffff
 80058ac:	3ff00000 	.word	0x3ff00000
 80058b0:	3ff2ffff 	.word	0x3ff2ffff
 80058b4:	40038000 	.word	0x40038000
 80058b8:	3ff80000 	.word	0x3ff80000
 80058bc:	bff00000 	.word	0xbff00000
 80058c0:	08006598 	.word	0x08006598
 80058c4:	080065b8 	.word	0x080065b8

080058c8 <scalbn>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	ec55 4b10 	vmov	r4, r5, d0
 80058ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80058d2:	4606      	mov	r6, r0
 80058d4:	462b      	mov	r3, r5
 80058d6:	b991      	cbnz	r1, 80058fe <scalbn+0x36>
 80058d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80058dc:	4323      	orrs	r3, r4
 80058de:	d03b      	beq.n	8005958 <scalbn+0x90>
 80058e0:	4b33      	ldr	r3, [pc, #204]	@ (80059b0 <scalbn+0xe8>)
 80058e2:	4620      	mov	r0, r4
 80058e4:	4629      	mov	r1, r5
 80058e6:	2200      	movs	r2, #0
 80058e8:	f7fa fe32 	bl	8000550 <__aeabi_dmul>
 80058ec:	4b31      	ldr	r3, [pc, #196]	@ (80059b4 <scalbn+0xec>)
 80058ee:	429e      	cmp	r6, r3
 80058f0:	4604      	mov	r4, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	da0f      	bge.n	8005916 <scalbn+0x4e>
 80058f6:	a326      	add	r3, pc, #152	@ (adr r3, 8005990 <scalbn+0xc8>)
 80058f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058fc:	e01e      	b.n	800593c <scalbn+0x74>
 80058fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8005902:	4291      	cmp	r1, r2
 8005904:	d10b      	bne.n	800591e <scalbn+0x56>
 8005906:	4622      	mov	r2, r4
 8005908:	4620      	mov	r0, r4
 800590a:	4629      	mov	r1, r5
 800590c:	f7fa fc6a 	bl	80001e4 <__adddf3>
 8005910:	4604      	mov	r4, r0
 8005912:	460d      	mov	r5, r1
 8005914:	e020      	b.n	8005958 <scalbn+0x90>
 8005916:	460b      	mov	r3, r1
 8005918:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800591c:	3936      	subs	r1, #54	@ 0x36
 800591e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8005922:	4296      	cmp	r6, r2
 8005924:	dd0d      	ble.n	8005942 <scalbn+0x7a>
 8005926:	2d00      	cmp	r5, #0
 8005928:	a11b      	add	r1, pc, #108	@ (adr r1, 8005998 <scalbn+0xd0>)
 800592a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800592e:	da02      	bge.n	8005936 <scalbn+0x6e>
 8005930:	a11b      	add	r1, pc, #108	@ (adr r1, 80059a0 <scalbn+0xd8>)
 8005932:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005936:	a318      	add	r3, pc, #96	@ (adr r3, 8005998 <scalbn+0xd0>)
 8005938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800593c:	f7fa fe08 	bl	8000550 <__aeabi_dmul>
 8005940:	e7e6      	b.n	8005910 <scalbn+0x48>
 8005942:	1872      	adds	r2, r6, r1
 8005944:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005948:	428a      	cmp	r2, r1
 800594a:	dcec      	bgt.n	8005926 <scalbn+0x5e>
 800594c:	2a00      	cmp	r2, #0
 800594e:	dd06      	ble.n	800595e <scalbn+0x96>
 8005950:	f36f 531e 	bfc	r3, #20, #11
 8005954:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005958:	ec45 4b10 	vmov	d0, r4, r5
 800595c:	bd70      	pop	{r4, r5, r6, pc}
 800595e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005962:	da08      	bge.n	8005976 <scalbn+0xae>
 8005964:	2d00      	cmp	r5, #0
 8005966:	a10a      	add	r1, pc, #40	@ (adr r1, 8005990 <scalbn+0xc8>)
 8005968:	e9d1 0100 	ldrd	r0, r1, [r1]
 800596c:	dac3      	bge.n	80058f6 <scalbn+0x2e>
 800596e:	a10e      	add	r1, pc, #56	@ (adr r1, 80059a8 <scalbn+0xe0>)
 8005970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005974:	e7bf      	b.n	80058f6 <scalbn+0x2e>
 8005976:	3236      	adds	r2, #54	@ 0x36
 8005978:	f36f 531e 	bfc	r3, #20, #11
 800597c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005980:	4620      	mov	r0, r4
 8005982:	4b0d      	ldr	r3, [pc, #52]	@ (80059b8 <scalbn+0xf0>)
 8005984:	4629      	mov	r1, r5
 8005986:	2200      	movs	r2, #0
 8005988:	e7d8      	b.n	800593c <scalbn+0x74>
 800598a:	bf00      	nop
 800598c:	f3af 8000 	nop.w
 8005990:	c2f8f359 	.word	0xc2f8f359
 8005994:	01a56e1f 	.word	0x01a56e1f
 8005998:	8800759c 	.word	0x8800759c
 800599c:	7e37e43c 	.word	0x7e37e43c
 80059a0:	8800759c 	.word	0x8800759c
 80059a4:	fe37e43c 	.word	0xfe37e43c
 80059a8:	c2f8f359 	.word	0xc2f8f359
 80059ac:	81a56e1f 	.word	0x81a56e1f
 80059b0:	43500000 	.word	0x43500000
 80059b4:	ffff3cb0 	.word	0xffff3cb0
 80059b8:	3c900000 	.word	0x3c900000

080059bc <with_errno>:
 80059bc:	b510      	push	{r4, lr}
 80059be:	ed2d 8b02 	vpush	{d8}
 80059c2:	eeb0 8a40 	vmov.f32	s16, s0
 80059c6:	eef0 8a60 	vmov.f32	s17, s1
 80059ca:	4604      	mov	r4, r0
 80059cc:	f7fe f860 	bl	8003a90 <__errno>
 80059d0:	eeb0 0a48 	vmov.f32	s0, s16
 80059d4:	eef0 0a68 	vmov.f32	s1, s17
 80059d8:	ecbd 8b02 	vpop	{d8}
 80059dc:	6004      	str	r4, [r0, #0]
 80059de:	bd10      	pop	{r4, pc}

080059e0 <xflow>:
 80059e0:	4603      	mov	r3, r0
 80059e2:	b507      	push	{r0, r1, r2, lr}
 80059e4:	ec51 0b10 	vmov	r0, r1, d0
 80059e8:	b183      	cbz	r3, 8005a0c <xflow+0x2c>
 80059ea:	4602      	mov	r2, r0
 80059ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80059f0:	e9cd 2300 	strd	r2, r3, [sp]
 80059f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80059f8:	f7fa fdaa 	bl	8000550 <__aeabi_dmul>
 80059fc:	ec41 0b10 	vmov	d0, r0, r1
 8005a00:	2022      	movs	r0, #34	@ 0x22
 8005a02:	b003      	add	sp, #12
 8005a04:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a08:	f7ff bfd8 	b.w	80059bc <with_errno>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	460b      	mov	r3, r1
 8005a10:	e7ee      	b.n	80059f0 <xflow+0x10>
 8005a12:	0000      	movs	r0, r0
 8005a14:	0000      	movs	r0, r0
	...

08005a18 <__math_uflow>:
 8005a18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005a20 <__math_uflow+0x8>
 8005a1c:	f7ff bfe0 	b.w	80059e0 <xflow>
 8005a20:	00000000 	.word	0x00000000
 8005a24:	10000000 	.word	0x10000000

08005a28 <__math_oflow>:
 8005a28:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005a30 <__math_oflow+0x8>
 8005a2c:	f7ff bfd8 	b.w	80059e0 <xflow>
 8005a30:	00000000 	.word	0x00000000
 8005a34:	70000000 	.word	0x70000000

08005a38 <__ieee754_sqrt>:
 8005a38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a3c:	4a66      	ldr	r2, [pc, #408]	@ (8005bd8 <__ieee754_sqrt+0x1a0>)
 8005a3e:	ec55 4b10 	vmov	r4, r5, d0
 8005a42:	43aa      	bics	r2, r5
 8005a44:	462b      	mov	r3, r5
 8005a46:	4621      	mov	r1, r4
 8005a48:	d110      	bne.n	8005a6c <__ieee754_sqrt+0x34>
 8005a4a:	4622      	mov	r2, r4
 8005a4c:	4620      	mov	r0, r4
 8005a4e:	4629      	mov	r1, r5
 8005a50:	f7fa fd7e 	bl	8000550 <__aeabi_dmul>
 8005a54:	4602      	mov	r2, r0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fbc2 	bl	80001e4 <__adddf3>
 8005a60:	4604      	mov	r4, r0
 8005a62:	460d      	mov	r5, r1
 8005a64:	ec45 4b10 	vmov	d0, r4, r5
 8005a68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a6c:	2d00      	cmp	r5, #0
 8005a6e:	dc0e      	bgt.n	8005a8e <__ieee754_sqrt+0x56>
 8005a70:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8005a74:	4322      	orrs	r2, r4
 8005a76:	d0f5      	beq.n	8005a64 <__ieee754_sqrt+0x2c>
 8005a78:	b19d      	cbz	r5, 8005aa2 <__ieee754_sqrt+0x6a>
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	4620      	mov	r0, r4
 8005a7e:	4629      	mov	r1, r5
 8005a80:	f7fa fbae 	bl	80001e0 <__aeabi_dsub>
 8005a84:	4602      	mov	r2, r0
 8005a86:	460b      	mov	r3, r1
 8005a88:	f7fa fe8c 	bl	80007a4 <__aeabi_ddiv>
 8005a8c:	e7e8      	b.n	8005a60 <__ieee754_sqrt+0x28>
 8005a8e:	152a      	asrs	r2, r5, #20
 8005a90:	d115      	bne.n	8005abe <__ieee754_sqrt+0x86>
 8005a92:	2000      	movs	r0, #0
 8005a94:	e009      	b.n	8005aaa <__ieee754_sqrt+0x72>
 8005a96:	0acb      	lsrs	r3, r1, #11
 8005a98:	3a15      	subs	r2, #21
 8005a9a:	0549      	lsls	r1, r1, #21
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0fa      	beq.n	8005a96 <__ieee754_sqrt+0x5e>
 8005aa0:	e7f7      	b.n	8005a92 <__ieee754_sqrt+0x5a>
 8005aa2:	462a      	mov	r2, r5
 8005aa4:	e7fa      	b.n	8005a9c <__ieee754_sqrt+0x64>
 8005aa6:	005b      	lsls	r3, r3, #1
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	02dc      	lsls	r4, r3, #11
 8005aac:	d5fb      	bpl.n	8005aa6 <__ieee754_sqrt+0x6e>
 8005aae:	1e44      	subs	r4, r0, #1
 8005ab0:	1b12      	subs	r2, r2, r4
 8005ab2:	f1c0 0420 	rsb	r4, r0, #32
 8005ab6:	fa21 f404 	lsr.w	r4, r1, r4
 8005aba:	4323      	orrs	r3, r4
 8005abc:	4081      	lsls	r1, r0
 8005abe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ac2:	f2a2 37ff 	subw	r7, r2, #1023	@ 0x3ff
 8005ac6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aca:	07d2      	lsls	r2, r2, #31
 8005acc:	bf5c      	itt	pl
 8005ace:	005b      	lslpl	r3, r3, #1
 8005ad0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8005ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005ad8:	bf58      	it	pl
 8005ada:	0049      	lslpl	r1, r1, #1
 8005adc:	2600      	movs	r6, #0
 8005ade:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8005ae2:	107f      	asrs	r7, r7, #1
 8005ae4:	0049      	lsls	r1, r1, #1
 8005ae6:	2016      	movs	r0, #22
 8005ae8:	4632      	mov	r2, r6
 8005aea:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8005aee:	1915      	adds	r5, r2, r4
 8005af0:	429d      	cmp	r5, r3
 8005af2:	bfde      	ittt	le
 8005af4:	192a      	addle	r2, r5, r4
 8005af6:	1b5b      	suble	r3, r3, r5
 8005af8:	1936      	addle	r6, r6, r4
 8005afa:	0fcd      	lsrs	r5, r1, #31
 8005afc:	3801      	subs	r0, #1
 8005afe:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8005b02:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b06:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005b0a:	d1f0      	bne.n	8005aee <__ieee754_sqrt+0xb6>
 8005b0c:	4605      	mov	r5, r0
 8005b0e:	2420      	movs	r4, #32
 8005b10:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8005b14:	4293      	cmp	r3, r2
 8005b16:	eb0c 0e00 	add.w	lr, ip, r0
 8005b1a:	dc02      	bgt.n	8005b22 <__ieee754_sqrt+0xea>
 8005b1c:	d113      	bne.n	8005b46 <__ieee754_sqrt+0x10e>
 8005b1e:	458e      	cmp	lr, r1
 8005b20:	d811      	bhi.n	8005b46 <__ieee754_sqrt+0x10e>
 8005b22:	f1be 0f00 	cmp.w	lr, #0
 8005b26:	eb0e 000c 	add.w	r0, lr, ip
 8005b2a:	da3f      	bge.n	8005bac <__ieee754_sqrt+0x174>
 8005b2c:	2800      	cmp	r0, #0
 8005b2e:	db3d      	blt.n	8005bac <__ieee754_sqrt+0x174>
 8005b30:	f102 0801 	add.w	r8, r2, #1
 8005b34:	1a9b      	subs	r3, r3, r2
 8005b36:	458e      	cmp	lr, r1
 8005b38:	bf88      	it	hi
 8005b3a:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 8005b3e:	eba1 010e 	sub.w	r1, r1, lr
 8005b42:	4465      	add	r5, ip
 8005b44:	4642      	mov	r2, r8
 8005b46:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8005b4a:	3c01      	subs	r4, #1
 8005b4c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8005b50:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005b54:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8005b58:	d1dc      	bne.n	8005b14 <__ieee754_sqrt+0xdc>
 8005b5a:	4319      	orrs	r1, r3
 8005b5c:	d01b      	beq.n	8005b96 <__ieee754_sqrt+0x15e>
 8005b5e:	f8df a07c 	ldr.w	sl, [pc, #124]	@ 8005bdc <__ieee754_sqrt+0x1a4>
 8005b62:	f8df b07c 	ldr.w	fp, [pc, #124]	@ 8005be0 <__ieee754_sqrt+0x1a8>
 8005b66:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b6a:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b6e:	f7fa fb37 	bl	80001e0 <__aeabi_dsub>
 8005b72:	e9da 8900 	ldrd	r8, r9, [sl]
 8005b76:	4602      	mov	r2, r0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	4640      	mov	r0, r8
 8005b7c:	4649      	mov	r1, r9
 8005b7e:	f7fa ff63 	bl	8000a48 <__aeabi_dcmple>
 8005b82:	b140      	cbz	r0, 8005b96 <__ieee754_sqrt+0x15e>
 8005b84:	f1b5 3fff 	cmp.w	r5, #4294967295	@ 0xffffffff
 8005b88:	e9da 0100 	ldrd	r0, r1, [sl]
 8005b8c:	e9db 2300 	ldrd	r2, r3, [fp]
 8005b90:	d10e      	bne.n	8005bb0 <__ieee754_sqrt+0x178>
 8005b92:	3601      	adds	r6, #1
 8005b94:	4625      	mov	r5, r4
 8005b96:	1073      	asrs	r3, r6, #1
 8005b98:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8005b9c:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8005ba0:	eb03 5107 	add.w	r1, r3, r7, lsl #20
 8005ba4:	086b      	lsrs	r3, r5, #1
 8005ba6:	ea43 70c6 	orr.w	r0, r3, r6, lsl #31
 8005baa:	e759      	b.n	8005a60 <__ieee754_sqrt+0x28>
 8005bac:	4690      	mov	r8, r2
 8005bae:	e7c1      	b.n	8005b34 <__ieee754_sqrt+0xfc>
 8005bb0:	f7fa fb18 	bl	80001e4 <__adddf3>
 8005bb4:	e9da 8900 	ldrd	r8, r9, [sl]
 8005bb8:	4602      	mov	r2, r0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4640      	mov	r0, r8
 8005bbe:	4649      	mov	r1, r9
 8005bc0:	f7fa ff38 	bl	8000a34 <__aeabi_dcmplt>
 8005bc4:	b120      	cbz	r0, 8005bd0 <__ieee754_sqrt+0x198>
 8005bc6:	1cab      	adds	r3, r5, #2
 8005bc8:	bf08      	it	eq
 8005bca:	3601      	addeq	r6, #1
 8005bcc:	3502      	adds	r5, #2
 8005bce:	e7e2      	b.n	8005b96 <__ieee754_sqrt+0x15e>
 8005bd0:	1c6b      	adds	r3, r5, #1
 8005bd2:	f023 0501 	bic.w	r5, r3, #1
 8005bd6:	e7de      	b.n	8005b96 <__ieee754_sqrt+0x15e>
 8005bd8:	7ff00000 	.word	0x7ff00000
 8005bdc:	080065e0 	.word	0x080065e0
 8005be0:	080065d8 	.word	0x080065d8
 8005be4:	00000000 	.word	0x00000000

08005be8 <__kernel_rem_pio2>:
 8005be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bec:	ed2d 8b02 	vpush	{d8}
 8005bf0:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005bf4:	f112 0f14 	cmn.w	r2, #20
 8005bf8:	9306      	str	r3, [sp, #24]
 8005bfa:	9104      	str	r1, [sp, #16]
 8005bfc:	4bc2      	ldr	r3, [pc, #776]	@ (8005f08 <__kernel_rem_pio2+0x320>)
 8005bfe:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8005c00:	9008      	str	r0, [sp, #32]
 8005c02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	9b06      	ldr	r3, [sp, #24]
 8005c0a:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005c0e:	bfa8      	it	ge
 8005c10:	1ed4      	subge	r4, r2, #3
 8005c12:	9305      	str	r3, [sp, #20]
 8005c14:	bfb2      	itee	lt
 8005c16:	2400      	movlt	r4, #0
 8005c18:	2318      	movge	r3, #24
 8005c1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8005c1e:	f06f 0317 	mvn.w	r3, #23
 8005c22:	fb04 3303 	mla	r3, r4, r3, r3
 8005c26:	eb03 0b02 	add.w	fp, r3, r2
 8005c2a:	9b00      	ldr	r3, [sp, #0]
 8005c2c:	9a05      	ldr	r2, [sp, #20]
 8005c2e:	ed9f 8bb2 	vldr	d8, [pc, #712]	@ 8005ef8 <__kernel_rem_pio2+0x310>
 8005c32:	eb03 0802 	add.w	r8, r3, r2
 8005c36:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005c38:	1aa7      	subs	r7, r4, r2
 8005c3a:	ae20      	add	r6, sp, #128	@ 0x80
 8005c3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005c40:	2500      	movs	r5, #0
 8005c42:	4545      	cmp	r5, r8
 8005c44:	dd12      	ble.n	8005c6c <__kernel_rem_pio2+0x84>
 8005c46:	9b06      	ldr	r3, [sp, #24]
 8005c48:	aa20      	add	r2, sp, #128	@ 0x80
 8005c4a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005c4e:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 8005c52:	2700      	movs	r7, #0
 8005c54:	9b00      	ldr	r3, [sp, #0]
 8005c56:	429f      	cmp	r7, r3
 8005c58:	dc2e      	bgt.n	8005cb8 <__kernel_rem_pio2+0xd0>
 8005c5a:	ed9f 7ba7 	vldr	d7, [pc, #668]	@ 8005ef8 <__kernel_rem_pio2+0x310>
 8005c5e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005c62:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005c66:	46a8      	mov	r8, r5
 8005c68:	2600      	movs	r6, #0
 8005c6a:	e01b      	b.n	8005ca4 <__kernel_rem_pio2+0xbc>
 8005c6c:	42ef      	cmn	r7, r5
 8005c6e:	d407      	bmi.n	8005c80 <__kernel_rem_pio2+0x98>
 8005c70:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005c74:	f7fa fc02 	bl	800047c <__aeabi_i2d>
 8005c78:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c7c:	3501      	adds	r5, #1
 8005c7e:	e7e0      	b.n	8005c42 <__kernel_rem_pio2+0x5a>
 8005c80:	ec51 0b18 	vmov	r0, r1, d8
 8005c84:	e7f8      	b.n	8005c78 <__kernel_rem_pio2+0x90>
 8005c86:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 8005c8a:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005c8e:	f7fa fc5f 	bl	8000550 <__aeabi_dmul>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c9a:	f7fa faa3 	bl	80001e4 <__adddf3>
 8005c9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ca2:	3601      	adds	r6, #1
 8005ca4:	9b05      	ldr	r3, [sp, #20]
 8005ca6:	429e      	cmp	r6, r3
 8005ca8:	dded      	ble.n	8005c86 <__kernel_rem_pio2+0x9e>
 8005caa:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005cae:	3701      	adds	r7, #1
 8005cb0:	ecaa 7b02 	vstmia	sl!, {d7}
 8005cb4:	3508      	adds	r5, #8
 8005cb6:	e7cd      	b.n	8005c54 <__kernel_rem_pio2+0x6c>
 8005cb8:	9b00      	ldr	r3, [sp, #0]
 8005cba:	f8dd 8000 	ldr.w	r8, [sp]
 8005cbe:	aa0c      	add	r2, sp, #48	@ 0x30
 8005cc0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8005cc6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8005cc8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005ccc:	9309      	str	r3, [sp, #36]	@ 0x24
 8005cce:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8005cd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005cd4:	ab98      	add	r3, sp, #608	@ 0x260
 8005cd6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005cda:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 8005cde:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005ce2:	ac0c      	add	r4, sp, #48	@ 0x30
 8005ce4:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005ce6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 8005cea:	46a1      	mov	r9, r4
 8005cec:	46c2      	mov	sl, r8
 8005cee:	f1ba 0f00 	cmp.w	sl, #0
 8005cf2:	dc77      	bgt.n	8005de4 <__kernel_rem_pio2+0x1fc>
 8005cf4:	4658      	mov	r0, fp
 8005cf6:	ed9d 0b02 	vldr	d0, [sp, #8]
 8005cfa:	f7ff fde5 	bl	80058c8 <scalbn>
 8005cfe:	ec57 6b10 	vmov	r6, r7, d0
 8005d02:	2200      	movs	r2, #0
 8005d04:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8005d08:	4630      	mov	r0, r6
 8005d0a:	4639      	mov	r1, r7
 8005d0c:	f7fa fc20 	bl	8000550 <__aeabi_dmul>
 8005d10:	ec41 0b10 	vmov	d0, r0, r1
 8005d14:	f000 fab8 	bl	8006288 <floor>
 8005d18:	4b7c      	ldr	r3, [pc, #496]	@ (8005f0c <__kernel_rem_pio2+0x324>)
 8005d1a:	ec51 0b10 	vmov	r0, r1, d0
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f7fa fc16 	bl	8000550 <__aeabi_dmul>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4630      	mov	r0, r6
 8005d2a:	4639      	mov	r1, r7
 8005d2c:	f7fa fa58 	bl	80001e0 <__aeabi_dsub>
 8005d30:	460f      	mov	r7, r1
 8005d32:	4606      	mov	r6, r0
 8005d34:	f7fa febc 	bl	8000ab0 <__aeabi_d2iz>
 8005d38:	9002      	str	r0, [sp, #8]
 8005d3a:	f7fa fb9f 	bl	800047c <__aeabi_i2d>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	460b      	mov	r3, r1
 8005d42:	4630      	mov	r0, r6
 8005d44:	4639      	mov	r1, r7
 8005d46:	f7fa fa4b 	bl	80001e0 <__aeabi_dsub>
 8005d4a:	f1bb 0f00 	cmp.w	fp, #0
 8005d4e:	4606      	mov	r6, r0
 8005d50:	460f      	mov	r7, r1
 8005d52:	dd6c      	ble.n	8005e2e <__kernel_rem_pio2+0x246>
 8005d54:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8005d58:	ab0c      	add	r3, sp, #48	@ 0x30
 8005d5a:	9d02      	ldr	r5, [sp, #8]
 8005d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005d60:	f1cb 0018 	rsb	r0, fp, #24
 8005d64:	fa43 f200 	asr.w	r2, r3, r0
 8005d68:	4415      	add	r5, r2
 8005d6a:	4082      	lsls	r2, r0
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	aa0c      	add	r2, sp, #48	@ 0x30
 8005d70:	9502      	str	r5, [sp, #8]
 8005d72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005d76:	f1cb 0217 	rsb	r2, fp, #23
 8005d7a:	fa43 f902 	asr.w	r9, r3, r2
 8005d7e:	f1b9 0f00 	cmp.w	r9, #0
 8005d82:	dd64      	ble.n	8005e4e <__kernel_rem_pio2+0x266>
 8005d84:	9b02      	ldr	r3, [sp, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	3301      	adds	r3, #1
 8005d8a:	9302      	str	r3, [sp, #8]
 8005d8c:	4615      	mov	r5, r2
 8005d8e:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005d92:	4590      	cmp	r8, r2
 8005d94:	f300 80a1 	bgt.w	8005eda <__kernel_rem_pio2+0x2f2>
 8005d98:	f1bb 0f00 	cmp.w	fp, #0
 8005d9c:	dd07      	ble.n	8005dae <__kernel_rem_pio2+0x1c6>
 8005d9e:	f1bb 0f01 	cmp.w	fp, #1
 8005da2:	f000 80c1 	beq.w	8005f28 <__kernel_rem_pio2+0x340>
 8005da6:	f1bb 0f02 	cmp.w	fp, #2
 8005daa:	f000 80c8 	beq.w	8005f3e <__kernel_rem_pio2+0x356>
 8005dae:	f1b9 0f02 	cmp.w	r9, #2
 8005db2:	d14c      	bne.n	8005e4e <__kernel_rem_pio2+0x266>
 8005db4:	4632      	mov	r2, r6
 8005db6:	463b      	mov	r3, r7
 8005db8:	4955      	ldr	r1, [pc, #340]	@ (8005f10 <__kernel_rem_pio2+0x328>)
 8005dba:	2000      	movs	r0, #0
 8005dbc:	f7fa fa10 	bl	80001e0 <__aeabi_dsub>
 8005dc0:	4606      	mov	r6, r0
 8005dc2:	460f      	mov	r7, r1
 8005dc4:	2d00      	cmp	r5, #0
 8005dc6:	d042      	beq.n	8005e4e <__kernel_rem_pio2+0x266>
 8005dc8:	4658      	mov	r0, fp
 8005dca:	ed9f 0b4d 	vldr	d0, [pc, #308]	@ 8005f00 <__kernel_rem_pio2+0x318>
 8005dce:	f7ff fd7b 	bl	80058c8 <scalbn>
 8005dd2:	4630      	mov	r0, r6
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	ec53 2b10 	vmov	r2, r3, d0
 8005dda:	f7fa fa01 	bl	80001e0 <__aeabi_dsub>
 8005dde:	4606      	mov	r6, r0
 8005de0:	460f      	mov	r7, r1
 8005de2:	e034      	b.n	8005e4e <__kernel_rem_pio2+0x266>
 8005de4:	4b4b      	ldr	r3, [pc, #300]	@ (8005f14 <__kernel_rem_pio2+0x32c>)
 8005de6:	2200      	movs	r2, #0
 8005de8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dec:	f7fa fbb0 	bl	8000550 <__aeabi_dmul>
 8005df0:	f7fa fe5e 	bl	8000ab0 <__aeabi_d2iz>
 8005df4:	f7fa fb42 	bl	800047c <__aeabi_i2d>
 8005df8:	4b47      	ldr	r3, [pc, #284]	@ (8005f18 <__kernel_rem_pio2+0x330>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	460f      	mov	r7, r1
 8005e00:	f7fa fba6 	bl	8000550 <__aeabi_dmul>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e0c:	f7fa f9e8 	bl	80001e0 <__aeabi_dsub>
 8005e10:	f7fa fe4e 	bl	8000ab0 <__aeabi_d2iz>
 8005e14:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8005e18:	f849 0b04 	str.w	r0, [r9], #4
 8005e1c:	4639      	mov	r1, r7
 8005e1e:	4630      	mov	r0, r6
 8005e20:	f7fa f9e0 	bl	80001e4 <__adddf3>
 8005e24:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005e28:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e2c:	e75f      	b.n	8005cee <__kernel_rem_pio2+0x106>
 8005e2e:	d107      	bne.n	8005e40 <__kernel_rem_pio2+0x258>
 8005e30:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8005e34:	aa0c      	add	r2, sp, #48	@ 0x30
 8005e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e3a:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8005e3e:	e79e      	b.n	8005d7e <__kernel_rem_pio2+0x196>
 8005e40:	4b36      	ldr	r3, [pc, #216]	@ (8005f1c <__kernel_rem_pio2+0x334>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	f7fa fe0a 	bl	8000a5c <__aeabi_dcmpge>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	d143      	bne.n	8005ed4 <__kernel_rem_pio2+0x2ec>
 8005e4c:	4681      	mov	r9, r0
 8005e4e:	2200      	movs	r2, #0
 8005e50:	2300      	movs	r3, #0
 8005e52:	4630      	mov	r0, r6
 8005e54:	4639      	mov	r1, r7
 8005e56:	f7fa fde3 	bl	8000a20 <__aeabi_dcmpeq>
 8005e5a:	2800      	cmp	r0, #0
 8005e5c:	f000 80c1 	beq.w	8005fe2 <__kernel_rem_pio2+0x3fa>
 8005e60:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8005e64:	2200      	movs	r2, #0
 8005e66:	9900      	ldr	r1, [sp, #0]
 8005e68:	428b      	cmp	r3, r1
 8005e6a:	da70      	bge.n	8005f4e <__kernel_rem_pio2+0x366>
 8005e6c:	2a00      	cmp	r2, #0
 8005e6e:	f000 808b 	beq.w	8005f88 <__kernel_rem_pio2+0x3a0>
 8005e72:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005e76:	ab0c      	add	r3, sp, #48	@ 0x30
 8005e78:	f1ab 0b18 	sub.w	fp, fp, #24
 8005e7c:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d0f6      	beq.n	8005e72 <__kernel_rem_pio2+0x28a>
 8005e84:	4658      	mov	r0, fp
 8005e86:	ed9f 0b1e 	vldr	d0, [pc, #120]	@ 8005f00 <__kernel_rem_pio2+0x318>
 8005e8a:	f7ff fd1d 	bl	80058c8 <scalbn>
 8005e8e:	f108 0301 	add.w	r3, r8, #1
 8005e92:	00da      	lsls	r2, r3, #3
 8005e94:	9205      	str	r2, [sp, #20]
 8005e96:	ec55 4b10 	vmov	r4, r5, d0
 8005e9a:	aa70      	add	r2, sp, #448	@ 0x1c0
 8005e9c:	f8df b074 	ldr.w	fp, [pc, #116]	@ 8005f14 <__kernel_rem_pio2+0x32c>
 8005ea0:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8005ea4:	4646      	mov	r6, r8
 8005ea6:	f04f 0a00 	mov.w	sl, #0
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	f280 80d1 	bge.w	8006052 <__kernel_rem_pio2+0x46a>
 8005eb0:	4644      	mov	r4, r8
 8005eb2:	2c00      	cmp	r4, #0
 8005eb4:	f2c0 80ff 	blt.w	80060b6 <__kernel_rem_pio2+0x4ce>
 8005eb8:	4b19      	ldr	r3, [pc, #100]	@ (8005f20 <__kernel_rem_pio2+0x338>)
 8005eba:	461f      	mov	r7, r3
 8005ebc:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005ebe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ec2:	9306      	str	r3, [sp, #24]
 8005ec4:	f04f 0a00 	mov.w	sl, #0
 8005ec8:	f04f 0b00 	mov.w	fp, #0
 8005ecc:	2600      	movs	r6, #0
 8005ece:	eba8 0504 	sub.w	r5, r8, r4
 8005ed2:	e0e4      	b.n	800609e <__kernel_rem_pio2+0x4b6>
 8005ed4:	f04f 0902 	mov.w	r9, #2
 8005ed8:	e754      	b.n	8005d84 <__kernel_rem_pio2+0x19c>
 8005eda:	f854 3b04 	ldr.w	r3, [r4], #4
 8005ede:	bb0d      	cbnz	r5, 8005f24 <__kernel_rem_pio2+0x33c>
 8005ee0:	b123      	cbz	r3, 8005eec <__kernel_rem_pio2+0x304>
 8005ee2:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005ee6:	f844 3c04 	str.w	r3, [r4, #-4]
 8005eea:	2301      	movs	r3, #1
 8005eec:	3201      	adds	r2, #1
 8005eee:	461d      	mov	r5, r3
 8005ef0:	e74f      	b.n	8005d92 <__kernel_rem_pio2+0x1aa>
 8005ef2:	bf00      	nop
 8005ef4:	f3af 8000 	nop.w
	...
 8005f04:	3ff00000 	.word	0x3ff00000
 8005f08:	08006628 	.word	0x08006628
 8005f0c:	40200000 	.word	0x40200000
 8005f10:	3ff00000 	.word	0x3ff00000
 8005f14:	3e700000 	.word	0x3e700000
 8005f18:	41700000 	.word	0x41700000
 8005f1c:	3fe00000 	.word	0x3fe00000
 8005f20:	080065e8 	.word	0x080065e8
 8005f24:	1acb      	subs	r3, r1, r3
 8005f26:	e7de      	b.n	8005ee6 <__kernel_rem_pio2+0x2fe>
 8005f28:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8005f2c:	ab0c      	add	r3, sp, #48	@ 0x30
 8005f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f32:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005f36:	a90c      	add	r1, sp, #48	@ 0x30
 8005f38:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005f3c:	e737      	b.n	8005dae <__kernel_rem_pio2+0x1c6>
 8005f3e:	f108 32ff 	add.w	r2, r8, #4294967295	@ 0xffffffff
 8005f42:	ab0c      	add	r3, sp, #48	@ 0x30
 8005f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f48:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005f4c:	e7f3      	b.n	8005f36 <__kernel_rem_pio2+0x34e>
 8005f4e:	a90c      	add	r1, sp, #48	@ 0x30
 8005f50:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005f54:	3b01      	subs	r3, #1
 8005f56:	430a      	orrs	r2, r1
 8005f58:	e785      	b.n	8005e66 <__kernel_rem_pio2+0x27e>
 8005f5a:	3401      	adds	r4, #1
 8005f5c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005f60:	2a00      	cmp	r2, #0
 8005f62:	d0fa      	beq.n	8005f5a <__kernel_rem_pio2+0x372>
 8005f64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f66:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005f6a:	eb0d 0503 	add.w	r5, sp, r3
 8005f6e:	9b06      	ldr	r3, [sp, #24]
 8005f70:	aa20      	add	r2, sp, #128	@ 0x80
 8005f72:	4443      	add	r3, r8
 8005f74:	f108 0701 	add.w	r7, r8, #1
 8005f78:	3d98      	subs	r5, #152	@ 0x98
 8005f7a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 8005f7e:	4444      	add	r4, r8
 8005f80:	42bc      	cmp	r4, r7
 8005f82:	da04      	bge.n	8005f8e <__kernel_rem_pio2+0x3a6>
 8005f84:	46a0      	mov	r8, r4
 8005f86:	e6a2      	b.n	8005cce <__kernel_rem_pio2+0xe6>
 8005f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f8a:	2401      	movs	r4, #1
 8005f8c:	e7e6      	b.n	8005f5c <__kernel_rem_pio2+0x374>
 8005f8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f90:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005f94:	f7fa fa72 	bl	800047c <__aeabi_i2d>
 8005f98:	ed9f 7baf 	vldr	d7, [pc, #700]	@ 8006258 <__kernel_rem_pio2+0x670>
 8005f9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005fa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005fa4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fa8:	46b2      	mov	sl, r6
 8005faa:	f04f 0800 	mov.w	r8, #0
 8005fae:	9b05      	ldr	r3, [sp, #20]
 8005fb0:	4598      	cmp	r8, r3
 8005fb2:	dd05      	ble.n	8005fc0 <__kernel_rem_pio2+0x3d8>
 8005fb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005fb8:	3701      	adds	r7, #1
 8005fba:	eca5 7b02 	vstmia	r5!, {d7}
 8005fbe:	e7df      	b.n	8005f80 <__kernel_rem_pio2+0x398>
 8005fc0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 8005fc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005fc8:	f7fa fac2 	bl	8000550 <__aeabi_dmul>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fd4:	f7fa f906 	bl	80001e4 <__adddf3>
 8005fd8:	f108 0801 	add.w	r8, r8, #1
 8005fdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005fe0:	e7e5      	b.n	8005fae <__kernel_rem_pio2+0x3c6>
 8005fe2:	f1cb 0000 	rsb	r0, fp, #0
 8005fe6:	ec47 6b10 	vmov	d0, r6, r7
 8005fea:	f7ff fc6d 	bl	80058c8 <scalbn>
 8005fee:	ec55 4b10 	vmov	r4, r5, d0
 8005ff2:	4b9b      	ldr	r3, [pc, #620]	@ (8006260 <__kernel_rem_pio2+0x678>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	4620      	mov	r0, r4
 8005ff8:	4629      	mov	r1, r5
 8005ffa:	f7fa fd2f 	bl	8000a5c <__aeabi_dcmpge>
 8005ffe:	b300      	cbz	r0, 8006042 <__kernel_rem_pio2+0x45a>
 8006000:	4b98      	ldr	r3, [pc, #608]	@ (8006264 <__kernel_rem_pio2+0x67c>)
 8006002:	2200      	movs	r2, #0
 8006004:	4620      	mov	r0, r4
 8006006:	4629      	mov	r1, r5
 8006008:	f7fa faa2 	bl	8000550 <__aeabi_dmul>
 800600c:	f7fa fd50 	bl	8000ab0 <__aeabi_d2iz>
 8006010:	4606      	mov	r6, r0
 8006012:	f7fa fa33 	bl	800047c <__aeabi_i2d>
 8006016:	4b92      	ldr	r3, [pc, #584]	@ (8006260 <__kernel_rem_pio2+0x678>)
 8006018:	2200      	movs	r2, #0
 800601a:	f7fa fa99 	bl	8000550 <__aeabi_dmul>
 800601e:	460b      	mov	r3, r1
 8006020:	4602      	mov	r2, r0
 8006022:	4629      	mov	r1, r5
 8006024:	4620      	mov	r0, r4
 8006026:	f7fa f8db 	bl	80001e0 <__aeabi_dsub>
 800602a:	f7fa fd41 	bl	8000ab0 <__aeabi_d2iz>
 800602e:	ab0c      	add	r3, sp, #48	@ 0x30
 8006030:	f10b 0b18 	add.w	fp, fp, #24
 8006034:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006038:	f108 0801 	add.w	r8, r8, #1
 800603c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8006040:	e720      	b.n	8005e84 <__kernel_rem_pio2+0x29c>
 8006042:	4620      	mov	r0, r4
 8006044:	4629      	mov	r1, r5
 8006046:	f7fa fd33 	bl	8000ab0 <__aeabi_d2iz>
 800604a:	ab0c      	add	r3, sp, #48	@ 0x30
 800604c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8006050:	e718      	b.n	8005e84 <__kernel_rem_pio2+0x29c>
 8006052:	ab0c      	add	r3, sp, #48	@ 0x30
 8006054:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006058:	f7fa fa10 	bl	800047c <__aeabi_i2d>
 800605c:	4622      	mov	r2, r4
 800605e:	462b      	mov	r3, r5
 8006060:	f7fa fa76 	bl	8000550 <__aeabi_dmul>
 8006064:	4652      	mov	r2, sl
 8006066:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800606a:	465b      	mov	r3, fp
 800606c:	4620      	mov	r0, r4
 800606e:	4629      	mov	r1, r5
 8006070:	f7fa fa6e 	bl	8000550 <__aeabi_dmul>
 8006074:	3e01      	subs	r6, #1
 8006076:	4604      	mov	r4, r0
 8006078:	460d      	mov	r5, r1
 800607a:	e716      	b.n	8005eaa <__kernel_rem_pio2+0x2c2>
 800607c:	9906      	ldr	r1, [sp, #24]
 800607e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8006082:	9106      	str	r1, [sp, #24]
 8006084:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8006088:	f7fa fa62 	bl	8000550 <__aeabi_dmul>
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	4650      	mov	r0, sl
 8006092:	4659      	mov	r1, fp
 8006094:	f7fa f8a6 	bl	80001e4 <__adddf3>
 8006098:	3601      	adds	r6, #1
 800609a:	4682      	mov	sl, r0
 800609c:	468b      	mov	fp, r1
 800609e:	9b00      	ldr	r3, [sp, #0]
 80060a0:	429e      	cmp	r6, r3
 80060a2:	dc01      	bgt.n	80060a8 <__kernel_rem_pio2+0x4c0>
 80060a4:	42ae      	cmp	r6, r5
 80060a6:	dde9      	ble.n	800607c <__kernel_rem_pio2+0x494>
 80060a8:	ab48      	add	r3, sp, #288	@ 0x120
 80060aa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80060ae:	e9c5 ab00 	strd	sl, fp, [r5]
 80060b2:	3c01      	subs	r4, #1
 80060b4:	e6fd      	b.n	8005eb2 <__kernel_rem_pio2+0x2ca>
 80060b6:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	dc0b      	bgt.n	80060d4 <__kernel_rem_pio2+0x4ec>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dc35      	bgt.n	800612c <__kernel_rem_pio2+0x544>
 80060c0:	d059      	beq.n	8006176 <__kernel_rem_pio2+0x58e>
 80060c2:	9b02      	ldr	r3, [sp, #8]
 80060c4:	f003 0007 	and.w	r0, r3, #7
 80060c8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80060cc:	ecbd 8b02 	vpop	{d8}
 80060d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80060d6:	2b03      	cmp	r3, #3
 80060d8:	d1f3      	bne.n	80060c2 <__kernel_rem_pio2+0x4da>
 80060da:	9b05      	ldr	r3, [sp, #20]
 80060dc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80060e0:	eb0d 0403 	add.w	r4, sp, r3
 80060e4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80060e8:	4625      	mov	r5, r4
 80060ea:	46c2      	mov	sl, r8
 80060ec:	f1ba 0f00 	cmp.w	sl, #0
 80060f0:	dc69      	bgt.n	80061c6 <__kernel_rem_pio2+0x5de>
 80060f2:	4645      	mov	r5, r8
 80060f4:	2d01      	cmp	r5, #1
 80060f6:	f300 8087 	bgt.w	8006208 <__kernel_rem_pio2+0x620>
 80060fa:	9c05      	ldr	r4, [sp, #20]
 80060fc:	ab48      	add	r3, sp, #288	@ 0x120
 80060fe:	441c      	add	r4, r3
 8006100:	2000      	movs	r0, #0
 8006102:	2100      	movs	r1, #0
 8006104:	f1b8 0f01 	cmp.w	r8, #1
 8006108:	f300 809c 	bgt.w	8006244 <__kernel_rem_pio2+0x65c>
 800610c:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 8006110:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 8006114:	f1b9 0f00 	cmp.w	r9, #0
 8006118:	f040 80a6 	bne.w	8006268 <__kernel_rem_pio2+0x680>
 800611c:	9b04      	ldr	r3, [sp, #16]
 800611e:	e9c3 5600 	strd	r5, r6, [r3]
 8006122:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8006126:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800612a:	e7ca      	b.n	80060c2 <__kernel_rem_pio2+0x4da>
 800612c:	9d05      	ldr	r5, [sp, #20]
 800612e:	ab48      	add	r3, sp, #288	@ 0x120
 8006130:	441d      	add	r5, r3
 8006132:	4644      	mov	r4, r8
 8006134:	2000      	movs	r0, #0
 8006136:	2100      	movs	r1, #0
 8006138:	2c00      	cmp	r4, #0
 800613a:	da35      	bge.n	80061a8 <__kernel_rem_pio2+0x5c0>
 800613c:	f1b9 0f00 	cmp.w	r9, #0
 8006140:	d038      	beq.n	80061b4 <__kernel_rem_pio2+0x5cc>
 8006142:	4602      	mov	r2, r0
 8006144:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006148:	9c04      	ldr	r4, [sp, #16]
 800614a:	e9c4 2300 	strd	r2, r3, [r4]
 800614e:	4602      	mov	r2, r0
 8006150:	460b      	mov	r3, r1
 8006152:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8006156:	f7fa f843 	bl	80001e0 <__aeabi_dsub>
 800615a:	ad4a      	add	r5, sp, #296	@ 0x128
 800615c:	2401      	movs	r4, #1
 800615e:	45a0      	cmp	r8, r4
 8006160:	da2b      	bge.n	80061ba <__kernel_rem_pio2+0x5d2>
 8006162:	f1b9 0f00 	cmp.w	r9, #0
 8006166:	d002      	beq.n	800616e <__kernel_rem_pio2+0x586>
 8006168:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800616c:	4619      	mov	r1, r3
 800616e:	9b04      	ldr	r3, [sp, #16]
 8006170:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006174:	e7a5      	b.n	80060c2 <__kernel_rem_pio2+0x4da>
 8006176:	9c05      	ldr	r4, [sp, #20]
 8006178:	ab48      	add	r3, sp, #288	@ 0x120
 800617a:	441c      	add	r4, r3
 800617c:	2000      	movs	r0, #0
 800617e:	2100      	movs	r1, #0
 8006180:	f1b8 0f00 	cmp.w	r8, #0
 8006184:	da09      	bge.n	800619a <__kernel_rem_pio2+0x5b2>
 8006186:	f1b9 0f00 	cmp.w	r9, #0
 800618a:	d002      	beq.n	8006192 <__kernel_rem_pio2+0x5aa>
 800618c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006190:	4619      	mov	r1, r3
 8006192:	9b04      	ldr	r3, [sp, #16]
 8006194:	e9c3 0100 	strd	r0, r1, [r3]
 8006198:	e793      	b.n	80060c2 <__kernel_rem_pio2+0x4da>
 800619a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800619e:	f7fa f821 	bl	80001e4 <__adddf3>
 80061a2:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80061a6:	e7eb      	b.n	8006180 <__kernel_rem_pio2+0x598>
 80061a8:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 80061ac:	f7fa f81a 	bl	80001e4 <__adddf3>
 80061b0:	3c01      	subs	r4, #1
 80061b2:	e7c1      	b.n	8006138 <__kernel_rem_pio2+0x550>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	e7c6      	b.n	8006148 <__kernel_rem_pio2+0x560>
 80061ba:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80061be:	f7fa f811 	bl	80001e4 <__adddf3>
 80061c2:	3401      	adds	r4, #1
 80061c4:	e7cb      	b.n	800615e <__kernel_rem_pio2+0x576>
 80061c6:	ed35 7b02 	vldmdb	r5!, {d7}
 80061ca:	ed8d 7b00 	vstr	d7, [sp]
 80061ce:	ed95 7b02 	vldr	d7, [r5, #8]
 80061d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061d6:	ec53 2b17 	vmov	r2, r3, d7
 80061da:	ed8d 7b06 	vstr	d7, [sp, #24]
 80061de:	f7fa f801 	bl	80001e4 <__adddf3>
 80061e2:	4602      	mov	r2, r0
 80061e4:	460b      	mov	r3, r1
 80061e6:	4606      	mov	r6, r0
 80061e8:	460f      	mov	r7, r1
 80061ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061ee:	f7f9 fff7 	bl	80001e0 <__aeabi_dsub>
 80061f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80061f6:	f7f9 fff5 	bl	80001e4 <__adddf3>
 80061fa:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80061fe:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8006202:	e9c5 6700 	strd	r6, r7, [r5]
 8006206:	e771      	b.n	80060ec <__kernel_rem_pio2+0x504>
 8006208:	ed34 7b02 	vldmdb	r4!, {d7}
 800620c:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 8006210:	ec51 0b17 	vmov	r0, r1, d7
 8006214:	4652      	mov	r2, sl
 8006216:	465b      	mov	r3, fp
 8006218:	ed8d 7b00 	vstr	d7, [sp]
 800621c:	f7f9 ffe2 	bl	80001e4 <__adddf3>
 8006220:	4602      	mov	r2, r0
 8006222:	460b      	mov	r3, r1
 8006224:	4606      	mov	r6, r0
 8006226:	460f      	mov	r7, r1
 8006228:	e9dd 0100 	ldrd	r0, r1, [sp]
 800622c:	f7f9 ffd8 	bl	80001e0 <__aeabi_dsub>
 8006230:	4652      	mov	r2, sl
 8006232:	465b      	mov	r3, fp
 8006234:	f7f9 ffd6 	bl	80001e4 <__adddf3>
 8006238:	3d01      	subs	r5, #1
 800623a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800623e:	e9c4 6700 	strd	r6, r7, [r4]
 8006242:	e757      	b.n	80060f4 <__kernel_rem_pio2+0x50c>
 8006244:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006248:	f7f9 ffcc 	bl	80001e4 <__adddf3>
 800624c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8006250:	e758      	b.n	8006104 <__kernel_rem_pio2+0x51c>
 8006252:	bf00      	nop
 8006254:	f3af 8000 	nop.w
	...
 8006260:	41700000 	.word	0x41700000
 8006264:	3e700000 	.word	0x3e700000
 8006268:	9b04      	ldr	r3, [sp, #16]
 800626a:	9a04      	ldr	r2, [sp, #16]
 800626c:	601d      	str	r5, [r3, #0]
 800626e:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 8006272:	605c      	str	r4, [r3, #4]
 8006274:	609f      	str	r7, [r3, #8]
 8006276:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 800627a:	60d3      	str	r3, [r2, #12]
 800627c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006280:	6110      	str	r0, [r2, #16]
 8006282:	6153      	str	r3, [r2, #20]
 8006284:	e71d      	b.n	80060c2 <__kernel_rem_pio2+0x4da>
 8006286:	bf00      	nop

08006288 <floor>:
 8006288:	ec51 0b10 	vmov	r0, r1, d0
 800628c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006294:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8006298:	2e13      	cmp	r6, #19
 800629a:	460c      	mov	r4, r1
 800629c:	4605      	mov	r5, r0
 800629e:	4680      	mov	r8, r0
 80062a0:	dc34      	bgt.n	800630c <floor+0x84>
 80062a2:	2e00      	cmp	r6, #0
 80062a4:	da17      	bge.n	80062d6 <floor+0x4e>
 80062a6:	a332      	add	r3, pc, #200	@ (adr r3, 8006370 <floor+0xe8>)
 80062a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ac:	f7f9 ff9a 	bl	80001e4 <__adddf3>
 80062b0:	2200      	movs	r2, #0
 80062b2:	2300      	movs	r3, #0
 80062b4:	f7fa fbdc 	bl	8000a70 <__aeabi_dcmpgt>
 80062b8:	b150      	cbz	r0, 80062d0 <floor+0x48>
 80062ba:	2c00      	cmp	r4, #0
 80062bc:	da55      	bge.n	800636a <floor+0xe2>
 80062be:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80062c2:	432c      	orrs	r4, r5
 80062c4:	2500      	movs	r5, #0
 80062c6:	42ac      	cmp	r4, r5
 80062c8:	4c2b      	ldr	r4, [pc, #172]	@ (8006378 <floor+0xf0>)
 80062ca:	bf08      	it	eq
 80062cc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80062d0:	4621      	mov	r1, r4
 80062d2:	4628      	mov	r0, r5
 80062d4:	e023      	b.n	800631e <floor+0x96>
 80062d6:	4f29      	ldr	r7, [pc, #164]	@ (800637c <floor+0xf4>)
 80062d8:	4137      	asrs	r7, r6
 80062da:	ea01 0307 	and.w	r3, r1, r7
 80062de:	4303      	orrs	r3, r0
 80062e0:	d01d      	beq.n	800631e <floor+0x96>
 80062e2:	a323      	add	r3, pc, #140	@ (adr r3, 8006370 <floor+0xe8>)
 80062e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e8:	f7f9 ff7c 	bl	80001e4 <__adddf3>
 80062ec:	2200      	movs	r2, #0
 80062ee:	2300      	movs	r3, #0
 80062f0:	f7fa fbbe 	bl	8000a70 <__aeabi_dcmpgt>
 80062f4:	2800      	cmp	r0, #0
 80062f6:	d0eb      	beq.n	80062d0 <floor+0x48>
 80062f8:	2c00      	cmp	r4, #0
 80062fa:	bfbe      	ittt	lt
 80062fc:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8006300:	4133      	asrlt	r3, r6
 8006302:	18e4      	addlt	r4, r4, r3
 8006304:	ea24 0407 	bic.w	r4, r4, r7
 8006308:	2500      	movs	r5, #0
 800630a:	e7e1      	b.n	80062d0 <floor+0x48>
 800630c:	2e33      	cmp	r6, #51	@ 0x33
 800630e:	dd0a      	ble.n	8006326 <floor+0x9e>
 8006310:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8006314:	d103      	bne.n	800631e <floor+0x96>
 8006316:	4602      	mov	r2, r0
 8006318:	460b      	mov	r3, r1
 800631a:	f7f9 ff63 	bl	80001e4 <__adddf3>
 800631e:	ec41 0b10 	vmov	d0, r0, r1
 8006322:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006326:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800632a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800632e:	40df      	lsrs	r7, r3
 8006330:	4207      	tst	r7, r0
 8006332:	d0f4      	beq.n	800631e <floor+0x96>
 8006334:	a30e      	add	r3, pc, #56	@ (adr r3, 8006370 <floor+0xe8>)
 8006336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800633a:	f7f9 ff53 	bl	80001e4 <__adddf3>
 800633e:	2200      	movs	r2, #0
 8006340:	2300      	movs	r3, #0
 8006342:	f7fa fb95 	bl	8000a70 <__aeabi_dcmpgt>
 8006346:	2800      	cmp	r0, #0
 8006348:	d0c2      	beq.n	80062d0 <floor+0x48>
 800634a:	2c00      	cmp	r4, #0
 800634c:	da0a      	bge.n	8006364 <floor+0xdc>
 800634e:	2e14      	cmp	r6, #20
 8006350:	d101      	bne.n	8006356 <floor+0xce>
 8006352:	3401      	adds	r4, #1
 8006354:	e006      	b.n	8006364 <floor+0xdc>
 8006356:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800635a:	2301      	movs	r3, #1
 800635c:	40b3      	lsls	r3, r6
 800635e:	441d      	add	r5, r3
 8006360:	4545      	cmp	r5, r8
 8006362:	d3f6      	bcc.n	8006352 <floor+0xca>
 8006364:	ea25 0507 	bic.w	r5, r5, r7
 8006368:	e7b2      	b.n	80062d0 <floor+0x48>
 800636a:	2500      	movs	r5, #0
 800636c:	462c      	mov	r4, r5
 800636e:	e7af      	b.n	80062d0 <floor+0x48>
 8006370:	8800759c 	.word	0x8800759c
 8006374:	7e37e43c 	.word	0x7e37e43c
 8006378:	bff00000 	.word	0xbff00000
 800637c:	000fffff 	.word	0x000fffff

08006380 <_init>:
 8006380:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006382:	bf00      	nop
 8006384:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006386:	bc08      	pop	{r3}
 8006388:	469e      	mov	lr, r3
 800638a:	4770      	bx	lr

0800638c <_fini>:
 800638c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638e:	bf00      	nop
 8006390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006392:	bc08      	pop	{r3}
 8006394:	469e      	mov	lr, r3
 8006396:	4770      	bx	lr
